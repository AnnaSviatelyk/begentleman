!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=75)}([function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));const r={selector:".selector",selectorActive:"selector--active",selectorOption:".selector__option",selectorOptionText:".selector__option--all p",selectorOptionActive:".selector__option--active",selectorOptionActiveClass:"selector__option--active",filterSize:".filter__size",filterSizeSelected:"filter__size--selected",filterFit:".filter__fit-option",filterFitSelected:"filter__fit-option--selected",filterColor:".filter__color-option",filterColorSelected:"filter__color-option--active",paginationLink:".pagination__link",paginationLinkActive:"pagination__link--active",arrowBack:".pagination__arrow--prev",arrowNext:".pagination__arrow--next",lowerPriceInRange:".filter__price-number--lower",higherPriceInRange:".filter__price-number--higher",emptyFilter:".empty-filter-result",paginationContainer:".pagination",cleanFilters:".filter__clean-filters",productSize:".product-description__size",productColor:".product-description__color",productSizeSelected:"product-description__size--active",productColorSelected:"product-description__color--active",burgerMenuIcon:".hero-area__burger-menu",burgerMenuContainer:".vertical-menu",productImagesOptions:".product-description__more-images-item",flippingImageArrowLeft:".product-description__arrow--left",flippingImageArrowRight:".product-description__arrow--right",imagesContainer:"#slider"}},function(e,t,n){"use strict";n.d(t,"b",(function(){return r})),n.d(t,"a",(function(){return o}));const r=(e,t)=>{document.querySelectorAll(e).forEach(e=>{e.addEventListener("click",(function(){document.querySelector("."+t)&&document.querySelector("."+t).classList.remove(t),e.classList.add(t)}))})},i=(e,t,n)=>{const r=e.target.classList;e.target===n||r.contains("vertical-menu__navigation")||r.contains("vertical-menu__navigation-link")||(t.style.display="flex",n.style.display="none",document.removeEventListener("click",i))},o=(e,t)=>{const n=document.querySelector(e),r=document.querySelector(t);n.addEventListener("click",e=>{e.stopPropagation(),n.style.display="none",r.style.display="block"}),document.addEventListener("click",e=>i(e,n,r))}},function(e,t,n){},function(e,t,n){var r,i,o;/*! nouislider - 14.5.0 - 5/11/2020 */i=[],void 0===(o="function"==typeof(r=function(){"use strict";var e="14.5.0";function t(e){e.parentElement.removeChild(e)}function n(e){return null!=e}function r(e){e.preventDefault()}function i(e){return"number"==typeof e&&!isNaN(e)&&isFinite(e)}function o(e,t,n){n>0&&(l(e,t),setTimeout((function(){u(e,t)}),n))}function s(e){return Math.max(Math.min(e,100),0)}function a(e){return Array.isArray(e)?e:[e]}function c(e){var t=(e=String(e)).split(".");return t.length>1?t[1].length:0}function l(e,t){e.classList&&!/\s/.test(t)?e.classList.add(t):e.className+=" "+t}function u(e,t){e.classList&&!/\s/.test(t)?e.classList.remove(t):e.className=e.className.replace(new RegExp("(^|\\b)"+t.split(" ").join("|")+"(\\b|$)","gi")," ")}function p(e){var t=void 0!==window.pageXOffset,n="CSS1Compat"===(e.compatMode||"");return{x:t?window.pageXOffset:n?e.documentElement.scrollLeft:e.body.scrollLeft,y:t?window.pageYOffset:n?e.documentElement.scrollTop:e.body.scrollTop}}function d(e,t){return 100/(t-e)}function f(e,t,n){return 100*t/(e[n+1]-e[n])}function g(e,t){for(var n=1;e>=t[n];)n+=1;return n}function m(e,t,n){if(n>=e.slice(-1)[0])return 100;var r=g(n,e),i=e[r-1],o=e[r],s=t[r-1],a=t[r];return s+function(e,t){return f(e,e[0]<0?t+Math.abs(e[0]):t-e[0],0)}([i,o],n)/d(s,a)}function h(e,t,n,r){if(100===r)return r;var i=g(r,e),o=e[i-1],s=e[i];return n?r-o>(s-o)/2?s:o:t[i-1]?e[i-1]+function(e,t){return Math.round(e/t)*t}(r-e[i-1],t[i-1]):r}function v(e,t,n){var r;if("number"==typeof t&&(t=[t]),!Array.isArray(t))throw new Error("noUiSlider (14.5.0): 'range' contains invalid value.");if(!i(r="min"===e?0:"max"===e?100:parseFloat(e))||!i(t[0]))throw new Error("noUiSlider (14.5.0): 'range' value isn't numeric.");n.xPct.push(r),n.xVal.push(t[0]),r?n.xSteps.push(!isNaN(t[1])&&t[1]):isNaN(t[1])||(n.xSteps[0]=t[1]),n.xHighestCompleteStep.push(0)}function x(e,t,n){if(t)if(n.xVal[e]!==n.xVal[e+1]){n.xSteps[e]=f([n.xVal[e],n.xVal[e+1]],t,0)/d(n.xPct[e],n.xPct[e+1]);var r=(n.xVal[e+1]-n.xVal[e])/n.xNumSteps[e],i=Math.ceil(Number(r.toFixed(3))-1),o=n.xVal[e]+n.xNumSteps[e]*i;n.xHighestCompleteStep[e]=o}else n.xSteps[e]=n.xHighestCompleteStep[e]=n.xVal[e]}function b(e,t,n){var r;this.xPct=[],this.xVal=[],this.xSteps=[n||!1],this.xNumSteps=[!1],this.xHighestCompleteStep=[],this.snap=t;var i=[];for(r in e)e.hasOwnProperty(r)&&i.push([e[r],r]);for(i.length&&"object"==typeof i[0][0]?i.sort((function(e,t){return e[0][0]-t[0][0]})):i.sort((function(e,t){return e[0]-t[0]})),r=0;r<i.length;r++)v(i[r][1],i[r][0],this);for(this.xNumSteps=this.xSteps.slice(0),r=0;r<this.xNumSteps.length;r++)x(r,this.xNumSteps[r],this)}b.prototype.getDistance=function(e){var t,n=[];for(t=0;t<this.xNumSteps.length-1;t++){var r=this.xNumSteps[t];if(r&&e/r%1!=0)throw new Error("noUiSlider (14.5.0): 'limit', 'margin' and 'padding' of "+this.xPct[t]+"% range must be divisible by step.");n[t]=f(this.xVal,e,t)}return n},b.prototype.getAbsoluteDistance=function(e,t,n){var r,i=0;if(e<this.xPct[this.xPct.length-1])for(;e>this.xPct[i+1];)i++;else e===this.xPct[this.xPct.length-1]&&(i=this.xPct.length-2);n||e!==this.xPct[i+1]||i++;var o=1,s=t[i],a=0,c=0,l=0,u=0;for(r=n?(e-this.xPct[i])/(this.xPct[i+1]-this.xPct[i]):(this.xPct[i+1]-e)/(this.xPct[i+1]-this.xPct[i]);s>0;)a=this.xPct[i+1+u]-this.xPct[i+u],t[i+u]*o+100-100*r>100?(c=a*r,o=(s-100*r)/t[i+u],r=1):(c=t[i+u]*a/100*o,o=0),n?(l-=c,this.xPct.length+u>=1&&u--):(l+=c,this.xPct.length-u>=1&&u++),s=t[i+u]*o;return e+l},b.prototype.toStepping=function(e){return e=m(this.xVal,this.xPct,e)},b.prototype.fromStepping=function(e){return function(e,t,n){if(n>=100)return e.slice(-1)[0];var r=g(n,t),i=e[r-1],o=e[r],s=t[r-1];return function(e,t){return t*(e[1]-e[0])/100+e[0]}([i,o],(n-s)*d(s,t[r]))}(this.xVal,this.xPct,e)},b.prototype.getStep=function(e){return e=h(this.xPct,this.xSteps,this.snap,e)},b.prototype.getDefaultStep=function(e,t,n){var r=g(e,this.xPct);return(100===e||t&&e===this.xPct[r-1])&&(r=Math.max(r-1,1)),(this.xVal[r]-this.xVal[r-1])/n},b.prototype.getNearbySteps=function(e){var t=g(e,this.xPct);return{stepBefore:{startValue:this.xVal[t-2],step:this.xNumSteps[t-2],highestStep:this.xHighestCompleteStep[t-2]},thisStep:{startValue:this.xVal[t-1],step:this.xNumSteps[t-1],highestStep:this.xHighestCompleteStep[t-1]},stepAfter:{startValue:this.xVal[t],step:this.xNumSteps[t],highestStep:this.xHighestCompleteStep[t]}}},b.prototype.countStepDecimals=function(){var e=this.xNumSteps.map(c);return Math.max.apply(null,e)},b.prototype.convert=function(e){return this.getStep(this.toStepping(e))};var y={to:function(e){return void 0!==e&&e.toFixed(2)},from:Number},S={target:"target",base:"base",origin:"origin",handle:"handle",handleLower:"handle-lower",handleUpper:"handle-upper",touchArea:"touch-area",horizontal:"horizontal",vertical:"vertical",background:"background",connect:"connect",connects:"connects",ltr:"ltr",rtl:"rtl",textDirectionLtr:"txt-dir-ltr",textDirectionRtl:"txt-dir-rtl",draggable:"draggable",drag:"state-drag",tap:"state-tap",active:"active",tooltip:"tooltip",pips:"pips",pipsHorizontal:"pips-horizontal",pipsVertical:"pips-vertical",marker:"marker",markerHorizontal:"marker-horizontal",markerVertical:"marker-vertical",markerNormal:"marker-normal",markerLarge:"marker-large",markerSub:"marker-sub",value:"value",valueHorizontal:"value-horizontal",valueVertical:"value-vertical",valueNormal:"value-normal",valueLarge:"value-large",valueSub:"value-sub"};function w(e){if(function(e){return"object"==typeof e&&"function"==typeof e.to&&"function"==typeof e.from}(e))return!0;throw new Error("noUiSlider (14.5.0): 'format' requires 'to' and 'from' methods.")}function k(e,t){if(!i(t))throw new Error("noUiSlider (14.5.0): 'step' is not numeric.");e.singleStep=t}function U(e,t){if("object"!=typeof t||Array.isArray(t))throw new Error("noUiSlider (14.5.0): 'range' is not an object.");if(void 0===t.min||void 0===t.max)throw new Error("noUiSlider (14.5.0): Missing 'min' or 'max' in 'range'.");if(t.min===t.max)throw new Error("noUiSlider (14.5.0): 'range' 'min' and 'max' cannot be equal.");e.spectrum=new b(t,e.snap,e.singleStep)}function C(e,t){if(t=a(t),!Array.isArray(t)||!t.length)throw new Error("noUiSlider (14.5.0): 'start' option is incorrect.");e.handles=t.length,e.start=t}function E(e,t){if(e.snap=t,"boolean"!=typeof t)throw new Error("noUiSlider (14.5.0): 'snap' option must be a boolean.")}function L(e,t){if(e.animate=t,"boolean"!=typeof t)throw new Error("noUiSlider (14.5.0): 'animate' option must be a boolean.")}function A(e,t){if(e.animationDuration=t,"number"!=typeof t)throw new Error("noUiSlider (14.5.0): 'animationDuration' option must be a number.")}function _(e,t){var n,r=[!1];if("lower"===t?t=[!0,!1]:"upper"===t&&(t=[!1,!0]),!0===t||!1===t){for(n=1;n<e.handles;n++)r.push(t);r.push(!1)}else{if(!Array.isArray(t)||!t.length||t.length!==e.handles+1)throw new Error("noUiSlider (14.5.0): 'connect' option doesn't match handle count.");r=t}e.connect=r}function z(e,t){switch(t){case"horizontal":e.ort=0;break;case"vertical":e.ort=1;break;default:throw new Error("noUiSlider (14.5.0): 'orientation' option is invalid.")}}function N(e,t){if(!i(t))throw new Error("noUiSlider (14.5.0): 'margin' option must be numeric.");0!==t&&(e.margin=e.spectrum.getDistance(t))}function P(e,t){if(!i(t))throw new Error("noUiSlider (14.5.0): 'limit' option must be numeric.");if(e.limit=e.spectrum.getDistance(t),!e.limit||e.handles<2)throw new Error("noUiSlider (14.5.0): 'limit' option is only supported on linear sliders with 2 or more handles.")}function D(e,t){var n;if(!i(t)&&!Array.isArray(t))throw new Error("noUiSlider (14.5.0): 'padding' option must be numeric or array of exactly 2 numbers.");if(Array.isArray(t)&&2!==t.length&&!i(t[0])&&!i(t[1]))throw new Error("noUiSlider (14.5.0): 'padding' option must be numeric or array of exactly 2 numbers.");if(0!==t){for(Array.isArray(t)||(t=[t,t]),e.padding=[e.spectrum.getDistance(t[0]),e.spectrum.getDistance(t[1])],n=0;n<e.spectrum.xNumSteps.length-1;n++)if(e.padding[0][n]<0||e.padding[1][n]<0)throw new Error("noUiSlider (14.5.0): 'padding' option must be a positive number(s).");var r=t[0]+t[1],o=e.spectrum.xVal[0];if(r/(e.spectrum.xVal[e.spectrum.xVal.length-1]-o)>1)throw new Error("noUiSlider (14.5.0): 'padding' option must not exceed 100% of the range.")}}function O(e,t){switch(t){case"ltr":e.dir=0;break;case"rtl":e.dir=1;break;default:throw new Error("noUiSlider (14.5.0): 'direction' option was not recognized.")}}function F(e,t){if("string"!=typeof t)throw new Error("noUiSlider (14.5.0): 'behaviour' must be a string containing options.");var n=t.indexOf("tap")>=0,r=t.indexOf("drag")>=0,i=t.indexOf("fixed")>=0,o=t.indexOf("snap")>=0,s=t.indexOf("hover")>=0,a=t.indexOf("unconstrained")>=0;if(i){if(2!==e.handles)throw new Error("noUiSlider (14.5.0): 'fixed' behaviour must be used with 2 handles");N(e,e.start[1]-e.start[0])}if(a&&(e.margin||e.limit))throw new Error("noUiSlider (14.5.0): 'unconstrained' behaviour cannot be used with margin or limit");e.events={tap:n||o,drag:r,fixed:i,snap:o,hover:s,unconstrained:a}}function M(e,t){if(!1!==t)if(!0===t){e.tooltips=[];for(var n=0;n<e.handles;n++)e.tooltips.push(!0)}else{if(e.tooltips=a(t),e.tooltips.length!==e.handles)throw new Error("noUiSlider (14.5.0): must pass a formatter for all handles.");e.tooltips.forEach((function(e){if("boolean"!=typeof e&&("object"!=typeof e||"function"!=typeof e.to))throw new Error("noUiSlider (14.5.0): 'tooltips' must be passed a formatter or 'false'.")}))}}function j(e,t){e.ariaFormat=t,w(t)}function V(e,t){e.format=t,w(t)}function q(e,t){if(e.keyboardSupport=t,"boolean"!=typeof t)throw new Error("noUiSlider (14.5.0): 'keyboardSupport' option must be a boolean.")}function T(e,t){e.documentElement=t}function B(e,t){if("string"!=typeof t&&!1!==t)throw new Error("noUiSlider (14.5.0): 'cssPrefix' must be a string or `false`.");e.cssPrefix=t}function R(e,t){if("object"!=typeof t)throw new Error("noUiSlider (14.5.0): 'cssClasses' must be an object.");if("string"==typeof e.cssPrefix)for(var n in e.cssClasses={},t)t.hasOwnProperty(n)&&(e.cssClasses[n]=e.cssPrefix+t[n]);else e.cssClasses=t}function H(e){var t={margin:0,limit:0,padding:0,animate:!0,animationDuration:300,ariaFormat:y,format:y},r={step:{r:!1,t:k},start:{r:!0,t:C},connect:{r:!0,t:_},direction:{r:!0,t:O},snap:{r:!1,t:E},animate:{r:!1,t:L},animationDuration:{r:!1,t:A},range:{r:!0,t:U},orientation:{r:!1,t:z},margin:{r:!1,t:N},limit:{r:!1,t:P},padding:{r:!1,t:D},behaviour:{r:!0,t:F},ariaFormat:{r:!1,t:j},format:{r:!1,t:V},tooltips:{r:!1,t:M},keyboardSupport:{r:!0,t:q},documentElement:{r:!1,t:T},cssPrefix:{r:!0,t:B},cssClasses:{r:!0,t:R}},i={connect:!1,direction:"ltr",behaviour:"tap",orientation:"horizontal",keyboardSupport:!0,cssPrefix:"noUi-",cssClasses:S};e.format&&!e.ariaFormat&&(e.ariaFormat=e.format),Object.keys(r).forEach((function(o){if(!n(e[o])&&void 0===i[o]){if(r[o].r)throw new Error("noUiSlider (14.5.0): '"+o+"' is required.");return!0}r[o].t(t,n(e[o])?e[o]:i[o])})),t.pips=e.pips;var o=document.createElement("div"),s=void 0!==o.style.msTransform,a=void 0!==o.style.transform;return t.transformRule=a?"transform":s?"msTransform":"webkitTransform",t.style=[["left","top"],["right","bottom"]][t.dir][t.ort],t}function I(e,n,i){var c,d,f,g,m,h,v,x,b=window.navigator.pointerEnabled?{start:"pointerdown",move:"pointermove",end:"pointerup"}:window.navigator.msPointerEnabled?{start:"MSPointerDown",move:"MSPointerMove",end:"MSPointerUp"}:{start:"mousedown touchstart",move:"mousemove touchmove",end:"mouseup touchend"},y=window.CSS&&CSS.supports&&CSS.supports("touch-action","none")&&function(){var e=!1;try{var t=Object.defineProperty({},"passive",{get:function(){e=!0}});window.addEventListener("test",null,t)}catch(e){}return e}(),S=e,w=n.spectrum,k=[],U=[],C=[],E=0,L={},A=e.ownerDocument,_=n.documentElement||A.documentElement,z=A.body,N="rtl"===A.dir||1===n.ort?0:100;function P(e,t){var n=A.createElement("div");return t&&l(n,t),e.appendChild(n),n}function D(e,t){var r=P(e,n.cssClasses.origin),i=P(r,n.cssClasses.handle);return P(i,n.cssClasses.touchArea),i.setAttribute("data-handle",t),n.keyboardSupport&&(i.setAttribute("tabindex","0"),i.addEventListener("keydown",(function(e){return function(e,t){if(M()||j(t))return!1;var r=["Left","Right"],i=["Down","Up"],o=["PageDown","PageUp"],s=["Home","End"];n.dir&&!n.ort?r.reverse():n.ort&&!n.dir&&(i.reverse(),o.reverse());var a,c=e.key.replace("Arrow",""),l=c===o[0],u=c===o[1],p=c===i[0]||c===r[0]||l,d=c===i[1]||c===r[1]||u,f=c===s[0],g=c===s[1];if(!(p||d||f||g))return!0;if(e.preventDefault(),d||p){var m=p?0:1,h=de(t)[m];if(null===h)return!1;!1===h&&(h=w.getDefaultStep(U[t],p,10)),(u||l)&&(h*=5),h=Math.max(h,1e-7),h*=p?-1:1,a=k[t]+h}else a=g?n.spectrum.xVal[n.spectrum.xVal.length-1]:n.spectrum.xVal[0];return ae(t,w.toStepping(a),!0,!0),te("slide",t),te("update",t),te("change",t),te("set",t),!1}(e,t)}))),i.setAttribute("role","slider"),i.setAttribute("aria-orientation",n.ort?"vertical":"horizontal"),0===t?l(i,n.cssClasses.handleLower):t===n.handles-1&&l(i,n.cssClasses.handleUpper),r}function O(e,t){return!!t&&P(e,n.cssClasses.connect)}function F(e,t){return!!n.tooltips[t]&&P(e.firstChild,n.cssClasses.tooltip)}function M(){return S.hasAttribute("disabled")}function j(e){return d[e].hasAttribute("disabled")}function V(){m&&(ee("update.tooltips"),m.forEach((function(e){e&&t(e)})),m=null)}function q(){V(),m=d.map(F),Q("update.tooltips",(function(e,t,r){if(m[t]){var i=e[t];!0!==n.tooltips[t]&&(i=n.tooltips[t].to(r[t])),m[t].innerHTML=i}}))}function T(e,t,r){var i=A.createElement("div"),o=[];o[0]=n.cssClasses.valueNormal,o[1]=n.cssClasses.valueLarge,o[2]=n.cssClasses.valueSub;var s=[];s[0]=n.cssClasses.markerNormal,s[1]=n.cssClasses.markerLarge,s[2]=n.cssClasses.markerSub;var a=[n.cssClasses.valueHorizontal,n.cssClasses.valueVertical],c=[n.cssClasses.markerHorizontal,n.cssClasses.markerVertical];function u(e,t){var r=t===n.cssClasses.value,i=r?o:s;return t+" "+(r?a:c)[n.ort]+" "+i[e]}return l(i,n.cssClasses.pips),l(i,0===n.ort?n.cssClasses.pipsHorizontal:n.cssClasses.pipsVertical),Object.keys(e).forEach((function(o){!function(e,o,s){if(-1!==(s=t?t(o,s):s)){var a=P(i,!1);a.className=u(s,n.cssClasses.marker),a.style[n.style]=e+"%",s>0&&((a=P(i,!1)).className=u(s,n.cssClasses.value),a.setAttribute("data-value",o),a.style[n.style]=e+"%",a.innerHTML=r.to(o))}}(o,e[o][0],e[o][1])})),i}function B(){g&&(t(g),g=null)}function R(e){B();var t=e.mode,n=e.density||1,r=e.filter||!1,i=function(e,t,n){if("range"===e||"steps"===e)return w.xVal;if("count"===e){if(t<2)throw new Error("noUiSlider (14.5.0): 'values' (>= 2) required for mode 'count'.");var r=t-1,i=100/r;for(t=[];r--;)t[r]=r*i;t.push(100),e="positions"}return"positions"===e?t.map((function(e){return w.fromStepping(n?w.getStep(e):e)})):"values"===e?n?t.map((function(e){return w.fromStepping(w.getStep(w.toStepping(e)))})):t:void 0}(t,e.values||!1,e.stepped||!1),o=function(e,t,n){var r,i={},o=w.xVal[0],s=w.xVal[w.xVal.length-1],a=!1,c=!1,l=0;return r=n.slice().sort((function(e,t){return e-t})),(n=r.filter((function(e){return!this[e]&&(this[e]=!0)}),{}))[0]!==o&&(n.unshift(o),a=!0),n[n.length-1]!==s&&(n.push(s),c=!0),n.forEach((function(r,o){var s,u,p,d,f,g,m,h,v,x,b=r,y=n[o+1],S="steps"===t;if(S&&(s=w.xNumSteps[o]),s||(s=y-b),!1!==b&&void 0!==y)for(s=Math.max(s,1e-7),u=b;u<=y;u=(u+s).toFixed(7)/1){for(h=(f=(d=w.toStepping(u))-l)/e,x=f/(v=Math.round(h)),p=1;p<=v;p+=1)i[(g=l+p*x).toFixed(5)]=[w.fromStepping(g),0];m=n.indexOf(u)>-1?1:S?2:0,!o&&a&&u!==y&&(m=0),u===y&&c||(i[d.toFixed(5)]=[u,m]),l=d}})),i}(n,t,i),s=e.format||{to:Math.round};return g=S.appendChild(T(o,r,s))}function I(){var e=c.getBoundingClientRect(),t="offset"+["Width","Height"][n.ort];return 0===n.ort?e.width||c[t]:e.height||c[t]}function $(e,t,r,i){var o=function(o){return!!(o=function(e,t,n){var r,i,o=0===e.type.indexOf("touch"),s=0===e.type.indexOf("mouse"),a=0===e.type.indexOf("pointer");if(0===e.type.indexOf("MSPointer")&&(a=!0),o){var c=function(e){return e.target===n||n.contains(e.target)||e.target.shadowRoot&&e.target.shadowRoot.contains(n)};if("touchstart"===e.type){var l=Array.prototype.filter.call(e.touches,c);if(l.length>1)return!1;r=l[0].pageX,i=l[0].pageY}else{var u=Array.prototype.find.call(e.changedTouches,c);if(!u)return!1;r=u.pageX,i=u.pageY}}return t=t||p(A),(s||a)&&(r=e.clientX+t.x,i=e.clientY+t.y),e.pageOffset=t,e.points=[r,i],e.cursor=s||a,e}(o,i.pageOffset,i.target||t))&&!(M()&&!i.doNotReject)&&(s=S,a=n.cssClasses.tap,!((s.classList?s.classList.contains(a):new RegExp("\\b"+a+"\\b").test(s.className))&&!i.doNotReject)&&!(e===b.start&&void 0!==o.buttons&&o.buttons>1)&&(!i.hover||!o.buttons)&&(y||o.preventDefault(),o.calcPoint=o.points[n.ort],void r(o,i)));var s,a},s=[];return e.split(" ").forEach((function(e){t.addEventListener(e,o,!!y&&{passive:!0}),s.push([e,o])})),s}function J(e){var t,r,i,o,a,l,u=100*(e-(t=c,r=n.ort,i=t.getBoundingClientRect(),o=t.ownerDocument,a=o.documentElement,l=p(o),/webkit.*Chrome.*Mobile/i.test(navigator.userAgent)&&(l.x=0),r?i.top+l.y-a.clientTop:i.left+l.x-a.clientLeft))/I();return u=s(u),n.dir?100-u:u}function W(e,t){"mouseout"===e.type&&"HTML"===e.target.nodeName&&null===e.relatedTarget&&Y(e,t)}function X(e,t){if(-1===navigator.appVersion.indexOf("MSIE 9")&&0===e.buttons&&0!==t.buttonsProperty)return Y(e,t);var r=(n.dir?-1:1)*(e.calcPoint-t.startCalcPoint);ie(r>0,100*r/t.baseSize,t.locations,t.handleNumbers)}function Y(e,t){t.handle&&(u(t.handle,n.cssClasses.active),E-=1),t.listeners.forEach((function(e){_.removeEventListener(e[0],e[1])})),0===E&&(u(S,n.cssClasses.drag),se(),e.cursor&&(z.style.cursor="",z.removeEventListener("selectstart",r))),t.handleNumbers.forEach((function(e){te("change",e),te("set",e),te("end",e)}))}function G(e,t){if(t.handleNumbers.some(j))return!1;var i;1===t.handleNumbers.length&&(i=d[t.handleNumbers[0]].children[0],E+=1,l(i,n.cssClasses.active)),e.stopPropagation();var o=[],s=$(b.move,_,X,{target:e.target,handle:i,listeners:o,startCalcPoint:e.calcPoint,baseSize:I(),pageOffset:e.pageOffset,handleNumbers:t.handleNumbers,buttonsProperty:e.buttons,locations:U.slice()}),a=$(b.end,_,Y,{target:e.target,handle:i,listeners:o,doNotReject:!0,handleNumbers:t.handleNumbers}),c=$("mouseout",_,W,{target:e.target,handle:i,listeners:o,doNotReject:!0,handleNumbers:t.handleNumbers});o.push.apply(o,s.concat(a,c)),e.cursor&&(z.style.cursor=getComputedStyle(e.target).cursor,d.length>1&&l(S,n.cssClasses.drag),z.addEventListener("selectstart",r,!1)),t.handleNumbers.forEach((function(e){te("start",e)}))}function Z(e){e.stopPropagation();var t=J(e.calcPoint),r=function(e){var t=100,n=!1;return d.forEach((function(r,i){if(!j(i)){var o=U[i],s=Math.abs(o-e);(s<t||s<=t&&e>o||100===s&&100===t)&&(n=i,t=s)}})),n}(t);if(!1===r)return!1;n.events.snap||o(S,n.cssClasses.tap,n.animationDuration),ae(r,t,!0,!0),se(),te("slide",r,!0),te("update",r,!0),te("change",r,!0),te("set",r,!0),n.events.snap&&G(e,{handleNumbers:[r]})}function K(e){var t=J(e.calcPoint),n=w.getStep(t),r=w.fromStepping(n);Object.keys(L).forEach((function(e){"hover"===e.split(".")[0]&&L[e].forEach((function(e){e.call(h,r)}))}))}function Q(e,t){L[e]=L[e]||[],L[e].push(t),"update"===e.split(".")[0]&&d.forEach((function(e,t){te("update",t)}))}function ee(e){var t=e&&e.split(".")[0],n=t&&e.substring(t.length);Object.keys(L).forEach((function(e){var r=e.split(".")[0],i=e.substring(r.length);t&&t!==r||n&&n!==i||delete L[e]}))}function te(e,t,r){Object.keys(L).forEach((function(i){var o=i.split(".")[0];e===o&&L[i].forEach((function(e){e.call(h,k.map(n.format.to),t,k.slice(),r||!1,U.slice(),h)}))}))}function ne(e,t,r,i,o,a){var c;return d.length>1&&!n.events.unconstrained&&(i&&t>0&&(c=w.getAbsoluteDistance(e[t-1],n.margin,0),r=Math.max(r,c)),o&&t<d.length-1&&(c=w.getAbsoluteDistance(e[t+1],n.margin,1),r=Math.min(r,c))),d.length>1&&n.limit&&(i&&t>0&&(c=w.getAbsoluteDistance(e[t-1],n.limit,0),r=Math.min(r,c)),o&&t<d.length-1&&(c=w.getAbsoluteDistance(e[t+1],n.limit,1),r=Math.max(r,c))),n.padding&&(0===t&&(c=w.getAbsoluteDistance(0,n.padding[0],0),r=Math.max(r,c)),t===d.length-1&&(c=w.getAbsoluteDistance(100,n.padding[1],1),r=Math.min(r,c))),!((r=s(r=w.getStep(r)))===e[t]&&!a)&&r}function re(e,t){var r=n.ort;return(r?t:e)+", "+(r?e:t)}function ie(e,t,n,r){var i=n.slice(),o=[!e,e],s=[e,!e];r=r.slice(),e&&r.reverse(),r.length>1?r.forEach((function(e,n){var r=ne(i,e,i[e]+t,o[n],s[n],!1);!1===r?t=0:(t=r-i[e],i[e]=r)})):o=s=[!0];var a=!1;r.forEach((function(e,r){a=ae(e,n[e]+t,o[r],s[r])||a})),a&&r.forEach((function(e){te("update",e),te("slide",e)}))}function oe(e,t){return n.dir?100-e-t:e}function se(){C.forEach((function(e){var t=U[e]>50?-1:1,n=3+(d.length+t*e);d[e].style.zIndex=n}))}function ae(e,t,r,i){return!1!==(t=ne(U,e,t,r,i,!1))&&(function(e,t){U[e]=t,k[e]=w.fromStepping(t);var r="translate("+re(10*(oe(t,0)-N)+"%","0")+")";d[e].style[n.transformRule]=r,ce(e),ce(e+1)}(e,t),!0)}function ce(e){if(f[e]){var t=0,r=100;0!==e&&(t=U[e-1]),e!==f.length-1&&(r=U[e]);var i=r-t,o="translate("+re(oe(t,i)+"%","0")+")",s="scale("+re(i/100,"1")+")";f[e].style[n.transformRule]=o+" "+s}}function le(e,t){return null===e||!1===e||void 0===e?U[t]:("number"==typeof e&&(e=String(e)),e=n.format.from(e),!1===(e=w.toStepping(e))||isNaN(e)?U[t]:e)}function ue(e,t){var r=a(e),i=void 0===U[0];t=void 0===t||!!t,n.animate&&!i&&o(S,n.cssClasses.tap,n.animationDuration),C.forEach((function(e){ae(e,le(r[e],e),!0,!1)}));for(var s=1===C.length?0:1;s<C.length;++s)C.forEach((function(e){ae(e,U[e],!0,!0)}));se(),C.forEach((function(e){te("update",e),null!==r[e]&&t&&te("set",e)}))}function pe(){var e=k.map(n.format.to);return 1===e.length?e[0]:e}function de(e){var t=U[e],r=w.getNearbySteps(t),i=k[e],o=r.thisStep.step,s=null;if(n.snap)return[i-r.stepBefore.startValue||null,r.stepAfter.startValue-i||null];!1!==o&&i+o>r.stepAfter.startValue&&(o=r.stepAfter.startValue-i),s=i>r.thisStep.startValue?r.thisStep.step:!1!==r.stepBefore.step&&i-r.stepBefore.highestStep,100===t?o=null:0===t&&(s=null);var a=w.countStepDecimals();return null!==o&&!1!==o&&(o=Number(o.toFixed(a))),null!==s&&!1!==s&&(s=Number(s.toFixed(a))),[s,o]}return l(v=S,n.cssClasses.target),0===n.dir?l(v,n.cssClasses.ltr):l(v,n.cssClasses.rtl),0===n.ort?l(v,n.cssClasses.horizontal):l(v,n.cssClasses.vertical),l(v,"rtl"===getComputedStyle(v).direction?n.cssClasses.textDirectionRtl:n.cssClasses.textDirectionLtr),c=P(v,n.cssClasses.base),function(e,t){var r=P(t,n.cssClasses.connects);d=[],(f=[]).push(O(r,e[0]));for(var i=0;i<n.handles;i++)d.push(D(t,i)),C[i]=i,f.push(O(r,e[i+1]))}(n.connect,c),(x=n.events).fixed||d.forEach((function(e,t){$(b.start,e.children[0],G,{handleNumbers:[t]})})),x.tap&&$(b.start,c,Z,{}),x.hover&&$(b.move,c,K,{hover:!0}),x.drag&&f.forEach((function(e,t){if(!1!==e&&0!==t&&t!==f.length-1){var r=d[t-1],i=d[t],o=[e];l(e,n.cssClasses.draggable),x.fixed&&(o.push(r.children[0]),o.push(i.children[0])),o.forEach((function(e){$(b.start,e,G,{handles:[r,i],handleNumbers:[t-1,t]})}))}})),ue(n.start),n.pips&&R(n.pips),n.tooltips&&q(),Q("update",(function(e,t,r,i,o){C.forEach((function(e){var t=d[e],i=ne(U,e,0,!0,!0,!0),s=ne(U,e,100,!0,!0,!0),a=o[e],c=n.ariaFormat.to(r[e]);i=w.fromStepping(i).toFixed(1),s=w.fromStepping(s).toFixed(1),a=w.fromStepping(a).toFixed(1),t.children[0].setAttribute("aria-valuemin",i),t.children[0].setAttribute("aria-valuemax",s),t.children[0].setAttribute("aria-valuenow",a),t.children[0].setAttribute("aria-valuetext",c)}))})),h={destroy:function(){for(var e in n.cssClasses)n.cssClasses.hasOwnProperty(e)&&u(S,n.cssClasses[e]);for(;S.firstChild;)S.removeChild(S.firstChild);delete S.noUiSlider},steps:function(){return C.map(de)},on:Q,off:ee,get:pe,set:ue,setHandle:function(e,t,n){if(!((e=Number(e))>=0&&e<C.length))throw new Error("noUiSlider (14.5.0): invalid handle number, got: "+e);ae(e,le(t,e),!0,!0),te("update",e),n&&te("set",e)},reset:function(e){ue(n.start,e)},__moveHandles:function(e,t,n){ie(e,t,U,n)},options:i,updateOptions:function(e,t){var r=pe(),o=["margin","limit","padding","range","animate","snap","step","format","pips","tooltips"];o.forEach((function(t){void 0!==e[t]&&(i[t]=e[t])}));var s=H(i);o.forEach((function(t){void 0!==e[t]&&(n[t]=s[t])})),w=s.spectrum,n.margin=s.margin,n.limit=s.limit,n.padding=s.padding,n.pips?R(n.pips):B(),n.tooltips?q():V(),U=[],ue(e.start||r,t)},target:S,removePips:B,removeTooltips:V,getTooltips:function(){return m},getOrigins:function(){return d},pips:R}}return{__spectrum:b,version:e,cssClasses:S,create:function(e,t){if(!e||!e.nodeName)throw new Error("noUiSlider (14.5.0): create requires a single element, got: "+e);if(e.noUiSlider)throw new Error("noUiSlider (14.5.0): Slider was already initialized.");var n=I(e,H(t),t);return e.noUiSlider=n,n}}})?r.apply(t,i):r)||(e.exports=o)},,function(e,t,n){var r=n(6),i=n(7);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var o={insert:"head",singleton:!1};r(i,o);e.exports=i.locals||{}},function(e,t,n){"use strict";var r,i=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},o=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),s=[];function a(e){for(var t=-1,n=0;n<s.length;n++)if(s[n].identifier===e){t=n;break}return t}function c(e,t){for(var n={},r=[],i=0;i<e.length;i++){var o=e[i],c=t.base?o[0]+t.base:o[0],l=n[c]||0,u="".concat(c," ").concat(l);n[c]=l+1;var p=a(u),d={css:o[1],media:o[2],sourceMap:o[3]};-1!==p?(s[p].references++,s[p].updater(d)):s.push({identifier:u,updater:h(d,t),references:1}),r.push(u)}return r}function l(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var i=n.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var s=o(e.insert||"head");if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(t)}return t}var u,p=(u=[],function(e,t){return u[e]=t,u.filter(Boolean).join("\n")});function d(e,t,n,r){var i=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=p(t,i);else{var o=document.createTextNode(i),s=e.childNodes;s[t]&&e.removeChild(s[t]),s.length?e.insertBefore(o,s[t]):e.appendChild(o)}}function f(e,t,n){var r=n.css,i=n.media,o=n.sourceMap;if(i?e.setAttribute("media",i):e.removeAttribute("media"),o&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var g=null,m=0;function h(e,t){var n,r,i;if(t.singleton){var o=m++;n=g||(g=l(t)),r=d.bind(null,n,o,!1),i=d.bind(null,n,o,!0)}else n=l(t),r=f.bind(null,n,t),i=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else i()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=i());var n=c(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var i=a(n[r]);s[i].references--}for(var o=c(e,t),l=0;l<n.length;l++){var u=a(n[l]);0===s[u].references&&(s[u].updater(),s.splice(u,1))}n=o}}}},function(e,t,n){(e.exports=n(8)(!1)).push([e.i,"/*! nouislider - 14.5.0 - 5/11/2020 */\n/* Functional styling;\n * These styles are required for noUiSlider to function.\n * You don't need to change these rules to apply your design.\n */\n.noUi-target,\n.noUi-target * {\n  -webkit-touch-callout: none;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  -webkit-user-select: none;\n  -ms-touch-action: none;\n  touch-action: none;\n  -ms-user-select: none;\n  -moz-user-select: none;\n  user-select: none;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n}\n.noUi-target {\n  position: relative;\n}\n.noUi-base,\n.noUi-connects {\n  width: 100%;\n  height: 100%;\n  position: relative;\n  z-index: 1;\n}\n/* Wrapper for all connect elements.\n */\n.noUi-connects {\n  overflow: hidden;\n  z-index: 0;\n}\n.noUi-connect,\n.noUi-origin {\n  will-change: transform;\n  position: absolute;\n  z-index: 1;\n  top: 0;\n  right: 0;\n  -ms-transform-origin: 0 0;\n  -webkit-transform-origin: 0 0;\n  -webkit-transform-style: preserve-3d;\n  transform-origin: 0 0;\n  transform-style: flat;\n}\n.noUi-connect {\n  height: 100%;\n  width: 100%;\n}\n.noUi-origin {\n  height: 10%;\n  width: 10%;\n}\n/* Offset direction\n */\n.noUi-txt-dir-rtl.noUi-horizontal .noUi-origin {\n  left: 0;\n  right: auto;\n}\n/* Give origins 0 height/width so they don't interfere with clicking the\n * connect elements.\n */\n.noUi-vertical .noUi-origin {\n  width: 0;\n}\n.noUi-horizontal .noUi-origin {\n  height: 0;\n}\n.noUi-handle {\n  -webkit-backface-visibility: hidden;\n  backface-visibility: hidden;\n  position: absolute;\n}\n.noUi-touch-area {\n  height: 100%;\n  width: 100%;\n}\n.noUi-state-tap .noUi-connect,\n.noUi-state-tap .noUi-origin {\n  -webkit-transition: transform 0.3s;\n  transition: transform 0.3s;\n}\n.noUi-state-drag * {\n  cursor: inherit !important;\n}\n/* Slider size and handle placement;\n */\n.noUi-horizontal {\n  height: 18px;\n}\n.noUi-horizontal .noUi-handle {\n  width: 34px;\n  height: 28px;\n  right: -17px;\n  top: -6px;\n}\n.noUi-vertical {\n  width: 18px;\n}\n.noUi-vertical .noUi-handle {\n  width: 28px;\n  height: 34px;\n  right: -6px;\n  top: -17px;\n}\n.noUi-txt-dir-rtl.noUi-horizontal .noUi-handle {\n  left: -17px;\n  right: auto;\n}\n/* Styling;\n * Giving the connect element a border radius causes issues with using transform: scale\n */\n.noUi-target {\n  background: #FAFAFA;\n  border-radius: 4px;\n  border: 1px solid #D3D3D3;\n  box-shadow: inset 0 1px 1px #F0F0F0, 0 3px 6px -5px #BBB;\n}\n.noUi-connects {\n  border-radius: 3px;\n}\n.noUi-connect {\n  background: #3FB8AF;\n}\n/* Handles and cursors;\n */\n.noUi-draggable {\n  cursor: ew-resize;\n}\n.noUi-vertical .noUi-draggable {\n  cursor: ns-resize;\n}\n.noUi-handle {\n  border: 1px solid #D9D9D9;\n  border-radius: 3px;\n  background: #FFF;\n  cursor: default;\n  box-shadow: inset 0 0 1px #FFF, inset 0 1px 7px #EBEBEB, 0 3px 6px -3px #BBB;\n}\n.noUi-active {\n  box-shadow: inset 0 0 1px #FFF, inset 0 1px 7px #DDD, 0 3px 6px -3px #BBB;\n}\n/* Handle stripes;\n */\n.noUi-handle:before,\n.noUi-handle:after {\n  content: \"\";\n  display: block;\n  position: absolute;\n  height: 14px;\n  width: 1px;\n  background: #E8E7E6;\n  left: 14px;\n  top: 6px;\n}\n.noUi-handle:after {\n  left: 17px;\n}\n.noUi-vertical .noUi-handle:before,\n.noUi-vertical .noUi-handle:after {\n  width: 14px;\n  height: 1px;\n  left: 6px;\n  top: 14px;\n}\n.noUi-vertical .noUi-handle:after {\n  top: 17px;\n}\n/* Disabled state;\n */\n[disabled] .noUi-connect {\n  background: #B8B8B8;\n}\n[disabled].noUi-target,\n[disabled].noUi-handle,\n[disabled] .noUi-handle {\n  cursor: not-allowed;\n}\n/* Base;\n *\n */\n.noUi-pips,\n.noUi-pips * {\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n}\n.noUi-pips {\n  position: absolute;\n  color: #999;\n}\n/* Values;\n *\n */\n.noUi-value {\n  position: absolute;\n  white-space: nowrap;\n  text-align: center;\n}\n.noUi-value-sub {\n  color: #ccc;\n  font-size: 10px;\n}\n/* Markings;\n *\n */\n.noUi-marker {\n  position: absolute;\n  background: #CCC;\n}\n.noUi-marker-sub {\n  background: #AAA;\n}\n.noUi-marker-large {\n  background: #AAA;\n}\n/* Horizontal layout;\n *\n */\n.noUi-pips-horizontal {\n  padding: 10px 0;\n  height: 80px;\n  top: 100%;\n  left: 0;\n  width: 100%;\n}\n.noUi-value-horizontal {\n  -webkit-transform: translate(-50%, 50%);\n  transform: translate(-50%, 50%);\n}\n.noUi-rtl .noUi-value-horizontal {\n  -webkit-transform: translate(50%, 50%);\n  transform: translate(50%, 50%);\n}\n.noUi-marker-horizontal.noUi-marker {\n  margin-left: -1px;\n  width: 2px;\n  height: 5px;\n}\n.noUi-marker-horizontal.noUi-marker-sub {\n  height: 10px;\n}\n.noUi-marker-horizontal.noUi-marker-large {\n  height: 15px;\n}\n/* Vertical layout;\n *\n */\n.noUi-pips-vertical {\n  padding: 0 10px;\n  height: 100%;\n  top: 0;\n  left: 100%;\n}\n.noUi-value-vertical {\n  -webkit-transform: translate(0, -50%);\n  transform: translate(0, -50%);\n  padding-left: 25px;\n}\n.noUi-rtl .noUi-value-vertical {\n  -webkit-transform: translate(0, 50%);\n  transform: translate(0, 50%);\n}\n.noUi-marker-vertical.noUi-marker {\n  width: 5px;\n  height: 2px;\n  margin-top: -1px;\n}\n.noUi-marker-vertical.noUi-marker-sub {\n  width: 10px;\n}\n.noUi-marker-vertical.noUi-marker-large {\n  width: 15px;\n}\n.noUi-tooltip {\n  display: block;\n  position: absolute;\n  border: 1px solid #D9D9D9;\n  border-radius: 3px;\n  background: #fff;\n  color: #000;\n  padding: 5px;\n  text-align: center;\n  white-space: nowrap;\n}\n.noUi-horizontal .noUi-tooltip {\n  -webkit-transform: translate(-50%, 0);\n  transform: translate(-50%, 0);\n  left: 50%;\n  bottom: 120%;\n}\n.noUi-vertical .noUi-tooltip {\n  -webkit-transform: translate(0, -50%);\n  transform: translate(0, -50%);\n  top: 50%;\n  right: 120%;\n}\n.noUi-horizontal .noUi-origin > .noUi-tooltip {\n  -webkit-transform: translate(50%, 0);\n  transform: translate(50%, 0);\n  left: auto;\n  bottom: 10px;\n}\n.noUi-vertical .noUi-origin > .noUi-tooltip {\n  -webkit-transform: translate(0, -18px);\n  transform: translate(0, -18px);\n  top: auto;\n  right: 28px;\n}\n",""])},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var i=(s=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(s))))+" */"),o=r.sources.map((function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"}));return[n].concat(o).concat([i]).join("\n")}var s;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n})).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},i=0;i<this.length;i++){var o=this[i][0];null!=o&&(r[o]=!0)}for(i=0;i<e.length;i++){var s=e[i];null!=s[0]&&r[s[0]]||(n&&!s[2]?s[2]=n:n&&(s[2]="("+s[2]+") and ("+n+")"),t.push(s))}},t}},function(e,t,n){var r={"./Group 15.svg":10,"./accessories-min.png":11,"./accessories.png":12,"./add-product-1.svg":13,"./add-product-2.svg":14,"./add-product-3.svg":15,"./american-express.svg":16,"./arrow.svg":17,"./arrows.svg":18,"./article-main-image-min.png":19,"./article-main-image.png":20,"./article-preview-1-min.png":21,"./article-preview-1.svg":22,"./article-preview-2.svg":23,"./background-img-min.png":24,"./background-img.png":25,"./bag-1.svg":26,"./bag-black.svg":27,"./bag.svg":28,"./close.svg":29,"./clothes-min.png":30,"./clothes.png":31,"./clothes.svg":32,"./coat-1.svg":33,"./facebook.svg":34,"./flip-image-arrow-left.svg":35,"./flip-image-arrow-right.svg":36,"./hanger.svg":37,"./icons.svg":38,"./instagram.svg":39,"./jacket-1.svg":40,"./location-black.svg":41,"./location.svg":42,"./logo-black.svg":43,"./logo.png":44,"./logo.svg":45,"./lookbook-image-1-min.png":46,"./lookbook-image-1.png":47,"./lookbook-image-2-min.png":48,"./lookbook-image-2.png":49,"./mastercard.svg":50,"./measuring.svg":51,"./open-menu.svg":52,"./paypal.svg":53,"./product-1.svg":54,"./product-2.svg":55,"./product-3.svg":56,"./product-4.svg":57,"./product-desc-1.jpg":58,"./product-desc-2.jpg":59,"./product-desc-3.jpg":60,"./product-desc-4.jpg":61,"./search-black.svg":62,"./search.svg":63,"./shirt-1.svg":64,"./shirt-2.svg":65,"./shirt-3.svg":66,"./shoes.png":67,"./trousers-1.svg":68,"./twitter.svg":69,"./user-black.svg":70,"./user.svg":71,"./visa (2).svg":72,"./youtube.svg":73};function i(e){var t=o(e);return n(t)}function o(e){var t=r[e];if(!(t+1)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return t}i.keys=function(){return Object.keys(r)},i.resolve=o,e.exports=i,i.id=9},function(e,t){e.exports="images/Group 15.svg"},function(e,t){e.exports="images/accessories-min.png"},function(e,t){e.exports="images/accessories.png"},function(e,t){e.exports="images/add-product-1.svg"},function(e,t){e.exports="images/add-product-2.svg"},function(e,t){e.exports="images/add-product-3.svg"},function(e,t){e.exports="images/american-express.svg"},function(e,t){e.exports="images/arrow.svg"},function(e,t){e.exports="images/arrows.svg"},function(e,t){e.exports="images/article-main-image-min.png"},function(e,t){e.exports="images/article-main-image.png"},function(e,t){e.exports="images/article-preview-1-min.png"},function(e,t){e.exports="images/article-preview-1.svg"},function(e,t){e.exports="images/article-preview-2.svg"},function(e,t){e.exports="images/background-img-min.png"},function(e,t){e.exports="images/background-img.png"},function(e,t){e.exports="images/bag-1.svg"},function(e,t){e.exports="images/bag-black.svg"},function(e,t){e.exports="images/bag.svg"},function(e,t){e.exports="images/close.svg"},function(e,t){e.exports="images/clothes-min.png"},function(e,t){e.exports="images/clothes.png"},function(e,t){e.exports="images/clothes.svg"},function(e,t){e.exports="images/coat-1.svg"},function(e,t){e.exports="images/facebook.svg"},function(e,t){e.exports="images/flip-image-arrow-left.svg"},function(e,t){e.exports="images/flip-image-arrow-right.svg"},function(e,t){e.exports="images/hanger.svg"},function(e,t){e.exports="images/icons.svg"},function(e,t){e.exports="images/instagram.svg"},function(e,t){e.exports="images/jacket-1.svg"},function(e,t){e.exports="images/location-black.svg"},function(e,t){e.exports="images/location.svg"},function(e,t){e.exports="images/logo-black.svg"},function(e,t){e.exports="images/logo.png"},function(e,t){e.exports="images/logo.svg"},function(e,t){e.exports="images/lookbook-image-1-min.png"},function(e,t){e.exports="images/lookbook-image-1.png"},function(e,t){e.exports="images/lookbook-image-2-min.png"},function(e,t){e.exports="images/lookbook-image-2.png"},function(e,t){e.exports="images/mastercard.svg"},function(e,t){e.exports="images/measuring.svg"},function(e,t){e.exports="images/open-menu.svg"},function(e,t){e.exports="images/paypal.svg"},function(e,t){e.exports="images/product-1.svg"},function(e,t){e.exports="images/product-2.svg"},function(e,t){e.exports="images/product-3.svg"},function(e,t){e.exports="images/product-4.svg"},function(e,t){e.exports="images/product-desc-1.jpg"},function(e,t){e.exports="images/product-desc-2.jpg"},function(e,t){e.exports="images/product-desc-3.jpg"},function(e,t){e.exports="images/product-desc-4.jpg"},function(e,t){e.exports="images/search-black.svg"},function(e,t){e.exports="images/search.svg"},function(e,t){e.exports="images/shirt-1.svg"},function(e,t){e.exports="images/shirt-2.svg"},function(e,t){e.exports="images/shirt-3.svg"},function(e,t){e.exports="images/shoes.png"},function(e,t){e.exports="images/trousers-1.svg"},function(e,t){e.exports="images/twitter.svg"},function(e,t){e.exports="images/user-black.svg"},function(e,t){e.exports="images/user.svg"},function(e,t){e.exports="images/visa (2).svg"},function(e,t){e.exports="images/youtube.svg"},,function(e,t,n){"use strict";n.r(t);n(2);var r=[{title:"Stretch Wool Chino Trousers",description:"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec auctor nunc nibh, in posuere arcu malesuada.",price:190,fit:"classic",color:"black",image:"trousers-1.svg",category:"Trousers",size:[38,40,42,44,46]},{title:"Leather Travel Bag",description:"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec auctor nunc nibh, in posuere arcu malesuada.",price:121,color:"black",image:"bag-1.svg",category:"Accessories",size:[]},{title:"Zipped Water-Repellent Coat",description:"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec auctor nunc nibh, in posuere arcu malesuada.",price:424,fit:"regular",color:"grey",image:"coat-1.svg",category:"Coats and Jackets",size:[36,40,42,46]},{title:"Cotton Melange Shirt",description:"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec auctor nunc nibh, in posuere arcu malesuada.",price:182,fit:"slim",color:"lightBlue",image:"shirt-1.svg",category:"Shirts",size:[36,38,40]},{title:"Suede Bomber Jacket",description:"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec auctor nunc nibh, in posuere arcu malesuada.",price:423,fit:"tailored",color:"other",image:"jacket-1.svg",category:"Coats and Jackets",size:[36,38,42,44]},{title:"Check Cotton Poplin Shirt",description:"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec auctor nunc nibh, in posuere arcu malesuada.",price:182,fit:"slim",color:"blue",image:"shirt-2.svg",category:"Shirts",size:[40,42,44,46]},{title:"Stripe Detail Cotton Shirt",description:"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec auctor nunc nibh, in posuere arcu malesuada.",price:99,fit:"slim",color:"white",image:"shirt-3.svg",category:"Shirts",size:[36,38,40,42,44,46]},{title:"Leather Travel Bag",description:"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec auctor nunc nibh, in posuere arcu malesuada.",price:121,color:"black",image:"bag-1.svg",category:"Accessories",size:[]},{title:"Stretch Wool Chino Trousers",description:"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec auctor nunc nibh, in posuere arcu malesuada.",price:190,fit:"classic",color:"black",image:"trousers-1.svg",category:"Trousers",size:[36,38,42,44,46]}],i=n(0),o=n(3),s=n.n(o),a=(n(5),n(1));Object(a.a)(i.a.burgerMenuIcon,i.a.burgerMenuContainer);const c=e=>{const t=document.querySelector(".all-products__products-container");let n="";e.forEach(e=>{if(t){const t=l(e);n+=t}}),t.innerHTML=n},l=e=>`<a class="all-products__product" href="product-page.html">\n    <div class="all-products__product-image" style='background-image: url(${n(9)("./"+e.image)})'></div>\n    <div class="all-products__product-description">\n        <span class="all-products__category">${e.category}</span>\n        <h4 class="product-heading all-products__product-heading">${e.title}</h4>\n        <p>${e.description}</p>\n        <span class="all-products__product-price">$${e.price}</span>\n    </div>\n</a>`;c(r);const u={category:null,fit:null,size:null,price:null,color:null};let p={...u};const d=()=>{const e=Object.keys(p).filter(e=>p[e]),t=r.filter(t=>{let n=!0;return e.forEach(e=>{n&&(n="size"===e?n&&t.size.includes(p[e]):"price"===e?n&&t.price>=p.price[0]&&t.price<=p.price[1]:n&&t[e]===p[e])}),n});c(t),b(t)},f=document.querySelector(i.a.selector);f&&f.addEventListener("click",(function(){this.classList.toggle(i.a.selectorActive)}));const g=e=>{e.addEventListener("click",(function(){const e=this.querySelector("p").textContent;document.querySelector(i.a.selectorOptionText).textContent=e,document.querySelector(i.a.selectorOptionActive).classList.remove(i.a.selectorOptionActiveClass),this.classList.add(i.a.selectorOptionActiveClass),m(e)}))},m=e=>{p.category="All products"===e?null:e,d()};document.querySelectorAll(i.a.selectorOption).forEach(e=>{g(e)});const h=(e,t,n)=>{document.querySelectorAll(e).forEach(e=>{e.addEventListener("click",(function(){const r=e.textContent,i=e.id,o=document.querySelector("."+t);if(e.classList.contains(t))return document.querySelector("."+t).classList.remove(t),"size"===n?p.size=null:"fit"===n?p.fit=null:"color"===n&&(p.color=null),void d();o&&document.querySelector("."+t).classList.remove(t),e.classList.add(t),v(r,i,n)}))})};h(i.a.filterSize,i.a.filterSizeSelected,"size"),h(i.a.filterFit,i.a.filterFitSelected,"fit"),h(i.a.filterColor,i.a.filterColorSelected,"color");const v=(e,t,n)=>{"fit"===n?(p.fit=e.toLowerCase(),d()):"size"===n?(p.size=parseFloat(e),d()):"color"===n&&(p.color=t,d())},x=document.getElementById("slider");s.a.create(x,{start:[99,300],connect:!0,range:{min:0,max:1e3}}),x.noUiSlider.on("update",e=>{document.querySelector(i.a.lowerPriceInRange).textContent="$"+parseInt(e[0]),document.querySelector(i.a.higherPriceInRange).textContent="$"+parseInt(e[1])}),x.noUiSlider.on("change",e=>{p.price=e,d()}),x.noUiSlider.on("end",e=>{p.price=e,d()});const b=e=>{0===e.length?(document.querySelector(i.a.emptyFilter).style.display="flex",document.querySelector(i.a.paginationContainer).style.display="none"):e.length===r.length?(document.querySelector(i.a.emptyFilter).style.display="none",document.querySelector(i.a.paginationContainer).style.display="flex"):(document.querySelector(i.a.emptyFilter).style.display="none",document.querySelector(i.a.paginationContainer).style.display="none")};document.querySelector(i.a.cleanFilters).addEventListener("click",()=>{document.querySelector(i.a.selectorOptionText).textContent="All products",p={...u},x.noUiSlider.reset(),y(),d()});const y=()=>{const e=document.querySelector("."+i.a.filterFitSelected),t=document.querySelector("."+i.a.filterSizeSelected),n=document.querySelector("."+i.a.filterColorSelected);e&&e.classList.remove(i.a.filterFitSelected),t&&t.classList.remove(i.a.filterSizeSelected),n&&n.classList.remove(i.a.filterColorSelected)};Object(a.b)(i.a.paginationLink,i.a.paginationLinkActive);(()=>{const e=document.querySelector(i.a.arrowBack),t=document.querySelector(i.a.arrowNext),n=document.querySelectorAll(i.a.paginationLink);e.addEventListener("click",()=>{for(let e=0;e<n.length;e++)if(n[e].classList.contains(i.a.paginationLinkActive)&&e>0)return n[e].classList.remove(i.a.paginationLinkActive),void n[e-1].classList.add(i.a.paginationLinkActive)}),t.addEventListener("click",()=>{for(let e=0;e<n.length;e++)if(n[e].classList.contains(i.a.paginationLinkActive)&&e<n.length-1)return n[e].classList.remove(i.a.paginationLinkActive),void n[e+1].classList.add(i.a.paginationLinkActive)})})()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2RvbVN0cmluZ3MuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2hlbHBlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL25vdWlzbGlkZXIvZGlzdHJpYnV0ZS9ub3Vpc2xpZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ub3Vpc2xpZGVyL2Rpc3RyaWJ1dGUvbm91aXNsaWRlci5jc3M/ZGJmNyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL25vdWlzbGlkZXIvZGlzdHJpYnV0ZS9ub3Vpc2xpZGVyLmNzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovLy8uL3NyYy9pbWFnZXMgc3luYyBeXFwuXFwvLiokIiwid2VicGFjazovLy8uL3NyYy9pbWFnZXMvR3JvdXAgMTUuc3ZnIiwid2VicGFjazovLy8uL3NyYy9pbWFnZXMvYWNjZXNzb3JpZXMtbWluLnBuZyIsIndlYnBhY2s6Ly8vLi9zcmMvaW1hZ2VzL2FjY2Vzc29yaWVzLnBuZyIsIndlYnBhY2s6Ly8vLi9zcmMvaW1hZ2VzL2FkZC1wcm9kdWN0LTEuc3ZnIiwid2VicGFjazovLy8uL3NyYy9pbWFnZXMvYWRkLXByb2R1Y3QtMi5zdmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2ltYWdlcy9hZGQtcHJvZHVjdC0zLnN2ZyIsIndlYnBhY2s6Ly8vLi9zcmMvaW1hZ2VzL2FtZXJpY2FuLWV4cHJlc3Muc3ZnIiwid2VicGFjazovLy8uL3NyYy9pbWFnZXMvYXJyb3cuc3ZnIiwid2VicGFjazovLy8uL3NyYy9pbWFnZXMvYXJyb3dzLnN2ZyIsIndlYnBhY2s6Ly8vLi9zcmMvaW1hZ2VzL2FydGljbGUtbWFpbi1pbWFnZS1taW4ucG5nIiwid2VicGFjazovLy8uL3NyYy9pbWFnZXMvYXJ0aWNsZS1tYWluLWltYWdlLnBuZyIsIndlYnBhY2s6Ly8vLi9zcmMvaW1hZ2VzL2FydGljbGUtcHJldmlldy0xLW1pbi5wbmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2ltYWdlcy9hcnRpY2xlLXByZXZpZXctMS5zdmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2ltYWdlcy9hcnRpY2xlLXByZXZpZXctMi5zdmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2ltYWdlcy9iYWNrZ3JvdW5kLWltZy1taW4ucG5nIiwid2VicGFjazovLy8uL3NyYy9pbWFnZXMvYmFja2dyb3VuZC1pbWcucG5nIiwid2VicGFjazovLy8uL3NyYy9pbWFnZXMvYmFnLTEuc3ZnIiwid2VicGFjazovLy8uL3NyYy9pbWFnZXMvYmFnLWJsYWNrLnN2ZyIsIndlYnBhY2s6Ly8vLi9zcmMvaW1hZ2VzL2JhZy5zdmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2ltYWdlcy9jbG9zZS5zdmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2ltYWdlcy9jbG90aGVzLW1pbi5wbmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2ltYWdlcy9jbG90aGVzLnBuZyIsIndlYnBhY2s6Ly8vLi9zcmMvaW1hZ2VzL2Nsb3RoZXMuc3ZnIiwid2VicGFjazovLy8uL3NyYy9pbWFnZXMvY29hdC0xLnN2ZyIsIndlYnBhY2s6Ly8vLi9zcmMvaW1hZ2VzL2ZhY2Vib29rLnN2ZyIsIndlYnBhY2s6Ly8vLi9zcmMvaW1hZ2VzL2ZsaXAtaW1hZ2UtYXJyb3ctbGVmdC5zdmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2ltYWdlcy9mbGlwLWltYWdlLWFycm93LXJpZ2h0LnN2ZyIsIndlYnBhY2s6Ly8vLi9zcmMvaW1hZ2VzL2hhbmdlci5zdmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2ltYWdlcy9pY29ucy5zdmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2ltYWdlcy9pbnN0YWdyYW0uc3ZnIiwid2VicGFjazovLy8uL3NyYy9pbWFnZXMvamFja2V0LTEuc3ZnIiwid2VicGFjazovLy8uL3NyYy9pbWFnZXMvbG9jYXRpb24tYmxhY2suc3ZnIiwid2VicGFjazovLy8uL3NyYy9pbWFnZXMvbG9jYXRpb24uc3ZnIiwid2VicGFjazovLy8uL3NyYy9pbWFnZXMvbG9nby1ibGFjay5zdmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2ltYWdlcy9sb2dvLnBuZyIsIndlYnBhY2s6Ly8vLi9zcmMvaW1hZ2VzL2xvZ28uc3ZnIiwid2VicGFjazovLy8uL3NyYy9pbWFnZXMvbG9va2Jvb2staW1hZ2UtMS1taW4ucG5nIiwid2VicGFjazovLy8uL3NyYy9pbWFnZXMvbG9va2Jvb2staW1hZ2UtMS5wbmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2ltYWdlcy9sb29rYm9vay1pbWFnZS0yLW1pbi5wbmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2ltYWdlcy9sb29rYm9vay1pbWFnZS0yLnBuZyIsIndlYnBhY2s6Ly8vLi9zcmMvaW1hZ2VzL21hc3RlcmNhcmQuc3ZnIiwid2VicGFjazovLy8uL3NyYy9pbWFnZXMvbWVhc3VyaW5nLnN2ZyIsIndlYnBhY2s6Ly8vLi9zcmMvaW1hZ2VzL29wZW4tbWVudS5zdmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2ltYWdlcy9wYXlwYWwuc3ZnIiwid2VicGFjazovLy8uL3NyYy9pbWFnZXMvcHJvZHVjdC0xLnN2ZyIsIndlYnBhY2s6Ly8vLi9zcmMvaW1hZ2VzL3Byb2R1Y3QtMi5zdmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2ltYWdlcy9wcm9kdWN0LTMuc3ZnIiwid2VicGFjazovLy8uL3NyYy9pbWFnZXMvcHJvZHVjdC00LnN2ZyIsIndlYnBhY2s6Ly8vLi9zcmMvaW1hZ2VzL3Byb2R1Y3QtZGVzYy0xLmpwZyIsIndlYnBhY2s6Ly8vLi9zcmMvaW1hZ2VzL3Byb2R1Y3QtZGVzYy0yLmpwZyIsIndlYnBhY2s6Ly8vLi9zcmMvaW1hZ2VzL3Byb2R1Y3QtZGVzYy0zLmpwZyIsIndlYnBhY2s6Ly8vLi9zcmMvaW1hZ2VzL3Byb2R1Y3QtZGVzYy00LmpwZyIsIndlYnBhY2s6Ly8vLi9zcmMvaW1hZ2VzL3NlYXJjaC1ibGFjay5zdmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2ltYWdlcy9zZWFyY2guc3ZnIiwid2VicGFjazovLy8uL3NyYy9pbWFnZXMvc2hpcnQtMS5zdmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2ltYWdlcy9zaGlydC0yLnN2ZyIsIndlYnBhY2s6Ly8vLi9zcmMvaW1hZ2VzL3NoaXJ0LTMuc3ZnIiwid2VicGFjazovLy8uL3NyYy9pbWFnZXMvc2hvZXMucG5nIiwid2VicGFjazovLy8uL3NyYy9pbWFnZXMvdHJvdXNlcnMtMS5zdmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2ltYWdlcy90d2l0dGVyLnN2ZyIsIndlYnBhY2s6Ly8vLi9zcmMvaW1hZ2VzL3VzZXItYmxhY2suc3ZnIiwid2VicGFjazovLy8uL3NyYy9pbWFnZXMvdXNlci5zdmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2ltYWdlcy92aXNhICgyKS5zdmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2ltYWdlcy95b3V0dWJlLnN2ZyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvbW9ja0RhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3Nob3BQYWdlLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiRE9Nc3RyaW5ncyIsInNlbGVjdG9yIiwic2VsZWN0b3JBY3RpdmUiLCJzZWxlY3Rvck9wdGlvbiIsInNlbGVjdG9yT3B0aW9uVGV4dCIsInNlbGVjdG9yT3B0aW9uQWN0aXZlIiwic2VsZWN0b3JPcHRpb25BY3RpdmVDbGFzcyIsImZpbHRlclNpemUiLCJmaWx0ZXJTaXplU2VsZWN0ZWQiLCJmaWx0ZXJGaXQiLCJmaWx0ZXJGaXRTZWxlY3RlZCIsImZpbHRlckNvbG9yIiwiZmlsdGVyQ29sb3JTZWxlY3RlZCIsInBhZ2luYXRpb25MaW5rIiwicGFnaW5hdGlvbkxpbmtBY3RpdmUiLCJhcnJvd0JhY2siLCJhcnJvd05leHQiLCJsb3dlclByaWNlSW5SYW5nZSIsImhpZ2hlclByaWNlSW5SYW5nZSIsImVtcHR5RmlsdGVyIiwicGFnaW5hdGlvbkNvbnRhaW5lciIsImNsZWFuRmlsdGVycyIsInByb2R1Y3RTaXplIiwicHJvZHVjdENvbG9yIiwicHJvZHVjdFNpemVTZWxlY3RlZCIsInByb2R1Y3RDb2xvclNlbGVjdGVkIiwiYnVyZ2VyTWVudUljb24iLCJidXJnZXJNZW51Q29udGFpbmVyIiwicHJvZHVjdEltYWdlc09wdGlvbnMiLCJmbGlwcGluZ0ltYWdlQXJyb3dMZWZ0IiwiZmxpcHBpbmdJbWFnZUFycm93UmlnaHQiLCJpbWFnZXNDb250YWluZXIiLCJyZWdpc3RlckFjdGl2ZUNsYXNzIiwib3B0aW9uQ2xhc3MiLCJvcHRpb25DbGFzc0FjdGl2ZSIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvckFsbCIsImZvckVhY2giLCJjdXIiLCJhZGRFdmVudExpc3RlbmVyIiwicXVlcnlTZWxlY3RvciIsImNsYXNzTGlzdCIsInJlbW92ZSIsImFkZCIsImNsb3NlTWVudSIsImV2ZW50IiwiaWNvbiIsIm1lbnUiLCJ0YXJnZXQiLCJjb250YWlucyIsInN0eWxlIiwiZGlzcGxheSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJpbml0QnVyZ2VyTWVudUNsaWNrTGlzdGVuZXIiLCJtZW51SWNvbiIsIm1lbnVDb250YWluZXIiLCJzdG9wUHJvcGFnYXRpb24iLCJWRVJTSU9OIiwicmVtb3ZlRWxlbWVudCIsImVsIiwicGFyZW50RWxlbWVudCIsInJlbW92ZUNoaWxkIiwiaXNTZXQiLCJwcmV2ZW50RGVmYXVsdCIsImUiLCJpc051bWVyaWMiLCJhIiwiaXNOYU4iLCJpc0Zpbml0ZSIsImFkZENsYXNzRm9yIiwiZWxlbWVudCIsImNsYXNzTmFtZSIsImR1cmF0aW9uIiwiYWRkQ2xhc3MiLCJzZXRUaW1lb3V0IiwicmVtb3ZlQ2xhc3MiLCJsaW1pdCIsIk1hdGgiLCJtYXgiLCJtaW4iLCJhc0FycmF5IiwiQXJyYXkiLCJpc0FycmF5IiwiY291bnREZWNpbWFscyIsIm51bVN0ciIsInBpZWNlcyIsIlN0cmluZyIsInNwbGl0IiwibGVuZ3RoIiwidGVzdCIsInJlcGxhY2UiLCJSZWdFeHAiLCJqb2luIiwiZ2V0UGFnZU9mZnNldCIsImRvYyIsInN1cHBvcnRQYWdlT2Zmc2V0IiwidW5kZWZpbmVkIiwid2luZG93IiwicGFnZVhPZmZzZXQiLCJpc0NTUzFDb21wYXQiLCJjb21wYXRNb2RlIiwieCIsImRvY3VtZW50RWxlbWVudCIsInNjcm9sbExlZnQiLCJib2R5IiwieSIsInBhZ2VZT2Zmc2V0Iiwic2Nyb2xsVG9wIiwic3ViUmFuZ2VSYXRpbyIsInBhIiwicGIiLCJmcm9tUGVyY2VudGFnZSIsInJhbmdlIiwic3RhcnRSYW5nZSIsImdldEoiLCJhcnIiLCJqIiwidG9TdGVwcGluZyIsInhWYWwiLCJ4UGN0Iiwic2xpY2UiLCJ2YSIsInZiIiwiYWJzIiwidG9QZXJjZW50YWdlIiwiZ2V0U3RlcCIsInhTdGVwcyIsInNuYXAiLCJiIiwidG8iLCJyb3VuZCIsImNsb3Nlc3QiLCJoYW5kbGVFbnRyeVBvaW50IiwiaW5kZXgiLCJ0aGF0IiwicGVyY2VudGFnZSIsIkVycm9yIiwicGFyc2VGbG9hdCIsInB1c2giLCJ4SGlnaGVzdENvbXBsZXRlU3RlcCIsImhhbmRsZVN0ZXBQb2ludCIsInRvdGFsU3RlcHMiLCJ4TnVtU3RlcHMiLCJoaWdoZXN0U3RlcCIsImNlaWwiLCJOdW1iZXIiLCJ0b0ZpeGVkIiwic3RlcCIsIlNwZWN0cnVtIiwiZW50cnkiLCJzaW5nbGVTdGVwIiwidGhpcyIsIm9yZGVyZWQiLCJzb3J0IiwiZ2V0RGlzdGFuY2UiLCJkaXN0YW5jZXMiLCJnZXRBYnNvbHV0ZURpc3RhbmNlIiwiZGlyZWN0aW9uIiwic3RhcnRfZmFjdG9yIiwieFBjdF9pbmRleCIsInJlc3RfZmFjdG9yIiwicmVzdF9yZWxfZGlzdGFuY2UiLCJyYW5nZV9wY3QiLCJyZWxfcmFuZ2VfZGlzdGFuY2UiLCJhYnNfZGlzdGFuY2VfY291bnRlciIsInJhbmdlX2NvdW50ZXIiLCJmcm9tU3RlcHBpbmciLCJpc1BlcmNlbnRhZ2UiLCJnZXREZWZhdWx0U3RlcCIsImlzRG93biIsInNpemUiLCJnZXROZWFyYnlTdGVwcyIsInN0ZXBCZWZvcmUiLCJzdGFydFZhbHVlIiwidGhpc1N0ZXAiLCJzdGVwQWZ0ZXIiLCJjb3VudFN0ZXBEZWNpbWFscyIsInN0ZXBEZWNpbWFscyIsIm1hcCIsImFwcGx5IiwiY29udmVydCIsImRlZmF1bHRGb3JtYXR0ZXIiLCJmcm9tIiwiY3NzQ2xhc3NlcyIsImJhc2UiLCJvcmlnaW4iLCJoYW5kbGUiLCJoYW5kbGVMb3dlciIsImhhbmRsZVVwcGVyIiwidG91Y2hBcmVhIiwiaG9yaXpvbnRhbCIsInZlcnRpY2FsIiwiYmFja2dyb3VuZCIsImNvbm5lY3QiLCJjb25uZWN0cyIsImx0ciIsInJ0bCIsInRleHREaXJlY3Rpb25MdHIiLCJ0ZXh0RGlyZWN0aW9uUnRsIiwiZHJhZ2dhYmxlIiwiZHJhZyIsInRhcCIsImFjdGl2ZSIsInRvb2x0aXAiLCJwaXBzIiwicGlwc0hvcml6b250YWwiLCJwaXBzVmVydGljYWwiLCJtYXJrZXIiLCJtYXJrZXJIb3Jpem9udGFsIiwibWFya2VyVmVydGljYWwiLCJtYXJrZXJOb3JtYWwiLCJtYXJrZXJMYXJnZSIsIm1hcmtlclN1YiIsInZhbHVlSG9yaXpvbnRhbCIsInZhbHVlVmVydGljYWwiLCJ2YWx1ZU5vcm1hbCIsInZhbHVlTGFyZ2UiLCJ2YWx1ZVN1YiIsInZhbGlkYXRlRm9ybWF0IiwiaXNWYWxpZEZvcm1hdHRlciIsInRlc3RTdGVwIiwicGFyc2VkIiwidGVzdFJhbmdlIiwic3BlY3RydW0iLCJ0ZXN0U3RhcnQiLCJoYW5kbGVzIiwic3RhcnQiLCJ0ZXN0U25hcCIsInRlc3RBbmltYXRlIiwiYW5pbWF0ZSIsInRlc3RBbmltYXRpb25EdXJhdGlvbiIsImFuaW1hdGlvbkR1cmF0aW9uIiwidGVzdENvbm5lY3QiLCJ0ZXN0T3JpZW50YXRpb24iLCJvcnQiLCJ0ZXN0TWFyZ2luIiwibWFyZ2luIiwidGVzdExpbWl0IiwidGVzdFBhZGRpbmciLCJwYWRkaW5nIiwidG90YWxQYWRkaW5nIiwiZmlyc3RWYWx1ZSIsInRlc3REaXJlY3Rpb24iLCJkaXIiLCJ0ZXN0QmVoYXZpb3VyIiwiaW5kZXhPZiIsImZpeGVkIiwiaG92ZXIiLCJ1bmNvbnN0cmFpbmVkIiwiZXZlbnRzIiwidGVzdFRvb2x0aXBzIiwidG9vbHRpcHMiLCJmb3JtYXR0ZXIiLCJ0ZXN0QXJpYUZvcm1hdCIsImFyaWFGb3JtYXQiLCJ0ZXN0Rm9ybWF0IiwiZm9ybWF0IiwidGVzdEtleWJvYXJkU3VwcG9ydCIsImtleWJvYXJkU3VwcG9ydCIsInRlc3REb2N1bWVudEVsZW1lbnQiLCJ0ZXN0Q3NzUHJlZml4IiwiY3NzUHJlZml4IiwidGVzdENzc0NsYXNzZXMiLCJ0ZXN0T3B0aW9ucyIsIm9wdGlvbnMiLCJ0ZXN0cyIsIm9yaWVudGF0aW9uIiwiYmVoYXZpb3VyIiwiZGVmYXVsdHMiLCJrZXlzIiwiY3JlYXRlRWxlbWVudCIsIm1zUHJlZml4IiwibXNUcmFuc2Zvcm0iLCJub1ByZWZpeCIsInRyYW5zZm9ybSIsInRyYW5zZm9ybVJ1bGUiLCJzY29wZSIsIm9yaWdpbmFsT3B0aW9ucyIsInNjb3BlX0Jhc2UiLCJzY29wZV9IYW5kbGVzIiwic2NvcGVfQ29ubmVjdHMiLCJzY29wZV9QaXBzIiwic2NvcGVfVG9vbHRpcHMiLCJzY29wZV9TZWxmIiwiYWRkVGFyZ2V0IiwiYWN0aW9ucyIsIm5hdmlnYXRvciIsInBvaW50ZXJFbmFibGVkIiwibW92ZSIsImVuZCIsIm1zUG9pbnRlckVuYWJsZWQiLCJzdXBwb3J0c1Bhc3NpdmUiLCJDU1MiLCJzdXBwb3J0cyIsIm9wdHMiLCJnZXRTdXBwb3J0c1Bhc3NpdmUiLCJzY29wZV9UYXJnZXQiLCJzY29wZV9TcGVjdHJ1bSIsInNjb3BlX1ZhbHVlcyIsInNjb3BlX0xvY2F0aW9ucyIsInNjb3BlX0hhbmRsZU51bWJlcnMiLCJzY29wZV9BY3RpdmVIYW5kbGVzQ291bnQiLCJzY29wZV9FdmVudHMiLCJzY29wZV9Eb2N1bWVudCIsIm93bmVyRG9jdW1lbnQiLCJzY29wZV9Eb2N1bWVudEVsZW1lbnQiLCJzY29wZV9Cb2R5Iiwic2NvcGVfRGlyT2Zmc2V0IiwiYWRkTm9kZVRvIiwiZGl2IiwiYXBwZW5kQ2hpbGQiLCJhZGRPcmlnaW4iLCJoYW5kbGVOdW1iZXIiLCJzZXRBdHRyaWJ1dGUiLCJpc1NsaWRlckRpc2FibGVkIiwiaXNIYW5kbGVEaXNhYmxlZCIsImhvcml6b250YWxLZXlzIiwidmVydGljYWxLZXlzIiwibGFyZ2VTdGVwS2V5cyIsImVkZ2VLZXlzIiwicmV2ZXJzZSIsImlzTGFyZ2VEb3duIiwiaXNMYXJnZVVwIiwiaXNVcCIsImlzTWluIiwiaXNNYXgiLCJnZXROZXh0U3RlcHNGb3JIYW5kbGUiLCJzZXRIYW5kbGUiLCJmaXJlRXZlbnQiLCJldmVudEtleWRvd24iLCJhZGRDb25uZWN0IiwiYWRkVG9vbHRpcCIsImZpcnN0Q2hpbGQiLCJoYXNBdHRyaWJ1dGUiLCJyZW1vdmVUb29sdGlwcyIsInJlbW92ZUV2ZW50IiwiYmluZEV2ZW50IiwidmFsdWVzIiwidW5lbmNvZGVkIiwiZm9ybWF0dGVkVmFsdWUiLCJpbm5lckhUTUwiLCJhZGRNYXJraW5nIiwic3ByZWFkIiwiZmlsdGVyRnVuYyIsInZhbHVlU2l6ZUNsYXNzZXMiLCJtYXJrZXJTaXplQ2xhc3NlcyIsInZhbHVlT3JpZW50YXRpb25DbGFzc2VzIiwibWFya2VyT3JpZW50YXRpb25DbGFzc2VzIiwiZ2V0Q2xhc3NlcyIsInR5cGUiLCJzb3VyY2UiLCJzaXplQ2xhc3NlcyIsIm9mZnNldCIsIm5vZGUiLCJhZGRTcHJlYWQiLCJyZW1vdmVQaXBzIiwiZ3JpZCIsImRlbnNpdHkiLCJmaWx0ZXIiLCJncm91cCIsInN0ZXBwZWQiLCJpbnRlcnZhbCIsImdldEdyb3VwIiwiYXJyYXkiLCJpbmRleGVzIiwiZmlyc3RJblJhbmdlIiwibGFzdEluUmFuZ2UiLCJpZ25vcmVGaXJzdCIsImlnbm9yZUxhc3QiLCJwcmV2UGN0IiwidW5zaGlmdCIsImN1cnJlbnQiLCJxIiwibmV3UGN0IiwicGN0RGlmZmVyZW5jZSIsInBjdFBvcyIsInN0ZXBzIiwicmVhbFN0ZXBzIiwic3RlcFNpemUiLCJsb3ciLCJoaWdoIiwiaXNTdGVwcyIsImdlbmVyYXRlU3ByZWFkIiwiYmFzZVNpemUiLCJyZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiYWx0Iiwid2lkdGgiLCJoZWlnaHQiLCJhdHRhY2hFdmVudCIsImNhbGxiYWNrIiwiZGF0YSIsIm1ldGhvZCIsInBhZ2VPZmZzZXQiLCJldmVudFRhcmdldCIsInRvdWNoIiwibW91c2UiLCJwb2ludGVyIiwiaXNUb3VjaE9uVGFyZ2V0IiwiY2hlY2tUb3VjaCIsInNoYWRvd1Jvb3QiLCJ0YXJnZXRUb3VjaGVzIiwidG91Y2hlcyIsInBhZ2VYIiwicGFnZVkiLCJ0YXJnZXRUb3VjaCIsImZpbmQiLCJjaGFuZ2VkVG91Y2hlcyIsImNsaWVudFgiLCJjbGllbnRZIiwicG9pbnRzIiwiY3Vyc29yIiwiZml4RXZlbnQiLCJkb05vdFJlamVjdCIsImJ1dHRvbnMiLCJjYWxjUG9pbnQiLCJtZXRob2RzIiwiZXZlbnROYW1lIiwicGFzc2l2ZSIsImNhbGNQb2ludFRvUGVyY2VudGFnZSIsImVsZW0iLCJkb2NFbGVtIiwicHJvcG9zYWwiLCJ1c2VyQWdlbnQiLCJ0b3AiLCJjbGllbnRUb3AiLCJsZWZ0IiwiY2xpZW50TGVmdCIsImRvY3VtZW50TGVhdmUiLCJub2RlTmFtZSIsInJlbGF0ZWRUYXJnZXQiLCJldmVudEVuZCIsImV2ZW50TW92ZSIsImFwcFZlcnNpb24iLCJidXR0b25zUHJvcGVydHkiLCJtb3ZlbWVudCIsInN0YXJ0Q2FsY1BvaW50IiwibW92ZUhhbmRsZXMiLCJsb2NhdGlvbnMiLCJoYW5kbGVOdW1iZXJzIiwibGlzdGVuZXJzIiwic2V0WmluZGV4IiwiZXZlbnRTdGFydCIsInNvbWUiLCJjaGlsZHJlbiIsIm1vdmVFdmVudCIsImVuZEV2ZW50Iiwib3V0RXZlbnQiLCJjb25jYXQiLCJnZXRDb21wdXRlZFN0eWxlIiwiZXZlbnRUYXAiLCJjbGlja2VkUG9zaXRpb24iLCJzbWFsbGVzdERpZmZlcmVuY2UiLCJoYW5kbGVQb3NpdGlvbiIsImRpZmZlcmVuY2VXaXRoVGhpc0hhbmRsZSIsImdldENsb3Nlc3RIYW5kbGUiLCJldmVudEhvdmVyIiwidGFyZ2V0RXZlbnQiLCJuYW1lc3BhY2VkRXZlbnQiLCJuYW1lc3BhY2UiLCJzdWJzdHJpbmciLCJ0RXZlbnQiLCJ0TmFtZXNwYWNlIiwiZXZlbnRUeXBlIiwiY2hlY2tIYW5kbGVQb3NpdGlvbiIsInJlZmVyZW5jZSIsImxvb2tCYWNrd2FyZCIsImxvb2tGb3J3YXJkIiwiZ2V0VmFsdWUiLCJkaXN0YW5jZSIsImluUnVsZU9yZGVyIiwidiIsInVwd2FyZCIsInByb3Bvc2FscyIsImYiLCJzdGF0ZSIsInRyYW5zZm9ybURpcmVjdGlvbiIsInpJbmRleCIsInRyYW5zbGF0ZVJ1bGUiLCJ1cGRhdGVDb25uZWN0IiwidXBkYXRlSGFuZGxlUG9zaXRpb24iLCJoIiwiY29ubmVjdFdpZHRoIiwic2NhbGVSdWxlIiwicmVzb2x2ZVRvVmFsdWUiLCJ2YWx1ZVNldCIsImlucHV0IiwiZmlyZVNldEV2ZW50IiwiaXNJbml0IiwidmFsdWVHZXQiLCJsb2NhdGlvbiIsIm5lYXJieVN0ZXBzIiwiaW5jcmVtZW50IiwiZGVjcmVtZW50IiwiY29ubmVjdE9wdGlvbnMiLCJjb25uZWN0QmFzZSIsImFkZEVsZW1lbnRzIiwiaGFuZGxlQmVmb3JlIiwiaGFuZGxlQWZ0ZXIiLCJldmVudEhvbGRlcnMiLCJldmVudEhvbGRlciIsInBvc2l0aW9ucyIsIm5vdyIsInRleHQiLCJkZXN0cm95Iiwibm9VaVNsaWRlciIsIm9uIiwib2ZmIiwic2V0IiwicmVzZXQiLCJfX21vdmVIYW5kbGVzIiwidXBkYXRlT3B0aW9ucyIsIm9wdGlvbnNUb1VwZGF0ZSIsInVwZGF0ZUFibGUiLCJuZXdPcHRpb25zIiwiZ2V0VG9vbHRpcHMiLCJnZXRPcmlnaW5zIiwiX19zcGVjdHJ1bSIsInZlcnNpb24iLCJhcGkiLCJjb250ZW50IiwiZGVmYXVsdCIsImxvY2FscyIsIm1lbW8iLCJpc09sZElFIiwiQm9vbGVhbiIsImFsbCIsImF0b2IiLCJnZXRUYXJnZXQiLCJzdHlsZVRhcmdldCIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsInN0eWxlc0luRG9tIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwibGlzdCIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsIml0ZW0iLCJpZCIsImNvdW50Iiwib2JqIiwiY3NzIiwibWVkaWEiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZFN0eWxlIiwiaW5zZXJ0U3R5bGVFbGVtZW50IiwiYXR0cmlidXRlcyIsIm5vbmNlIiwiaW5zZXJ0IiwidGV4dFN0b3JlIiwicmVwbGFjZVRleHQiLCJyZXBsYWNlbWVudCIsImFwcGx5VG9TaW5nbGV0b25UYWciLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImNzc05vZGUiLCJjcmVhdGVUZXh0Tm9kZSIsImNoaWxkTm9kZXMiLCJpbnNlcnRCZWZvcmUiLCJhcHBseVRvVGFnIiwicmVtb3ZlQXR0cmlidXRlIiwiYnRvYSIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJ1cGRhdGUiLCJzdHlsZUluZGV4IiwicGFyZW50Tm9kZSIsInJlbW92ZVN0eWxlRWxlbWVudCIsIm5ld09iaiIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJ0b1N0cmluZyIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4Iiwic3BsaWNlIiwidXNlU291cmNlTWFwIiwiY3NzTWFwcGluZyIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZVJvb3QiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibWVkaWFRdWVyeSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJ3ZWJwYWNrQ29udGV4dCIsInJlcSIsIndlYnBhY2tDb250ZXh0UmVzb2x2ZSIsImNvZGUiLCJyZXNvbHZlIiwidGl0bGUiLCJkZXNjcmlwdGlvbiIsInByaWNlIiwiZml0IiwiY29sb3IiLCJpbWFnZSIsImNhdGVnb3J5IiwicmVuZGVyRGF0YSIsInByb2R1Y3RzQ29udGFpbmVyIiwiZ2V0SHRtbFN0cmluZyIsInByb2R1Y3QiLCJtb2NrRGF0YSIsImRlZmF1bHRGaWx0ZXJzIiwiZmlsdGVyc0NvbnRhaW5lciIsImZpbHRlckRhdGEiLCJhY3RpdmVGaWx0ZXJzIiwiZmlsdGVyZWREYXRhIiwibWF0Y2hlcyIsImluY2x1ZGVzIiwibm9Qcm9kdWN0c0ZvdW5kIiwiY2F0ZWdvcmllc1NlbGVjdG9yIiwidG9nZ2xlIiwic2VsZWN0Q2F0ZWdvcnlIYW5kbGVyIiwiY2F0ZWdvcnlOYW1lIiwidGV4dENvbnRlbnQiLCJmaWx0ZXJQcm9kdWN0c0J5Q2F0ZWdvcnkiLCJyZWdpc3RlclRvZ2dlbGVBY3RpdmVDbGFzc0xpc3RlbmVyIiwiZmlsdGVyQnkiLCJwYXJhbWV0ZXJOYW1lIiwicGFyYW1ldGVySUQiLCJzZWxlY3RlZEZpbHRlciIsInVwZGF0ZUZpbHRlcnNDb3RhaW5lcldpdGhBY3RpdmVGaWx0ZXJzIiwidG9Mb3dlckNhc2UiLCJwcmljZVJhbmdlIiwiZ2V0RWxlbWVudEJ5SWQiLCJwYXJzZUludCIsInJlbW92ZUFsbEFjdGl2ZUNsYXNzZXNGcm9tRmlsdGVycyIsImZpbHRlckZpdEFjdGl2ZSIsImZpbHRlclNpemVBY3RpdmUiLCJmaWx0ZXJDb2xvckFjdGl2ZSIsInBhZ2VzIiwicGFnaW5hdGlvblBhZ2VDaGFuZ2UiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFWixFQUFvQmtCLEVBQUksU0FBU2hCLEdBQ1gsb0JBQVhpQixRQUEwQkEsT0FBT0MsYUFDMUNOLE9BQU9DLGVBQWViLEVBQVNpQixPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0RQLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUFFbUIsT0FBTyxLQVF2RHJCLEVBQW9Cc0IsRUFBSSxTQUFTRCxFQUFPRSxHQUV2QyxHQURVLEVBQVBBLElBQVVGLEVBQVFyQixFQUFvQnFCLElBQy9CLEVBQVBFLEVBQVUsT0FBT0YsRUFDcEIsR0FBVyxFQUFQRSxHQUE4QixpQkFBVkYsR0FBc0JBLEdBQVNBLEVBQU1HLFdBQVksT0FBT0gsRUFDaEYsSUFBSUksRUFBS1gsT0FBT1ksT0FBTyxNQUd2QixHQUZBMUIsRUFBb0JrQixFQUFFTyxHQUN0QlgsT0FBT0Ms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QU9ELFFBQVUsd0IsY0NBakJDLEVBQU9ELFFBQVUsa0IsY0NBakJDLEVBQU9ELFFBQVUsb0IsY0NBakJDLEVBQU9ELFFBQVUsMEIsY0NBakJDLEVBQU9ELFFBQVUsc0IsY0NBakJDLEVBQU9ELFFBQVUsc0IsY0NBakJDLEVBQU9ELFFBQVUscUIsY0NBakJDLEVBQU9ELFFBQVUsdUIsY0NBakJDLEVBQU9ELFFBQVUsb0MsY0NBakJDLEVBQU9ELFFBQVUscUMsY0NBakJDLEVBQU9ELFFBQVUscUIsY0NBakJDLEVBQU9ELFFBQVUsb0IsY0NBakJDLEVBQU9ELFFBQVUsd0IsY0NBakJDLEVBQU9ELFFBQVUsdUIsY0NBakJDLEVBQU9ELFFBQVUsNkIsY0NBakJDLEVBQU9ELFFBQVUsdUIsY0NBakJDLEVBQU9ELFFBQVUseUIsY0NBakJDLEVBQU9ELFFBQVUsbUIsY0NBakJDLEVBQU9ELFFBQVUsbUIsY0NBakJDLEVBQU9ELFFBQVUsbUMsY0NBakJDLEVBQU9ELFFBQVUsK0IsY0NBakJDLEVBQU9ELFFBQVUsbUMsY0NBakJDLEVBQU9ELFFBQVUsK0IsY0NBakJDLEVBQU9ELFFBQVUseUIsY0NBakJDLEVBQU9ELFFBQVUsd0IsY0NBakJDLEVBQU9ELFFBQVUsd0IsY0NBakJDLEVBQU9ELFFBQVUscUIsY0NBakJDLEVBQU9ELFFBQVUsd0IsY0NBakJDLEVBQU9ELFFBQVUsd0IsY0NBakJDLEVBQU9ELFFBQVUsd0IsY0NBakJDLEVBQU9ELFFBQVUsd0IsY0NBakJDLEVBQU9ELFFBQVUsNkIsY0NBakJDLEVBQU9ELFFBQVUsNkIsY0NBakJDLEVBQU9ELFFBQVUsNkIsY0NBakJDLEVBQU9ELFFBQVUsNkIsY0NBakJDLEVBQU9ELFFBQVUsMkIsY0NBakJDLEVBQU9ELFFBQVUscUIsY0NBakJDLEVBQU9ELFFBQVUsc0IsY0NBakJDLEVBQU9ELFFBQVUsc0IsY0NBakJDLEVBQU9ELFFBQVUsc0IsY0NBakJDLEVBQU9ELFFBQVUsb0IsY0NBakJDLEVBQU9ELFFBQVUseUIsY0NBakJDLEVBQU9ELFFBQVUsc0IsY0NBakJD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LEVBQU14aUIsT0FBUXhILElBQzlCLEdBQUlncUIsRUFBTWhxQixHQUFHeUUsVUFBVVEsU0FBUyxJQUFXbkMsdUJBQXlCOUMsRUFBSSxFQUdwRSxPQUZBZ3FCLEVBQU1ocUIsR0FBR3lFLFVBQVVDLE9BQU8sSUFBVzVCLDJCQUNyQ2tuQixFQUFNaHFCLEVBQUksR0FBR3lFLFVBQVVFLElBQUksSUFBVzdCLHdCQU1sREUsRUFBVXVCLGlCQUFpQixRQUFTLEtBQ2hDLElBQUssSUFBSXZFLEVBQUksRUFBR0EsRUFBSWdxQixFQUFNeGlCLE9BQVF4SCxJQUM5QixHQUFJZ3FCLEVBQU1ocUIsR0FBR3lFLFVBQVVRLFNBQVMsSUFBV25DLHVCQUF5QjlDLEVBQUlncUIsRUFBTXhpQixPQUFTLEVBR25GLE9BRkF3aUIsRUFBTWhxQixHQUFHeUUsVUFBVUMsT0FBTyxJQUFXNUIsMkJBQ3JDa25CLEVBQU1ocUIsRUFBSSxHQUFHeUUsVUFBVUUsSUFBSSxJQUFXN0IseUJBTXREbW5CIiwiZmlsZSI6InNob3BQYWdlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDc1KTtcbiIsImV4cG9ydCBjb25zdCBET01zdHJpbmdzID0ge1xuICAgIHNlbGVjdG9yOiAnLnNlbGVjdG9yJyxcbiAgICBzZWxlY3RvckFjdGl2ZTogJ3NlbGVjdG9yLS1hY3RpdmUnLFxuICAgIHNlbGVjdG9yT3B0aW9uOiAnLnNlbGVjdG9yX19vcHRpb24nLFxuICAgIHNlbGVjdG9yT3B0aW9uVGV4dDogJy5zZWxlY3Rvcl9fb3B0aW9uLS1hbGwgcCcsXG4gICAgc2VsZWN0b3JPcHRpb25BY3RpdmU6ICcuc2VsZWN0b3JfX29wdGlvbi0tYWN0aXZlJyxcbiAgICBzZWxlY3Rvck9wdGlvbkFjdGl2ZUNsYXNzOiAnc2VsZWN0b3JfX29wdGlvbi0tYWN0aXZlJyxcbiAgICBmaWx0ZXJTaXplOiAnLmZpbHRlcl9fc2l6ZScsXG4gICAgZmlsdGVyU2l6ZVNlbGVjdGVkOiAnZmlsdGVyX19zaXplLS1zZWxlY3RlZCcsXG4gICAgZmlsdGVyRml0OiAnLmZpbHRlcl9fZml0LW9wdGlvbicsXG4gICAgZmlsdGVyRml0U2VsZWN0ZWQ6ICdmaWx0ZXJfX2ZpdC1vcHRpb24tLXNlbGVjdGVkJyxcbiAgICBmaWx0ZXJDb2xvcjogJy5maWx0ZXJfX2NvbG9yLW9wdGlvbicsXG4gICAgZmlsdGVyQ29sb3JTZWxlY3RlZDogJ2ZpbHRlcl9fY29sb3Itb3B0aW9uLS1hY3RpdmUnLFxuICAgIHBhZ2luYXRpb25MaW5rOiAnLnBhZ2luYXRpb25fX2xpbmsnLFxuICAgIHBhZ2luYXRpb25MaW5rQWN0aXZlOiAncGFnaW5hdGlvbl9fbGluay0tYWN0aXZlJyxcbiAgICBhcnJvd0JhY2s6ICcucGFnaW5hdGlvbl9fYXJyb3ctLXByZXYnLFxuICAgIGFycm93TmV4dDogJy5wYWdpbmF0aW9uX19hcnJvdy0tbmV4dCcsXG4gICAgbG93ZXJQcmljZUluUmFuZ2U6ICcuZmlsdGVyX19wcmljZS1udW1iZXItLWxvd2VyJyxcbiAgICBoaWdoZXJQcmljZUluUmFuZ2U6ICcuZmlsdGVyX19wcmljZS1udW1iZXItLWhpZ2hlcicsXG4gICAgZW1wdHlGaWx0ZXI6ICcuZW1wdHktZmlsdGVyLXJlc3VsdCcsXG4gICAgcGFnaW5hdGlvbkNvbnRhaW5lcjogJy5wYWdpbmF0aW9uJyxcbiAgICBjbGVhbkZpbHRlcnM6ICcuZmlsdGVyX19jbGVhbi1maWx0ZXJzJyxcbiAgICBwcm9kdWN0U2l6ZTogJy5wcm9kdWN0LWRlc2NyaXB0aW9uX19zaXplJyxcbiAgICBwcm9kdWN0Q29sb3I6ICcucHJvZHVjdC1kZXNjcmlwdGlvbl9fY29sb3InLFxuICAgIHByb2R1Y3RTaXplU2VsZWN0ZWQ6ICdwcm9kdWN0LWRlc2NyaXB0aW9uX19zaXplLS1hY3RpdmUnLFxuICAgIHByb2R1Y3RDb2xvclNlbGVjdGVkOiAncHJvZHVjdC1kZXNjcmlwdGlvbl9fY29sb3ItLWFjdGl2ZScsXG4gICAgYnVyZ2VyTWVudUljb246ICcuaGVyby1hcmVhX19idXJnZXItbWVudScsXG4gICAgYnVyZ2VyTWVudUNvbnRhaW5lcjogJy52ZXJ0aWNhbC1tZW51JyxcbiAgICBwcm9kdWN0SW1hZ2VzT3B0aW9uczogJy5wcm9kdWN0LWRlc2NyaXB0aW9uX19tb3JlLWltYWdlcy1pdGVtJyxcbiAgICBmbGlwcGluZ0ltYWdlQXJyb3dMZWZ0OiAnLnByb2R1Y3QtZGVzY3JpcHRpb25fX2Fycm93LS1sZWZ0JyxcbiAgICBmbGlwcGluZ0ltYWdlQXJyb3dSaWdodDogJy5wcm9kdWN0LWRlc2NyaXB0aW9uX19hcnJvdy0tcmlnaHQnLFxuICAgIGltYWdlc0NvbnRhaW5lcjogJyNzbGlkZXInXG5cblxufVxuXG4iLCJcbi8vUmVnaXN0ZXIgYWN0aXZlIGNsYXNzXG5leHBvcnQgY29uc3QgcmVnaXN0ZXJBY3RpdmVDbGFzcyA9IChvcHRpb25DbGFzcywgb3B0aW9uQ2xhc3NBY3RpdmUpID0+IHtcbiAgICBjb25zdCBmaWx0ZXJPcHRpb25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChvcHRpb25DbGFzcyk7XG4gICAgZmlsdGVyT3B0aW9ucy5mb3JFYWNoKGN1ciA9PiB7XG4gICAgICAgIGN1ci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkUGFnZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy4nICsgb3B0aW9uQ2xhc3NBY3RpdmUpXG5cbiAgICAgICAgICAgIGlmIChzZWxlY3RlZFBhZ2UpIHtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuJyArIG9wdGlvbkNsYXNzQWN0aXZlKS5jbGFzc0xpc3QucmVtb3ZlKG9wdGlvbkNsYXNzQWN0aXZlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN1ci5jbGFzc0xpc3QuYWRkKG9wdGlvbkNsYXNzQWN0aXZlKTtcbiAgICAgICAgfSlcbiAgICB9KVxufVxuXG5cbmNvbnN0IGNsb3NlTWVudSA9IChldmVudCwgaWNvbiwgbWVudSkgPT4ge1xuICAgIGNvbnN0IGNsYXNzTGlzdCA9IGV2ZW50LnRhcmdldC5jbGFzc0xpc3RcbiAgICBpZiAoZXZlbnQudGFyZ2V0ICE9PSBtZW51ICYmICFjbGFzc0xpc3QuY29udGFpbnMoJ3ZlcnRpY2FsLW1lbnVfX25hdmlnYXRpb24nKSAmJiAhY2xhc3NMaXN0LmNvbnRhaW5zKCd2ZXJ0aWNhbC1tZW51X19uYXZpZ2F0aW9uLWxpbmsnKSkge1xuICAgICAgICBpY29uLnN0eWxlLmRpc3BsYXkgPSAnZmxleCdcbiAgICAgICAgbWVudS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnXG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgY2xvc2VNZW51KVxuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IGluaXRCdXJnZXJNZW51Q2xpY2tMaXN0ZW5lciA9IChtZW51SWNvbiwgbWVudUNvbnRhaW5lcikgPT4ge1xuICAgIGNvbnN0IGljb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKG1lbnVJY29uKVxuICAgIGNvbnN0IG1lbnUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKG1lbnVDb250YWluZXIpXG5cbiAgICBpY29uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXG4gICAgICAgIGljb24uc3R5bGUuZGlzcGxheSA9ICdub25lJ1xuICAgICAgICBtZW51LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snXG4gICAgfSlcblxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiBjbG9zZU1lbnUoZXZlbnQsIGljb24sIG1lbnUpKVxuXG59IiwiLyohIG5vdWlzbGlkZXIgLSAxNC41LjAgLSA1LzExLzIwMjAgKi9cbihmdW5jdGlvbihmYWN0b3J5KSB7XG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgICAgIC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS5cbiAgICAgICAgZGVmaW5lKFtdLCBmYWN0b3J5KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIC8vIE5vZGUvQ29tbW9uSlNcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQnJvd3NlciBnbG9iYWxzXG4gICAgICAgIHdpbmRvdy5ub1VpU2xpZGVyID0gZmFjdG9yeSgpO1xuICAgIH1cbn0pKGZ1bmN0aW9uKCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgdmFyIFZFUlNJT04gPSBcIjE0LjUuMFwiO1xuXG4gICAgLy9yZWdpb24gSGVscGVyIE1ldGhvZHNcblxuICAgIGZ1bmN0aW9uIGlzVmFsaWRGb3JtYXR0ZXIoZW50cnkpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBlbnRyeSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgZW50cnkudG8gPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgZW50cnkuZnJvbSA9PT0gXCJmdW5jdGlvblwiO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbW92ZUVsZW1lbnQoZWwpIHtcbiAgICAgICAgZWwucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZChlbCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNTZXQodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLy8gQmluZGFibGUgdmVyc2lvblxuICAgIGZ1bmN0aW9uIHByZXZlbnREZWZhdWx0KGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIC8vIFJlbW92ZXMgZHVwbGljYXRlcyBmcm9tIGFuIGFycmF5LlxuICAgIGZ1bmN0aW9uIHVuaXF1ZShhcnJheSkge1xuICAgICAgICByZXR1cm4gYXJyYXkuZmlsdGVyKGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgIHJldHVybiAhdGhpc1thXSA/ICh0aGlzW2FdID0gdHJ1ZSkgOiBmYWxzZTtcbiAgICAgICAgfSwge30pO1xuICAgIH1cblxuICAgIC8vIFJvdW5kIGEgdmFsdWUgdG8gdGhlIGNsb3Nlc3QgJ3RvJy5cbiAgICBmdW5jdGlvbiBjbG9zZXN0KHZhbHVlLCB0bykge1xuICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSAvIHRvKSAqIHRvO1xuICAgIH1cblxuICAgIC8vIEN1cnJlbnQgcG9zaXRpb24gb2YgYW4gZWxlbWVudCByZWxhdGl2ZSB0byB0aGUgZG9jdW1lbnQuXG4gICAgZnVuY3Rpb24gb2Zmc2V0KGVsZW0sIG9yaWVudGF0aW9uKSB7XG4gICAgICAgIHZhciByZWN0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgdmFyIGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudDtcbiAgICAgICAgdmFyIGRvY0VsZW0gPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgICB2YXIgcGFnZU9mZnNldCA9IGdldFBhZ2VPZmZzZXQoZG9jKTtcblxuICAgICAgICAvLyBnZXRCb3VuZGluZ0NsaWVudFJlY3QgY29udGFpbnMgbGVmdCBzY3JvbGwgaW4gQ2hyb21lIG9uIEFuZHJvaWQuXG4gICAgICAgIC8vIEkgaGF2ZW4ndCBmb3VuZCBhIGZlYXR1cmUgZGV0ZWN0aW9uIHRoYXQgcHJvdmVzIHRoaXMuIFdvcnN0IGNhc2VcbiAgICAgICAgLy8gc2NlbmFyaW8gb24gbWlzLW1hdGNoOiB0aGUgJ3RhcCcgZmVhdHVyZSBvbiBob3Jpem9udGFsIHNsaWRlcnMgYnJlYWtzLlxuICAgICAgICBpZiAoL3dlYmtpdC4qQ2hyb21lLipNb2JpbGUvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKSB7XG4gICAgICAgICAgICBwYWdlT2Zmc2V0LnggPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG9yaWVudGF0aW9uXG4gICAgICAgICAgICA/IHJlY3QudG9wICsgcGFnZU9mZnNldC55IC0gZG9jRWxlbS5jbGllbnRUb3BcbiAgICAgICAgICAgIDogcmVjdC5sZWZ0ICsgcGFnZU9mZnNldC54IC0gZG9jRWxlbS5jbGllbnRMZWZ0O1xuICAgIH1cblxuICAgIC8vIENoZWNrcyB3aGV0aGVyIGEgdmFsdWUgaXMgbnVtZXJpY2FsLlxuICAgIGZ1bmN0aW9uIGlzTnVtZXJpYyhhKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgYSA9PT0gXCJudW1iZXJcIiAmJiAhaXNOYU4oYSkgJiYgaXNGaW5pdGUoYSk7XG4gICAgfVxuXG4gICAgLy8gU2V0cyBhIGNsYXNzIGFuZCByZW1vdmVzIGl0IGFmdGVyIFtkdXJhdGlvbl0gbXMuXG4gICAgZnVuY3Rpb24gYWRkQ2xhc3NGb3IoZWxlbWVudCwgY2xhc3NOYW1lLCBkdXJhdGlvbikge1xuICAgICAgICBpZiAoZHVyYXRpb24gPiAwKSB7XG4gICAgICAgICAgICBhZGRDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpO1xuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZW1vdmVDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpO1xuICAgICAgICAgICAgfSwgZHVyYXRpb24pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gTGltaXRzIGEgdmFsdWUgdG8gMCAtIDEwMFxuICAgIGZ1bmN0aW9uIGxpbWl0KGEpIHtcbiAgICAgICAgcmV0dXJuIE1hdGgubWF4KE1hdGgubWluKGEsIDEwMCksIDApO1xuICAgIH1cblxuICAgIC8vIFdyYXBzIGEgdmFyaWFibGUgYXMgYW4gYXJyYXksIGlmIGl0IGlzbid0IG9uZSB5ZXQuXG4gICAgLy8gTm90ZSB0aGF0IGFuIGlucHV0IGFycmF5IGlzIHJldHVybmVkIGJ5IHJlZmVyZW5jZSFcbiAgICBmdW5jdGlvbiBhc0FycmF5KGEpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYSkgPyBhIDogW2FdO1xuICAgIH1cblxuICAgIC8vIENvdW50cyBkZWNpbWFsc1xuICAgIGZ1bmN0aW9uIGNvdW50RGVjaW1hbHMobnVtU3RyKSB7XG4gICAgICAgIG51bVN0ciA9IFN0cmluZyhudW1TdHIpO1xuICAgICAgICB2YXIgcGllY2VzID0gbnVtU3RyLnNwbGl0KFwiLlwiKTtcbiAgICAgICAgcmV0dXJuIHBpZWNlcy5sZW5ndGggPiAxID8gcGllY2VzWzFdLmxlbmd0aCA6IDA7XG4gICAgfVxuXG4gICAgLy8gaHR0cDovL3lvdW1pZ2h0bm90bmVlZGpxdWVyeS5jb20vI2FkZF9jbGFzc1xuICAgIGZ1bmN0aW9uIGFkZENsYXNzKGVsLCBjbGFzc05hbWUpIHtcbiAgICAgICAgaWYgKGVsLmNsYXNzTGlzdCAmJiAhL1xccy8udGVzdChjbGFzc05hbWUpKSB7XG4gICAgICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbC5jbGFzc05hbWUgKz0gXCIgXCIgKyBjbGFzc05hbWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBodHRwOi8veW91bWlnaHRub3RuZWVkanF1ZXJ5LmNvbS8jcmVtb3ZlX2NsYXNzXG4gICAgZnVuY3Rpb24gcmVtb3ZlQ2xhc3MoZWwsIGNsYXNzTmFtZSkge1xuICAgICAgICBpZiAoZWwuY2xhc3NMaXN0ICYmICEvXFxzLy50ZXN0KGNsYXNzTmFtZSkpIHtcbiAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGVsLmNsYXNzTmFtZSA9IGVsLmNsYXNzTmFtZS5yZXBsYWNlKFxuICAgICAgICAgICAgICAgIG5ldyBSZWdFeHAoXCIoXnxcXFxcYilcIiArIGNsYXNzTmFtZS5zcGxpdChcIiBcIikuam9pbihcInxcIikgKyBcIihcXFxcYnwkKVwiLCBcImdpXCIpLFxuICAgICAgICAgICAgICAgIFwiIFwiXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gaHR0cHM6Ly9wbGFpbmpzLmNvbS9qYXZhc2NyaXB0L2F0dHJpYnV0ZXMvYWRkaW5nLXJlbW92aW5nLWFuZC10ZXN0aW5nLWZvci1jbGFzc2VzLTkvXG4gICAgZnVuY3Rpb24gaGFzQ2xhc3MoZWwsIGNsYXNzTmFtZSkge1xuICAgICAgICByZXR1cm4gZWwuY2xhc3NMaXN0XG4gICAgICAgICAgICA/IGVsLmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpXG4gICAgICAgICAgICA6IG5ldyBSZWdFeHAoXCJcXFxcYlwiICsgY2xhc3NOYW1lICsgXCJcXFxcYlwiKS50ZXN0KGVsLmNsYXNzTmFtZSk7XG4gICAgfVxuXG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1dpbmRvdy9zY3JvbGxZI05vdGVzXG4gICAgZnVuY3Rpb24gZ2V0UGFnZU9mZnNldChkb2MpIHtcbiAgICAgICAgdmFyIHN1cHBvcnRQYWdlT2Zmc2V0ID0gd2luZG93LnBhZ2VYT2Zmc2V0ICE9PSB1bmRlZmluZWQ7XG4gICAgICAgIHZhciBpc0NTUzFDb21wYXQgPSAoZG9jLmNvbXBhdE1vZGUgfHwgXCJcIikgPT09IFwiQ1NTMUNvbXBhdFwiO1xuICAgICAgICB2YXIgeCA9IHN1cHBvcnRQYWdlT2Zmc2V0XG4gICAgICAgICAgICA/IHdpbmRvdy5wYWdlWE9mZnNldFxuICAgICAgICAgICAgOiBpc0NTUzFDb21wYXRcbiAgICAgICAgICAgICAgICA/IGRvYy5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdFxuICAgICAgICAgICAgICAgIDogZG9jLmJvZHkuc2Nyb2xsTGVmdDtcbiAgICAgICAgdmFyIHkgPSBzdXBwb3J0UGFnZU9mZnNldFxuICAgICAgICAgICAgPyB3aW5kb3cucGFnZVlPZmZzZXRcbiAgICAgICAgICAgIDogaXNDU1MxQ29tcGF0XG4gICAgICAgICAgICAgICAgPyBkb2MuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcFxuICAgICAgICAgICAgICAgIDogZG9jLmJvZHkuc2Nyb2xsVG9wO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4OiB4LFxuICAgICAgICAgICAgeTogeVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIHdlIHByb3ZpZGUgYSBmdW5jdGlvbiB0byBjb21wdXRlIGNvbnN0YW50cyBpbnN0ZWFkXG4gICAgLy8gb2YgYWNjZXNzaW5nIHdpbmRvdy4qIGFzIHNvb24gYXMgdGhlIG1vZHVsZSBuZWVkcyBpdFxuICAgIC8vIHNvIHRoYXQgd2UgZG8gbm90IGNvbXB1dGUgYW55dGhpbmcgaWYgbm90IG5lZWRlZFxuICAgIGZ1bmN0aW9uIGdldEFjdGlvbnMoKSB7XG4gICAgICAgIC8vIERldGVybWluZSB0aGUgZXZlbnRzIHRvIGJpbmQuIElFMTEgaW1wbGVtZW50cyBwb2ludGVyRXZlbnRzIHdpdGhvdXRcbiAgICAgICAgLy8gYSBwcmVmaXgsIHdoaWNoIGJyZWFrcyBjb21wYXRpYmlsaXR5IHdpdGggdGhlIElFMTAgaW1wbGVtZW50YXRpb24uXG4gICAgICAgIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnBvaW50ZXJFbmFibGVkXG4gICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgIHN0YXJ0OiBcInBvaW50ZXJkb3duXCIsXG4gICAgICAgICAgICAgICAgICBtb3ZlOiBcInBvaW50ZXJtb3ZlXCIsXG4gICAgICAgICAgICAgICAgICBlbmQ6IFwicG9pbnRlcnVwXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiB3aW5kb3cubmF2aWdhdG9yLm1zUG9pbnRlckVuYWJsZWRcbiAgICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgICAgICBzdGFydDogXCJNU1BvaW50ZXJEb3duXCIsXG4gICAgICAgICAgICAgICAgICAgICAgbW92ZTogXCJNU1BvaW50ZXJNb3ZlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgZW5kOiBcIk1TUG9pbnRlclVwXCJcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICA6IHtcbiAgICAgICAgICAgICAgICAgICAgICBzdGFydDogXCJtb3VzZWRvd24gdG91Y2hzdGFydFwiLFxuICAgICAgICAgICAgICAgICAgICAgIG1vdmU6IFwibW91c2Vtb3ZlIHRvdWNobW92ZVwiLFxuICAgICAgICAgICAgICAgICAgICAgIGVuZDogXCJtb3VzZXVwIHRvdWNoZW5kXCJcbiAgICAgICAgICAgICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL1dJQ0cvRXZlbnRMaXN0ZW5lck9wdGlvbnMvYmxvYi9naC1wYWdlcy9leHBsYWluZXIubWRcbiAgICAvLyBJc3N1ZSAjNzg1XG4gICAgZnVuY3Rpb24gZ2V0U3VwcG9ydHNQYXNzaXZlKCkge1xuICAgICAgICB2YXIgc3VwcG9ydHNQYXNzaXZlID0gZmFsc2U7XG5cbiAgICAgICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBvcHRzID0gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCBcInBhc3NpdmVcIiwge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1cHBvcnRzUGFzc2l2ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidGVzdFwiLCBudWxsLCBvcHRzKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgLyogZXNsaW50LWVuYWJsZSAqL1xuXG4gICAgICAgIHJldHVybiBzdXBwb3J0c1Bhc3NpdmU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U3VwcG9ydHNUb3VjaEFjdGlvbk5vbmUoKSB7XG4gICAgICAgIHJldHVybiB3aW5kb3cuQ1NTICYmIENTUy5zdXBwb3J0cyAmJiBDU1Muc3VwcG9ydHMoXCJ0b3VjaC1hY3Rpb25cIiwgXCJub25lXCIpO1xuICAgIH1cblxuICAgIC8vZW5kcmVnaW9uXG5cbiAgICAvL3JlZ2lvbiBSYW5nZSBDYWxjdWxhdGlvblxuXG4gICAgLy8gRGV0ZXJtaW5lIHRoZSBzaXplIG9mIGEgc3ViLXJhbmdlIGluIHJlbGF0aW9uIHRvIGEgZnVsbCByYW5nZS5cbiAgICBmdW5jdGlvbiBzdWJSYW5nZVJhdGlvKHBhLCBwYikge1xuICAgICAgICByZXR1cm4gMTAwIC8gKHBiIC0gcGEpO1xuICAgIH1cblxuICAgIC8vIChwZXJjZW50YWdlKSBIb3cgbWFueSBwZXJjZW50IGlzIHRoaXMgdmFsdWUgb2YgdGhpcyByYW5nZT9cbiAgICBmdW5jdGlvbiBmcm9tUGVyY2VudGFnZShyYW5nZSwgdmFsdWUsIHN0YXJ0UmFuZ2UpIHtcbiAgICAgICAgcmV0dXJuICh2YWx1ZSAqIDEwMCkgLyAocmFuZ2Vbc3RhcnRSYW5nZSArIDFdIC0gcmFuZ2Vbc3RhcnRSYW5nZV0pO1xuICAgIH1cblxuICAgIC8vIChwZXJjZW50YWdlKSBXaGVyZSBpcyB0aGlzIHZhbHVlIG9uIHRoaXMgcmFuZ2U/XG4gICAgZnVuY3Rpb24gdG9QZXJjZW50YWdlKHJhbmdlLCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gZnJvbVBlcmNlbnRhZ2UocmFuZ2UsIHJhbmdlWzBdIDwgMCA/IHZhbHVlICsgTWF0aC5hYnMocmFuZ2VbMF0pIDogdmFsdWUgLSByYW5nZVswXSwgMCk7XG4gICAgfVxuXG4gICAgLy8gKHZhbHVlKSBIb3cgbXVjaCBpcyB0aGlzIHBlcmNlbnRhZ2Ugb24gdGhpcyByYW5nZT9cbiAgICBmdW5jdGlvbiBpc1BlcmNlbnRhZ2UocmFuZ2UsIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAodmFsdWUgKiAocmFuZ2VbMV0gLSByYW5nZVswXSkpIC8gMTAwICsgcmFuZ2VbMF07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Sih2YWx1ZSwgYXJyKSB7XG4gICAgICAgIHZhciBqID0gMTtcblxuICAgICAgICB3aGlsZSAodmFsdWUgPj0gYXJyW2pdKSB7XG4gICAgICAgICAgICBqICs9IDE7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gajtcbiAgICB9XG5cbiAgICAvLyAocGVyY2VudGFnZSkgSW5wdXQgYSB2YWx1ZSwgZmluZCB3aGVyZSwgb24gYSBzY2FsZSBvZiAwLTEwMCwgaXQgYXBwbGllcy5cbiAgICBmdW5jdGlvbiB0b1N0ZXBwaW5nKHhWYWwsIHhQY3QsIHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSA+PSB4VmFsLnNsaWNlKC0xKVswXSkge1xuICAgICAgICAgICAgcmV0dXJuIDEwMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBqID0gZ2V0Sih2YWx1ZSwgeFZhbCk7XG4gICAgICAgIHZhciB2YSA9IHhWYWxbaiAtIDFdO1xuICAgICAgICB2YXIgdmIgPSB4VmFsW2pdO1xuICAgICAgICB2YXIgcGEgPSB4UGN0W2ogLSAxXTtcbiAgICAgICAgdmFyIHBiID0geFBjdFtqXTtcblxuICAgICAgICByZXR1cm4gcGEgKyB0b1BlcmNlbnRhZ2UoW3ZhLCB2Yl0sIHZhbHVlKSAvIHN1YlJhbmdlUmF0aW8ocGEsIHBiKTtcbiAgICB9XG5cbiAgICAvLyAodmFsdWUpIElucHV0IGEgcGVyY2VudGFnZSwgZmluZCB3aGVyZSBpdCBpcyBvbiB0aGUgc3BlY2lmaWVkIHJhbmdlLlxuICAgIGZ1bmN0aW9uIGZyb21TdGVwcGluZyh4VmFsLCB4UGN0LCB2YWx1ZSkge1xuICAgICAgICAvLyBUaGVyZSBpcyBubyByYW5nZSBncm91cCB0aGF0IGZpdHMgMTAwXG4gICAgICAgIGlmICh2YWx1ZSA+PSAxMDApIHtcbiAgICAgICAgICAgIHJldHVybiB4VmFsLnNsaWNlKC0xKVswXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBqID0gZ2V0Sih2YWx1ZSwgeFBjdCk7XG4gICAgICAgIHZhciB2YSA9IHhWYWxbaiAtIDFdO1xuICAgICAgICB2YXIgdmIgPSB4VmFsW2pdO1xuICAgICAgICB2YXIgcGEgPSB4UGN0W2ogLSAxXTtcbiAgICAgICAgdmFyIHBiID0geFBjdFtqXTtcblxuICAgICAgICByZXR1cm4gaXNQZXJjZW50YWdlKFt2YSwgdmJdLCAodmFsdWUgLSBwYSkgKiBzdWJSYW5nZVJhdGlvKHBhLCBwYikpO1xuICAgIH1cblxuICAgIC8vIChwZXJjZW50YWdlKSBHZXQgdGhlIHN0ZXAgdGhhdCBhcHBsaWVzIGF0IGEgY2VydGFpbiB2YWx1ZS5cbiAgICBmdW5jdGlvbiBnZXRTdGVwKHhQY3QsIHhTdGVwcywgc25hcCwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlID09PSAxMDApIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBqID0gZ2V0Sih2YWx1ZSwgeFBjdCk7XG4gICAgICAgIHZhciBhID0geFBjdFtqIC0gMV07XG4gICAgICAgIHZhciBiID0geFBjdFtqXTtcblxuICAgICAgICAvLyBJZiAnc25hcCcgaXMgc2V0LCBzdGVwcyBhcmUgdXNlZCBhcyBmaXhlZCBwb2ludHMgb24gdGhlIHNsaWRlci5cbiAgICAgICAgaWYgKHNuYXApIHtcbiAgICAgICAgICAgIC8vIEZpbmQgdGhlIGNsb3Nlc3QgcG9zaXRpb24sIGEgb3IgYi5cbiAgICAgICAgICAgIGlmICh2YWx1ZSAtIGEgPiAoYiAtIGEpIC8gMikge1xuICAgICAgICAgICAgICAgIHJldHVybiBiO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgheFN0ZXBzW2ogLSAxXSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHhQY3RbaiAtIDFdICsgY2xvc2VzdCh2YWx1ZSAtIHhQY3RbaiAtIDFdLCB4U3RlcHNbaiAtIDFdKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVFbnRyeVBvaW50KGluZGV4LCB2YWx1ZSwgdGhhdCkge1xuICAgICAgICB2YXIgcGVyY2VudGFnZTtcblxuICAgICAgICAvLyBXcmFwIG51bWVyaWNhbCBpbnB1dCBpbiBhbiBhcnJheS5cbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgdmFsdWUgPSBbdmFsdWVdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmVqZWN0IGFueSBpbnZhbGlkIGlucHV0LCBieSB0ZXN0aW5nIHdoZXRoZXIgdmFsdWUgaXMgYW4gYXJyYXkuXG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ3JhbmdlJyBjb250YWlucyBpbnZhbGlkIHZhbHVlLlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENvdmVydCBtaW4vbWF4IHN5bnRheCB0byAwIGFuZCAxMDAuXG4gICAgICAgIGlmIChpbmRleCA9PT0gXCJtaW5cIikge1xuICAgICAgICAgICAgcGVyY2VudGFnZSA9IDA7XG4gICAgICAgIH0gZWxzZSBpZiAoaW5kZXggPT09IFwibWF4XCIpIHtcbiAgICAgICAgICAgIHBlcmNlbnRhZ2UgPSAxMDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZXJjZW50YWdlID0gcGFyc2VGbG9hdChpbmRleCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDaGVjayBmb3IgY29ycmVjdCBpbnB1dC5cbiAgICAgICAgaWYgKCFpc051bWVyaWMocGVyY2VudGFnZSkgfHwgIWlzTnVtZXJpYyh2YWx1ZVswXSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ3JhbmdlJyB2YWx1ZSBpc24ndCBudW1lcmljLlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFN0b3JlIHZhbHVlcy5cbiAgICAgICAgdGhhdC54UGN0LnB1c2gocGVyY2VudGFnZSk7XG4gICAgICAgIHRoYXQueFZhbC5wdXNoKHZhbHVlWzBdKTtcblxuICAgICAgICAvLyBOYU4gd2lsbCBldmFsdWF0ZSB0byBmYWxzZSB0b28sIGJ1dCB0byBrZWVwXG4gICAgICAgIC8vIGxvZ2dpbmcgY2xlYXIsIHNldCBzdGVwIGV4cGxpY2l0bHkuIE1ha2Ugc3VyZVxuICAgICAgICAvLyBub3QgdG8gb3ZlcnJpZGUgdGhlICdzdGVwJyBzZXR0aW5nIHdpdGggZmFsc2UuXG4gICAgICAgIGlmICghcGVyY2VudGFnZSkge1xuICAgICAgICAgICAgaWYgKCFpc05hTih2YWx1ZVsxXSkpIHtcbiAgICAgICAgICAgICAgICB0aGF0LnhTdGVwc1swXSA9IHZhbHVlWzFdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhhdC54U3RlcHMucHVzaChpc05hTih2YWx1ZVsxXSkgPyBmYWxzZSA6IHZhbHVlWzFdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoYXQueEhpZ2hlc3RDb21wbGV0ZVN0ZXAucHVzaCgwKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVTdGVwUG9pbnQoaSwgbiwgdGhhdCkge1xuICAgICAgICAvLyBJZ25vcmUgJ2ZhbHNlJyBzdGVwcGluZy5cbiAgICAgICAgaWYgKCFuKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTdGVwIG92ZXIgemVyby1sZW5ndGggcmFuZ2VzICgjOTQ4KTtcbiAgICAgICAgaWYgKHRoYXQueFZhbFtpXSA9PT0gdGhhdC54VmFsW2kgKyAxXSkge1xuICAgICAgICAgICAgdGhhdC54U3RlcHNbaV0gPSB0aGF0LnhIaWdoZXN0Q29tcGxldGVTdGVwW2ldID0gdGhhdC54VmFsW2ldO1xuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBGYWN0b3IgdG8gcmFuZ2UgcmF0aW9cbiAgICAgICAgdGhhdC54U3RlcHNbaV0gPVxuICAgICAgICAgICAgZnJvbVBlcmNlbnRhZ2UoW3RoYXQueFZhbFtpXSwgdGhhdC54VmFsW2kgKyAxXV0sIG4sIDApIC8gc3ViUmFuZ2VSYXRpbyh0aGF0LnhQY3RbaV0sIHRoYXQueFBjdFtpICsgMV0pO1xuXG4gICAgICAgIHZhciB0b3RhbFN0ZXBzID0gKHRoYXQueFZhbFtpICsgMV0gLSB0aGF0LnhWYWxbaV0pIC8gdGhhdC54TnVtU3RlcHNbaV07XG4gICAgICAgIHZhciBoaWdoZXN0U3RlcCA9IE1hdGguY2VpbChOdW1iZXIodG90YWxTdGVwcy50b0ZpeGVkKDMpKSAtIDEpO1xuICAgICAgICB2YXIgc3RlcCA9IHRoYXQueFZhbFtpXSArIHRoYXQueE51bVN0ZXBzW2ldICogaGlnaGVzdFN0ZXA7XG5cbiAgICAgICAgdGhhdC54SGlnaGVzdENvbXBsZXRlU3RlcFtpXSA9IHN0ZXA7XG4gICAgfVxuXG4gICAgLy9lbmRyZWdpb25cblxuICAgIC8vcmVnaW9uIFNwZWN0cnVtXG5cbiAgICBmdW5jdGlvbiBTcGVjdHJ1bShlbnRyeSwgc25hcCwgc2luZ2xlU3RlcCkge1xuICAgICAgICB0aGlzLnhQY3QgPSBbXTtcbiAgICAgICAgdGhpcy54VmFsID0gW107XG4gICAgICAgIHRoaXMueFN0ZXBzID0gW3NpbmdsZVN0ZXAgfHwgZmFsc2VdO1xuICAgICAgICB0aGlzLnhOdW1TdGVwcyA9IFtmYWxzZV07XG4gICAgICAgIHRoaXMueEhpZ2hlc3RDb21wbGV0ZVN0ZXAgPSBbXTtcblxuICAgICAgICB0aGlzLnNuYXAgPSBzbmFwO1xuXG4gICAgICAgIHZhciBpbmRleDtcbiAgICAgICAgdmFyIG9yZGVyZWQgPSBbXTsgLy8gWzAsICdtaW4nXSwgWzEsICc1MCUnXSwgWzIsICdtYXgnXVxuXG4gICAgICAgIC8vIE1hcCB0aGUgb2JqZWN0IGtleXMgdG8gYW4gYXJyYXkuXG4gICAgICAgIGZvciAoaW5kZXggaW4gZW50cnkpIHtcbiAgICAgICAgICAgIGlmIChlbnRyeS5oYXNPd25Qcm9wZXJ0eShpbmRleCkpIHtcbiAgICAgICAgICAgICAgICBvcmRlcmVkLnB1c2goW2VudHJ5W2luZGV4XSwgaW5kZXhdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNvcnQgYWxsIGVudHJpZXMgYnkgdmFsdWUgKG51bWVyaWMgc29ydCkuXG4gICAgICAgIGlmIChvcmRlcmVkLmxlbmd0aCAmJiB0eXBlb2Ygb3JkZXJlZFswXVswXSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgb3JkZXJlZC5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYVswXVswXSAtIGJbMF1bMF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9yZGVyZWQuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFbMF0gLSBiWzBdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDb252ZXJ0IGFsbCBlbnRyaWVzIHRvIHN1YnJhbmdlcy5cbiAgICAgICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgb3JkZXJlZC5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgIGhhbmRsZUVudHJ5UG9pbnQob3JkZXJlZFtpbmRleF1bMV0sIG9yZGVyZWRbaW5kZXhdWzBdLCB0aGlzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFN0b3JlIHRoZSBhY3R1YWwgc3RlcCB2YWx1ZXMuXG4gICAgICAgIC8vIHhTdGVwcyBpcyBzb3J0ZWQgaW4gdGhlIHNhbWUgb3JkZXIgYXMgeFBjdCBhbmQgeFZhbC5cbiAgICAgICAgdGhpcy54TnVtU3RlcHMgPSB0aGlzLnhTdGVwcy5zbGljZSgwKTtcblxuICAgICAgICAvLyBDb252ZXJ0IGFsbCBudW1lcmljIHN0ZXBzIHRvIHRoZSBwZXJjZW50YWdlIG9mIHRoZSBzdWJyYW5nZSB0aGV5IHJlcHJlc2VudC5cbiAgICAgICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgdGhpcy54TnVtU3RlcHMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICBoYW5kbGVTdGVwUG9pbnQoaW5kZXgsIHRoaXMueE51bVN0ZXBzW2luZGV4XSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBTcGVjdHJ1bS5wcm90b3R5cGUuZ2V0RGlzdGFuY2UgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICB2YXIgaW5kZXg7XG4gICAgICAgIHZhciBkaXN0YW5jZXMgPSBbXTtcblxuICAgICAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLnhOdW1TdGVwcy5sZW5ndGggLSAxOyBpbmRleCsrKSB7XG4gICAgICAgICAgICAvLyBsYXN0IFwicmFuZ2VcIiBjYW4ndCBjb250YWluIHN0ZXAgc2l6ZSBhcyBpdCBpcyBwdXJlbHkgYW4gZW5kcG9pbnQuXG4gICAgICAgICAgICB2YXIgc3RlcCA9IHRoaXMueE51bVN0ZXBzW2luZGV4XTtcblxuICAgICAgICAgICAgaWYgKHN0ZXAgJiYgKHZhbHVlIC8gc3RlcCkgJSAxICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgICAgICBcIm5vVWlTbGlkZXIgKFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgIFZFUlNJT04gK1xuICAgICAgICAgICAgICAgICAgICAgICAgXCIpOiAnbGltaXQnLCAnbWFyZ2luJyBhbmQgJ3BhZGRpbmcnIG9mIFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMueFBjdFtpbmRleF0gK1xuICAgICAgICAgICAgICAgICAgICAgICAgXCIlIHJhbmdlIG11c3QgYmUgZGl2aXNpYmxlIGJ5IHN0ZXAuXCJcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBDYWxjdWxhdGUgcGVyY2VudHVhbCBkaXN0YW5jZSBpbiBjdXJyZW50IHJhbmdlIG9mIGxpbWl0LCBtYXJnaW4gb3IgcGFkZGluZ1xuICAgICAgICAgICAgZGlzdGFuY2VzW2luZGV4XSA9IGZyb21QZXJjZW50YWdlKHRoaXMueFZhbCwgdmFsdWUsIGluZGV4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkaXN0YW5jZXM7XG4gICAgfTtcblxuICAgIC8vIENhbGN1bGF0ZSB0aGUgcGVyY2VudHVhbCBkaXN0YW5jZSBvdmVyIHRoZSB3aG9sZSBzY2FsZSBvZiByYW5nZXMuXG4gICAgLy8gZGlyZWN0aW9uOiAwID0gYmFja3dhcmRzIC8gMSA9IGZvcndhcmRzXG4gICAgU3BlY3RydW0ucHJvdG90eXBlLmdldEFic29sdXRlRGlzdGFuY2UgPSBmdW5jdGlvbih2YWx1ZSwgZGlzdGFuY2VzLCBkaXJlY3Rpb24pIHtcbiAgICAgICAgdmFyIHhQY3RfaW5kZXggPSAwO1xuXG4gICAgICAgIC8vIENhbGN1bGF0ZSByYW5nZSB3aGVyZSB0byBzdGFydCBjYWxjdWxhdGlvblxuICAgICAgICBpZiAodmFsdWUgPCB0aGlzLnhQY3RbdGhpcy54UGN0Lmxlbmd0aCAtIDFdKSB7XG4gICAgICAgICAgICB3aGlsZSAodmFsdWUgPiB0aGlzLnhQY3RbeFBjdF9pbmRleCArIDFdKSB7XG4gICAgICAgICAgICAgICAgeFBjdF9pbmRleCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHZhbHVlID09PSB0aGlzLnhQY3RbdGhpcy54UGN0Lmxlbmd0aCAtIDFdKSB7XG4gICAgICAgICAgICB4UGN0X2luZGV4ID0gdGhpcy54UGN0Lmxlbmd0aCAtIDI7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiBsb29raW5nIGJhY2t3YXJkcyBhbmQgdGhlIHZhbHVlIGlzIGV4YWN0bHkgYXQgYSByYW5nZSBzZXBhcmF0b3IgdGhlbiBsb29rIG9uZSByYW5nZSBmdXJ0aGVyXG4gICAgICAgIGlmICghZGlyZWN0aW9uICYmIHZhbHVlID09PSB0aGlzLnhQY3RbeFBjdF9pbmRleCArIDFdKSB7XG4gICAgICAgICAgICB4UGN0X2luZGV4Kys7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc3RhcnRfZmFjdG9yO1xuICAgICAgICB2YXIgcmVzdF9mYWN0b3IgPSAxO1xuXG4gICAgICAgIHZhciByZXN0X3JlbF9kaXN0YW5jZSA9IGRpc3RhbmNlc1t4UGN0X2luZGV4XTtcblxuICAgICAgICB2YXIgcmFuZ2VfcGN0ID0gMDtcblxuICAgICAgICB2YXIgcmVsX3JhbmdlX2Rpc3RhbmNlID0gMDtcbiAgICAgICAgdmFyIGFic19kaXN0YW5jZV9jb3VudGVyID0gMDtcbiAgICAgICAgdmFyIHJhbmdlX2NvdW50ZXIgPSAwO1xuXG4gICAgICAgIC8vIENhbGN1bGF0ZSB3aGF0IHBhcnQgb2YgdGhlIHN0YXJ0IHJhbmdlIHRoZSB2YWx1ZSBpc1xuICAgICAgICBpZiAoZGlyZWN0aW9uKSB7XG4gICAgICAgICAgICBzdGFydF9mYWN0b3IgPSAodmFsdWUgLSB0aGlzLnhQY3RbeFBjdF9pbmRleF0pIC8gKHRoaXMueFBjdFt4UGN0X2luZGV4ICsgMV0gLSB0aGlzLnhQY3RbeFBjdF9pbmRleF0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RhcnRfZmFjdG9yID0gKHRoaXMueFBjdFt4UGN0X2luZGV4ICsgMV0gLSB2YWx1ZSkgLyAodGhpcy54UGN0W3hQY3RfaW5kZXggKyAxXSAtIHRoaXMueFBjdFt4UGN0X2luZGV4XSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBEbyB1bnRpbCB0aGUgY29tcGxldGUgZGlzdGFuY2UgYWNyb3NzIHJhbmdlcyBpcyBjYWxjdWxhdGVkXG4gICAgICAgIHdoaWxlIChyZXN0X3JlbF9kaXN0YW5jZSA+IDApIHtcbiAgICAgICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgcGVyY2VudGFnZSBvZiB0b3RhbCByYW5nZVxuICAgICAgICAgICAgcmFuZ2VfcGN0ID0gdGhpcy54UGN0W3hQY3RfaW5kZXggKyAxICsgcmFuZ2VfY291bnRlcl0gLSB0aGlzLnhQY3RbeFBjdF9pbmRleCArIHJhbmdlX2NvdW50ZXJdO1xuXG4gICAgICAgICAgICAvLyBEZXRlY3QgaWYgdGhlIG1hcmdpbiwgcGFkZGluZyBvciBsaW1pdCBpcyBsYXJnZXIgdGhlbiB0aGUgY3VycmVudCByYW5nZSBhbmQgY2FsY3VsYXRlXG4gICAgICAgICAgICBpZiAoZGlzdGFuY2VzW3hQY3RfaW5kZXggKyByYW5nZV9jb3VudGVyXSAqIHJlc3RfZmFjdG9yICsgMTAwIC0gc3RhcnRfZmFjdG9yICogMTAwID4gMTAwKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgbGFyZ2VyIHRoZW4gdGFrZSB0aGUgcGVyY2VudHVhbCBkaXN0YW5jZSBvZiB0aGUgd2hvbGUgcmFuZ2VcbiAgICAgICAgICAgICAgICByZWxfcmFuZ2VfZGlzdGFuY2UgPSByYW5nZV9wY3QgKiBzdGFydF9mYWN0b3I7XG4gICAgICAgICAgICAgICAgLy8gUmVzdCBmYWN0b3Igb2YgcmVsYXRpdmUgcGVyY2VudHVhbCBkaXN0YW5jZSBzdGlsbCB0byBiZSBjYWxjdWxhdGVkXG4gICAgICAgICAgICAgICAgcmVzdF9mYWN0b3IgPSAocmVzdF9yZWxfZGlzdGFuY2UgLSAxMDAgKiBzdGFydF9mYWN0b3IpIC8gZGlzdGFuY2VzW3hQY3RfaW5kZXggKyByYW5nZV9jb3VudGVyXTtcbiAgICAgICAgICAgICAgICAvLyBTZXQgc3RhcnQgZmFjdG9yIHRvIDEgYXMgZm9yIG5leHQgcmFuZ2UgaXQgZG9lcyBub3QgYXBwbHkuXG4gICAgICAgICAgICAgICAgc3RhcnRfZmFjdG9yID0gMTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgc21hbGxlciBvciBlcXVhbCB0aGVuIHRha2UgdGhlIHBlcmNlbnR1YWwgZGlzdGFuY2Ugb2YgdGhlIGNhbGN1bGF0ZSBwZXJjZW50dWFsIHBhcnQgb2YgdGhhdCByYW5nZVxuICAgICAgICAgICAgICAgIHJlbF9yYW5nZV9kaXN0YW5jZSA9ICgoZGlzdGFuY2VzW3hQY3RfaW5kZXggKyByYW5nZV9jb3VudGVyXSAqIHJhbmdlX3BjdCkgLyAxMDApICogcmVzdF9mYWN0b3I7XG4gICAgICAgICAgICAgICAgLy8gTm8gcmVzdCBsZWZ0IGFzIHRoZSByZXN0IGZpdHMgaW4gY3VycmVudCByYW5nZVxuICAgICAgICAgICAgICAgIHJlc3RfZmFjdG9yID0gMDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGRpcmVjdGlvbikge1xuICAgICAgICAgICAgICAgIGFic19kaXN0YW5jZV9jb3VudGVyID0gYWJzX2Rpc3RhbmNlX2NvdW50ZXIgLSByZWxfcmFuZ2VfZGlzdGFuY2U7XG4gICAgICAgICAgICAgICAgLy8gTGltaXQgcmFuZ2UgdG8gZmlyc3QgcmFuZ2Ugd2hlbiBkaXN0YW5jZSBiZWNvbWVzIG91dHNpZGUgb2YgbWluaW11bSByYW5nZVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnhQY3QubGVuZ3RoICsgcmFuZ2VfY291bnRlciA+PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlX2NvdW50ZXItLTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFic19kaXN0YW5jZV9jb3VudGVyID0gYWJzX2Rpc3RhbmNlX2NvdW50ZXIgKyByZWxfcmFuZ2VfZGlzdGFuY2U7XG4gICAgICAgICAgICAgICAgLy8gTGltaXQgcmFuZ2UgdG8gbGFzdCByYW5nZSB3aGVuIGRpc3RhbmNlIGJlY29tZXMgb3V0c2lkZSBvZiBtYXhpbXVtIHJhbmdlXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMueFBjdC5sZW5ndGggLSByYW5nZV9jb3VudGVyID49IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2VfY291bnRlcisrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gUmVzdCBvZiByZWxhdGl2ZSBwZXJjZW50dWFsIGRpc3RhbmNlIHN0aWxsIHRvIGJlIGNhbGN1bGF0ZWRcbiAgICAgICAgICAgIHJlc3RfcmVsX2Rpc3RhbmNlID0gZGlzdGFuY2VzW3hQY3RfaW5kZXggKyByYW5nZV9jb3VudGVyXSAqIHJlc3RfZmFjdG9yO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZhbHVlICsgYWJzX2Rpc3RhbmNlX2NvdW50ZXI7XG4gICAgfTtcblxuICAgIFNwZWN0cnVtLnByb3RvdHlwZS50b1N0ZXBwaW5nID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdmFsdWUgPSB0b1N0ZXBwaW5nKHRoaXMueFZhbCwgdGhpcy54UGN0LCB2YWx1ZSk7XG5cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH07XG5cbiAgICBTcGVjdHJ1bS5wcm90b3R5cGUuZnJvbVN0ZXBwaW5nID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGZyb21TdGVwcGluZyh0aGlzLnhWYWwsIHRoaXMueFBjdCwgdmFsdWUpO1xuICAgIH07XG5cbiAgICBTcGVjdHJ1bS5wcm90b3R5cGUuZ2V0U3RlcCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHZhbHVlID0gZ2V0U3RlcCh0aGlzLnhQY3QsIHRoaXMueFN0ZXBzLCB0aGlzLnNuYXAsIHZhbHVlKTtcblxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfTtcblxuICAgIFNwZWN0cnVtLnByb3RvdHlwZS5nZXREZWZhdWx0U3RlcCA9IGZ1bmN0aW9uKHZhbHVlLCBpc0Rvd24sIHNpemUpIHtcbiAgICAgICAgdmFyIGogPSBnZXRKKHZhbHVlLCB0aGlzLnhQY3QpO1xuXG4gICAgICAgIC8vIFdoZW4gYXQgdGhlIHRvcCBvciBzdGVwcGluZyBkb3duLCBsb29rIGF0IHRoZSBwcmV2aW91cyBzdWItcmFuZ2VcbiAgICAgICAgaWYgKHZhbHVlID09PSAxMDAgfHwgKGlzRG93biAmJiB2YWx1ZSA9PT0gdGhpcy54UGN0W2ogLSAxXSkpIHtcbiAgICAgICAgICAgIGogPSBNYXRoLm1heChqIC0gMSwgMSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKHRoaXMueFZhbFtqXSAtIHRoaXMueFZhbFtqIC0gMV0pIC8gc2l6ZTtcbiAgICB9O1xuXG4gICAgU3BlY3RydW0ucHJvdG90eXBlLmdldE5lYXJieVN0ZXBzID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdmFyIGogPSBnZXRKKHZhbHVlLCB0aGlzLnhQY3QpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdGVwQmVmb3JlOiB7XG4gICAgICAgICAgICAgICAgc3RhcnRWYWx1ZTogdGhpcy54VmFsW2ogLSAyXSxcbiAgICAgICAgICAgICAgICBzdGVwOiB0aGlzLnhOdW1TdGVwc1tqIC0gMl0sXG4gICAgICAgICAgICAgICAgaGlnaGVzdFN0ZXA6IHRoaXMueEhpZ2hlc3RDb21wbGV0ZVN0ZXBbaiAtIDJdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGhpc1N0ZXA6IHtcbiAgICAgICAgICAgICAgICBzdGFydFZhbHVlOiB0aGlzLnhWYWxbaiAtIDFdLFxuICAgICAgICAgICAgICAgIHN0ZXA6IHRoaXMueE51bVN0ZXBzW2ogLSAxXSxcbiAgICAgICAgICAgICAgICBoaWdoZXN0U3RlcDogdGhpcy54SGlnaGVzdENvbXBsZXRlU3RlcFtqIC0gMV1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdGVwQWZ0ZXI6IHtcbiAgICAgICAgICAgICAgICBzdGFydFZhbHVlOiB0aGlzLnhWYWxbal0sXG4gICAgICAgICAgICAgICAgc3RlcDogdGhpcy54TnVtU3RlcHNbal0sXG4gICAgICAgICAgICAgICAgaGlnaGVzdFN0ZXA6IHRoaXMueEhpZ2hlc3RDb21wbGV0ZVN0ZXBbal1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9O1xuXG4gICAgU3BlY3RydW0ucHJvdG90eXBlLmNvdW50U3RlcERlY2ltYWxzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBzdGVwRGVjaW1hbHMgPSB0aGlzLnhOdW1TdGVwcy5tYXAoY291bnREZWNpbWFscyk7XG4gICAgICAgIHJldHVybiBNYXRoLm1heC5hcHBseShudWxsLCBzdGVwRGVjaW1hbHMpO1xuICAgIH07XG5cbiAgICAvLyBPdXRzaWRlIHRlc3RpbmdcbiAgICBTcGVjdHJ1bS5wcm90b3R5cGUuY29udmVydCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFN0ZXAodGhpcy50b1N0ZXBwaW5nKHZhbHVlKSk7XG4gICAgfTtcblxuICAgIC8vZW5kcmVnaW9uXG5cbiAgICAvL3JlZ2lvbiBPcHRpb25zXG5cbiAgICAvKlx0RXZlcnkgaW5wdXQgb3B0aW9uIGlzIHRlc3RlZCBhbmQgcGFyc2VkLiBUaGlzJ2xsIHByZXZlbnRcbiAgICAgICAgZW5kbGVzcyB2YWxpZGF0aW9uIGluIGludGVybmFsIG1ldGhvZHMuIFRoZXNlIHRlc3RzIGFyZVxuICAgICAgICBzdHJ1Y3R1cmVkIHdpdGggYW4gaXRlbSBmb3IgZXZlcnkgb3B0aW9uIGF2YWlsYWJsZS4gQW5cbiAgICAgICAgb3B0aW9uIGNhbiBiZSBtYXJrZWQgYXMgcmVxdWlyZWQgYnkgc2V0dGluZyB0aGUgJ3InIGZsYWcuXG4gICAgICAgIFRoZSB0ZXN0aW5nIGZ1bmN0aW9uIGlzIHByb3ZpZGVkIHdpdGggdGhyZWUgYXJndW1lbnRzOlxuICAgICAgICAgICAgLSBUaGUgcHJvdmlkZWQgdmFsdWUgZm9yIHRoZSBvcHRpb247XG4gICAgICAgICAgICAtIEEgcmVmZXJlbmNlIHRvIHRoZSBvcHRpb25zIG9iamVjdDtcbiAgICAgICAgICAgIC0gVGhlIG5hbWUgZm9yIHRoZSBvcHRpb247XG5cbiAgICAgICAgVGhlIHRlc3RpbmcgZnVuY3Rpb24gcmV0dXJucyBmYWxzZSB3aGVuIGFuIGVycm9yIGlzIGRldGVjdGVkLFxuICAgICAgICBvciB0cnVlIHdoZW4gZXZlcnl0aGluZyBpcyBPSy4gSXQgY2FuIGFsc28gbW9kaWZ5IHRoZSBvcHRpb25cbiAgICAgICAgb2JqZWN0LCB0byBtYWtlIHN1cmUgYWxsIHZhbHVlcyBjYW4gYmUgY29ycmVjdGx5IGxvb3BlZCBlbHNld2hlcmUuICovXG5cbiAgICAvL3JlZ2lvbiBEZWZhdWx0c1xuXG4gICAgdmFyIGRlZmF1bHRGb3JtYXR0ZXIgPSB7XG4gICAgICAgIHRvOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUudG9GaXhlZCgyKTtcbiAgICAgICAgfSxcbiAgICAgICAgZnJvbTogTnVtYmVyXG4gICAgfTtcblxuICAgIHZhciBjc3NDbGFzc2VzID0ge1xuICAgICAgICB0YXJnZXQ6IFwidGFyZ2V0XCIsXG4gICAgICAgIGJhc2U6IFwiYmFzZVwiLFxuICAgICAgICBvcmlnaW46IFwib3JpZ2luXCIsXG4gICAgICAgIGhhbmRsZTogXCJoYW5kbGVcIixcbiAgICAgICAgaGFuZGxlTG93ZXI6IFwiaGFuZGxlLWxvd2VyXCIsXG4gICAgICAgIGhhbmRsZVVwcGVyOiBcImhhbmRsZS11cHBlclwiLFxuICAgICAgICB0b3VjaEFyZWE6IFwidG91Y2gtYXJlYVwiLFxuICAgICAgICBob3Jpem9udGFsOiBcImhvcml6b250YWxcIixcbiAgICAgICAgdmVydGljYWw6IFwidmVydGljYWxcIixcbiAgICAgICAgYmFja2dyb3VuZDogXCJiYWNrZ3JvdW5kXCIsXG4gICAgICAgIGNvbm5lY3Q6IFwiY29ubmVjdFwiLFxuICAgICAgICBjb25uZWN0czogXCJjb25uZWN0c1wiLFxuICAgICAgICBsdHI6IFwibHRyXCIsXG4gICAgICAgIHJ0bDogXCJydGxcIixcbiAgICAgICAgdGV4dERpcmVjdGlvbkx0cjogXCJ0eHQtZGlyLWx0clwiLFxuICAgICAgICB0ZXh0RGlyZWN0aW9uUnRsOiBcInR4dC1kaXItcnRsXCIsXG4gICAgICAgIGRyYWdnYWJsZTogXCJkcmFnZ2FibGVcIixcbiAgICAgICAgZHJhZzogXCJzdGF0ZS1kcmFnXCIsXG4gICAgICAgIHRhcDogXCJzdGF0ZS10YXBcIixcbiAgICAgICAgYWN0aXZlOiBcImFjdGl2ZVwiLFxuICAgICAgICB0b29sdGlwOiBcInRvb2x0aXBcIixcbiAgICAgICAgcGlwczogXCJwaXBzXCIsXG4gICAgICAgIHBpcHNIb3Jpem9udGFsOiBcInBpcHMtaG9yaXpvbnRhbFwiLFxuICAgICAgICBwaXBzVmVydGljYWw6IFwicGlwcy12ZXJ0aWNhbFwiLFxuICAgICAgICBtYXJrZXI6IFwibWFya2VyXCIsXG4gICAgICAgIG1hcmtlckhvcml6b250YWw6IFwibWFya2VyLWhvcml6b250YWxcIixcbiAgICAgICAgbWFya2VyVmVydGljYWw6IFwibWFya2VyLXZlcnRpY2FsXCIsXG4gICAgICAgIG1hcmtlck5vcm1hbDogXCJtYXJrZXItbm9ybWFsXCIsXG4gICAgICAgIG1hcmtlckxhcmdlOiBcIm1hcmtlci1sYXJnZVwiLFxuICAgICAgICBtYXJrZXJTdWI6IFwibWFya2VyLXN1YlwiLFxuICAgICAgICB2YWx1ZTogXCJ2YWx1ZVwiLFxuICAgICAgICB2YWx1ZUhvcml6b250YWw6IFwidmFsdWUtaG9yaXpvbnRhbFwiLFxuICAgICAgICB2YWx1ZVZlcnRpY2FsOiBcInZhbHVlLXZlcnRpY2FsXCIsXG4gICAgICAgIHZhbHVlTm9ybWFsOiBcInZhbHVlLW5vcm1hbFwiLFxuICAgICAgICB2YWx1ZUxhcmdlOiBcInZhbHVlLWxhcmdlXCIsXG4gICAgICAgIHZhbHVlU3ViOiBcInZhbHVlLXN1YlwiXG4gICAgfTtcblxuICAgIC8vZW5kcmVnaW9uXG5cbiAgICBmdW5jdGlvbiB2YWxpZGF0ZUZvcm1hdChlbnRyeSkge1xuICAgICAgICAvLyBBbnkgb2JqZWN0IHdpdGggYSB0byBhbmQgZnJvbSBtZXRob2QgaXMgc3VwcG9ydGVkLlxuICAgICAgICBpZiAoaXNWYWxpZEZvcm1hdHRlcihlbnRyeSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAnZm9ybWF0JyByZXF1aXJlcyAndG8nIGFuZCAnZnJvbScgbWV0aG9kcy5cIik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGVzdFN0ZXAocGFyc2VkLCBlbnRyeSkge1xuICAgICAgICBpZiAoIWlzTnVtZXJpYyhlbnRyeSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ3N0ZXAnIGlzIG5vdCBudW1lcmljLlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoZSBzdGVwIG9wdGlvbiBjYW4gc3RpbGwgYmUgdXNlZCB0byBzZXQgc3RlcHBpbmdcbiAgICAgICAgLy8gZm9yIGxpbmVhciBzbGlkZXJzLiBPdmVyd3JpdHRlbiBpZiBzZXQgaW4gJ3JhbmdlJy5cbiAgICAgICAgcGFyc2VkLnNpbmdsZVN0ZXAgPSBlbnRyeTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0ZXN0UmFuZ2UocGFyc2VkLCBlbnRyeSkge1xuICAgICAgICAvLyBGaWx0ZXIgaW5jb3JyZWN0IGlucHV0LlxuICAgICAgICBpZiAodHlwZW9mIGVudHJ5ICE9PSBcIm9iamVjdFwiIHx8IEFycmF5LmlzQXJyYXkoZW50cnkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6ICdyYW5nZScgaXMgbm90IGFuIG9iamVjdC5cIik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDYXRjaCBtaXNzaW5nIHN0YXJ0IG9yIGVuZC5cbiAgICAgICAgaWYgKGVudHJ5Lm1pbiA9PT0gdW5kZWZpbmVkIHx8IGVudHJ5Lm1heCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6IE1pc3NpbmcgJ21pbicgb3IgJ21heCcgaW4gJ3JhbmdlJy5cIik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDYXRjaCBlcXVhbCBzdGFydCBvciBlbmQuXG4gICAgICAgIGlmIChlbnRyeS5taW4gPT09IGVudHJ5Lm1heCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAncmFuZ2UnICdtaW4nIGFuZCAnbWF4JyBjYW5ub3QgYmUgZXF1YWwuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcGFyc2VkLnNwZWN0cnVtID0gbmV3IFNwZWN0cnVtKGVudHJ5LCBwYXJzZWQuc25hcCwgcGFyc2VkLnNpbmdsZVN0ZXApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRlc3RTdGFydChwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIGVudHJ5ID0gYXNBcnJheShlbnRyeSk7XG5cbiAgICAgICAgLy8gVmFsaWRhdGUgaW5wdXQuIFZhbHVlcyBhcmVuJ3QgdGVzdGVkLCBhcyB0aGUgcHVibGljIC52YWwgbWV0aG9kXG4gICAgICAgIC8vIHdpbGwgYWx3YXlzIHByb3ZpZGUgYSB2YWxpZCBsb2NhdGlvbi5cbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGVudHJ5KSB8fCAhZW50cnkubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6ICdzdGFydCcgb3B0aW9uIGlzIGluY29ycmVjdC5cIik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTdG9yZSB0aGUgbnVtYmVyIG9mIGhhbmRsZXMuXG4gICAgICAgIHBhcnNlZC5oYW5kbGVzID0gZW50cnkubGVuZ3RoO1xuXG4gICAgICAgIC8vIFdoZW4gdGhlIHNsaWRlciBpcyBpbml0aWFsaXplZCwgdGhlIC52YWwgbWV0aG9kIHdpbGxcbiAgICAgICAgLy8gYmUgY2FsbGVkIHdpdGggdGhlIHN0YXJ0IG9wdGlvbnMuXG4gICAgICAgIHBhcnNlZC5zdGFydCA9IGVudHJ5O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRlc3RTbmFwKHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgLy8gRW5mb3JjZSAxMDAlIHN0ZXBwaW5nIHdpdGhpbiBzdWJyYW5nZXMuXG4gICAgICAgIHBhcnNlZC5zbmFwID0gZW50cnk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBlbnRyeSAhPT0gXCJib29sZWFuXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ3NuYXAnIG9wdGlvbiBtdXN0IGJlIGEgYm9vbGVhbi5cIik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0ZXN0QW5pbWF0ZShwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIC8vIEVuZm9yY2UgMTAwJSBzdGVwcGluZyB3aXRoaW4gc3VicmFuZ2VzLlxuICAgICAgICBwYXJzZWQuYW5pbWF0ZSA9IGVudHJ5O1xuXG4gICAgICAgIGlmICh0eXBlb2YgZW50cnkgIT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6ICdhbmltYXRlJyBvcHRpb24gbXVzdCBiZSBhIGJvb2xlYW4uXCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGVzdEFuaW1hdGlvbkR1cmF0aW9uKHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgcGFyc2VkLmFuaW1hdGlvbkR1cmF0aW9uID0gZW50cnk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBlbnRyeSAhPT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAnYW5pbWF0aW9uRHVyYXRpb24nIG9wdGlvbiBtdXN0IGJlIGEgbnVtYmVyLlwiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRlc3RDb25uZWN0KHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgdmFyIGNvbm5lY3QgPSBbZmFsc2VdO1xuICAgICAgICB2YXIgaTtcblxuICAgICAgICAvLyBNYXAgbGVnYWN5IG9wdGlvbnNcbiAgICAgICAgaWYgKGVudHJ5ID09PSBcImxvd2VyXCIpIHtcbiAgICAgICAgICAgIGVudHJ5ID0gW3RydWUsIGZhbHNlXTtcbiAgICAgICAgfSBlbHNlIGlmIChlbnRyeSA9PT0gXCJ1cHBlclwiKSB7XG4gICAgICAgICAgICBlbnRyeSA9IFtmYWxzZSwgdHJ1ZV07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBIYW5kbGUgYm9vbGVhbiBvcHRpb25zXG4gICAgICAgIGlmIChlbnRyeSA9PT0gdHJ1ZSB8fCBlbnRyeSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGZvciAoaSA9IDE7IGkgPCBwYXJzZWQuaGFuZGxlczsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29ubmVjdC5wdXNoKGVudHJ5KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29ubmVjdC5wdXNoKGZhbHNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlamVjdCBpbnZhbGlkIGlucHV0XG4gICAgICAgIGVsc2UgaWYgKCFBcnJheS5pc0FycmF5KGVudHJ5KSB8fCAhZW50cnkubGVuZ3RoIHx8IGVudHJ5Lmxlbmd0aCAhPT0gcGFyc2VkLmhhbmRsZXMgKyAxKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6ICdjb25uZWN0JyBvcHRpb24gZG9lc24ndCBtYXRjaCBoYW5kbGUgY291bnQuXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29ubmVjdCA9IGVudHJ5O1xuICAgICAgICB9XG5cbiAgICAgICAgcGFyc2VkLmNvbm5lY3QgPSBjb25uZWN0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRlc3RPcmllbnRhdGlvbihwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIC8vIFNldCBvcmllbnRhdGlvbiB0byBhbiBhIG51bWVyaWNhbCB2YWx1ZSBmb3IgZWFzeVxuICAgICAgICAvLyBhcnJheSBzZWxlY3Rpb24uXG4gICAgICAgIHN3aXRjaCAoZW50cnkpIHtcbiAgICAgICAgICAgIGNhc2UgXCJob3Jpem9udGFsXCI6XG4gICAgICAgICAgICAgICAgcGFyc2VkLm9ydCA9IDA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwidmVydGljYWxcIjpcbiAgICAgICAgICAgICAgICBwYXJzZWQub3J0ID0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAnb3JpZW50YXRpb24nIG9wdGlvbiBpcyBpbnZhbGlkLlwiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRlc3RNYXJnaW4ocGFyc2VkLCBlbnRyeSkge1xuICAgICAgICBpZiAoIWlzTnVtZXJpYyhlbnRyeSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ21hcmdpbicgb3B0aW9uIG11c3QgYmUgbnVtZXJpYy5cIik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJc3N1ZSAjNTgyXG4gICAgICAgIGlmIChlbnRyeSA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcGFyc2VkLm1hcmdpbiA9IHBhcnNlZC5zcGVjdHJ1bS5nZXREaXN0YW5jZShlbnRyeSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGVzdExpbWl0KHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgaWYgKCFpc051bWVyaWMoZW50cnkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6ICdsaW1pdCcgb3B0aW9uIG11c3QgYmUgbnVtZXJpYy5cIik7XG4gICAgICAgIH1cblxuICAgICAgICBwYXJzZWQubGltaXQgPSBwYXJzZWQuc3BlY3RydW0uZ2V0RGlzdGFuY2UoZW50cnkpO1xuXG4gICAgICAgIGlmICghcGFyc2VkLmxpbWl0IHx8IHBhcnNlZC5oYW5kbGVzIDwgMikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgIFwibm9VaVNsaWRlciAoXCIgK1xuICAgICAgICAgICAgICAgICAgICBWRVJTSU9OICtcbiAgICAgICAgICAgICAgICAgICAgXCIpOiAnbGltaXQnIG9wdGlvbiBpcyBvbmx5IHN1cHBvcnRlZCBvbiBsaW5lYXIgc2xpZGVycyB3aXRoIDIgb3IgbW9yZSBoYW5kbGVzLlwiXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGVzdFBhZGRpbmcocGFyc2VkLCBlbnRyeSkge1xuICAgICAgICB2YXIgaW5kZXg7XG5cbiAgICAgICAgaWYgKCFpc051bWVyaWMoZW50cnkpICYmICFBcnJheS5pc0FycmF5KGVudHJ5KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgIFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAncGFkZGluZycgb3B0aW9uIG11c3QgYmUgbnVtZXJpYyBvciBhcnJheSBvZiBleGFjdGx5IDIgbnVtYmVycy5cIlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGVudHJ5KSAmJiAhKGVudHJ5Lmxlbmd0aCA9PT0gMiB8fCBpc051bWVyaWMoZW50cnlbMF0pIHx8IGlzTnVtZXJpYyhlbnRyeVsxXSkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6ICdwYWRkaW5nJyBvcHRpb24gbXVzdCBiZSBudW1lcmljIG9yIGFycmF5IG9mIGV4YWN0bHkgMiBudW1iZXJzLlwiXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5ID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZW50cnkpKSB7XG4gICAgICAgICAgICBlbnRyeSA9IFtlbnRyeSwgZW50cnldO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gJ2dldERpc3RhbmNlJyByZXR1cm5zIGZhbHNlIGZvciBpbnZhbGlkIHZhbHVlcy5cbiAgICAgICAgcGFyc2VkLnBhZGRpbmcgPSBbcGFyc2VkLnNwZWN0cnVtLmdldERpc3RhbmNlKGVudHJ5WzBdKSwgcGFyc2VkLnNwZWN0cnVtLmdldERpc3RhbmNlKGVudHJ5WzFdKV07XG5cbiAgICAgICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgcGFyc2VkLnNwZWN0cnVtLnhOdW1TdGVwcy5sZW5ndGggLSAxOyBpbmRleCsrKSB7XG4gICAgICAgICAgICAvLyBsYXN0IFwicmFuZ2VcIiBjYW4ndCBjb250YWluIHN0ZXAgc2l6ZSBhcyBpdCBpcyBwdXJlbHkgYW4gZW5kcG9pbnQuXG4gICAgICAgICAgICBpZiAocGFyc2VkLnBhZGRpbmdbMF1baW5kZXhdIDwgMCB8fCBwYXJzZWQucGFkZGluZ1sxXVtpbmRleF0gPCAwKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAncGFkZGluZycgb3B0aW9uIG11c3QgYmUgYSBwb3NpdGl2ZSBudW1iZXIocykuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRvdGFsUGFkZGluZyA9IGVudHJ5WzBdICsgZW50cnlbMV07XG4gICAgICAgIHZhciBmaXJzdFZhbHVlID0gcGFyc2VkLnNwZWN0cnVtLnhWYWxbMF07XG4gICAgICAgIHZhciBsYXN0VmFsdWUgPSBwYXJzZWQuc3BlY3RydW0ueFZhbFtwYXJzZWQuc3BlY3RydW0ueFZhbC5sZW5ndGggLSAxXTtcblxuICAgICAgICBpZiAodG90YWxQYWRkaW5nIC8gKGxhc3RWYWx1ZSAtIGZpcnN0VmFsdWUpID4gMSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAncGFkZGluZycgb3B0aW9uIG11c3Qgbm90IGV4Y2VlZCAxMDAlIG9mIHRoZSByYW5nZS5cIik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0ZXN0RGlyZWN0aW9uKHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgLy8gU2V0IGRpcmVjdGlvbiBhcyBhIG51bWVyaWNhbCB2YWx1ZSBmb3IgZWFzeSBwYXJzaW5nLlxuICAgICAgICAvLyBJbnZlcnQgY29ubmVjdGlvbiBmb3IgUlRMIHNsaWRlcnMsIHNvIHRoYXQgdGhlIHByb3BlclxuICAgICAgICAvLyBoYW5kbGVzIGdldCB0aGUgY29ubmVjdC9iYWNrZ3JvdW5kIGNsYXNzZXMuXG4gICAgICAgIHN3aXRjaCAoZW50cnkpIHtcbiAgICAgICAgICAgIGNhc2UgXCJsdHJcIjpcbiAgICAgICAgICAgICAgICBwYXJzZWQuZGlyID0gMDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJydGxcIjpcbiAgICAgICAgICAgICAgICBwYXJzZWQuZGlyID0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAnZGlyZWN0aW9uJyBvcHRpb24gd2FzIG5vdCByZWNvZ25pemVkLlwiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRlc3RCZWhhdmlvdXIocGFyc2VkLCBlbnRyeSkge1xuICAgICAgICAvLyBNYWtlIHN1cmUgdGhlIGlucHV0IGlzIGEgc3RyaW5nLlxuICAgICAgICBpZiAodHlwZW9mIGVudHJ5ICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6ICdiZWhhdmlvdXInIG11c3QgYmUgYSBzdHJpbmcgY29udGFpbmluZyBvcHRpb25zLlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENoZWNrIGlmIHRoZSBzdHJpbmcgY29udGFpbnMgYW55IGtleXdvcmRzLlxuICAgICAgICAvLyBOb25lIGFyZSByZXF1aXJlZC5cbiAgICAgICAgdmFyIHRhcCA9IGVudHJ5LmluZGV4T2YoXCJ0YXBcIikgPj0gMDtcbiAgICAgICAgdmFyIGRyYWcgPSBlbnRyeS5pbmRleE9mKFwiZHJhZ1wiKSA+PSAwO1xuICAgICAgICB2YXIgZml4ZWQgPSBlbnRyeS5pbmRleE9mKFwiZml4ZWRcIikgPj0gMDtcbiAgICAgICAgdmFyIHNuYXAgPSBlbnRyeS5pbmRleE9mKFwic25hcFwiKSA+PSAwO1xuICAgICAgICB2YXIgaG92ZXIgPSBlbnRyeS5pbmRleE9mKFwiaG92ZXJcIikgPj0gMDtcbiAgICAgICAgdmFyIHVuY29uc3RyYWluZWQgPSBlbnRyeS5pbmRleE9mKFwidW5jb25zdHJhaW5lZFwiKSA+PSAwO1xuXG4gICAgICAgIGlmIChmaXhlZCkge1xuICAgICAgICAgICAgaWYgKHBhcnNlZC5oYW5kbGVzICE9PSAyKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAnZml4ZWQnIGJlaGF2aW91ciBtdXN0IGJlIHVzZWQgd2l0aCAyIGhhbmRsZXNcIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFVzZSBtYXJnaW4gdG8gZW5mb3JjZSBmaXhlZCBzdGF0ZVxuICAgICAgICAgICAgdGVzdE1hcmdpbihwYXJzZWQsIHBhcnNlZC5zdGFydFsxXSAtIHBhcnNlZC5zdGFydFswXSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodW5jb25zdHJhaW5lZCAmJiAocGFyc2VkLm1hcmdpbiB8fCBwYXJzZWQubGltaXQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6ICd1bmNvbnN0cmFpbmVkJyBiZWhhdmlvdXIgY2Fubm90IGJlIHVzZWQgd2l0aCBtYXJnaW4gb3IgbGltaXRcIlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBhcnNlZC5ldmVudHMgPSB7XG4gICAgICAgICAgICB0YXA6IHRhcCB8fCBzbmFwLFxuICAgICAgICAgICAgZHJhZzogZHJhZyxcbiAgICAgICAgICAgIGZpeGVkOiBmaXhlZCxcbiAgICAgICAgICAgIHNuYXA6IHNuYXAsXG4gICAgICAgICAgICBob3ZlcjogaG92ZXIsXG4gICAgICAgICAgICB1bmNvbnN0cmFpbmVkOiB1bmNvbnN0cmFpbmVkXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGVzdFRvb2x0aXBzKHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgaWYgKGVudHJ5ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICBwYXJzZWQudG9vbHRpcHMgPSBbXTtcblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJzZWQuaGFuZGxlczsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcGFyc2VkLnRvb2x0aXBzLnB1c2godHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXJzZWQudG9vbHRpcHMgPSBhc0FycmF5KGVudHJ5KTtcblxuICAgICAgICAgICAgaWYgKHBhcnNlZC50b29sdGlwcy5sZW5ndGggIT09IHBhcnNlZC5oYW5kbGVzKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiBtdXN0IHBhc3MgYSBmb3JtYXR0ZXIgZm9yIGFsbCBoYW5kbGVzLlwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcGFyc2VkLnRvb2x0aXBzLmZvckVhY2goZnVuY3Rpb24oZm9ybWF0dGVyKSB7XG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICB0eXBlb2YgZm9ybWF0dGVyICE9PSBcImJvb2xlYW5cIiAmJlxuICAgICAgICAgICAgICAgICAgICAodHlwZW9mIGZvcm1hdHRlciAhPT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZm9ybWF0dGVyLnRvICE9PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ3Rvb2x0aXBzJyBtdXN0IGJlIHBhc3NlZCBhIGZvcm1hdHRlciBvciAnZmFsc2UnLlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRlc3RBcmlhRm9ybWF0KHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgcGFyc2VkLmFyaWFGb3JtYXQgPSBlbnRyeTtcbiAgICAgICAgdmFsaWRhdGVGb3JtYXQoZW50cnkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRlc3RGb3JtYXQocGFyc2VkLCBlbnRyeSkge1xuICAgICAgICBwYXJzZWQuZm9ybWF0ID0gZW50cnk7XG4gICAgICAgIHZhbGlkYXRlRm9ybWF0KGVudHJ5KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0ZXN0S2V5Ym9hcmRTdXBwb3J0KHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgcGFyc2VkLmtleWJvYXJkU3VwcG9ydCA9IGVudHJ5O1xuXG4gICAgICAgIGlmICh0eXBlb2YgZW50cnkgIT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6ICdrZXlib2FyZFN1cHBvcnQnIG9wdGlvbiBtdXN0IGJlIGEgYm9vbGVhbi5cIik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0ZXN0RG9jdW1lbnRFbGVtZW50KHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgLy8gVGhpcyBpcyBhbiBhZHZhbmNlZCBvcHRpb24uIFBhc3NlZCB2YWx1ZXMgYXJlIHVzZWQgd2l0aG91dCB2YWxpZGF0aW9uLlxuICAgICAgICBwYXJzZWQuZG9jdW1lbnRFbGVtZW50ID0gZW50cnk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGVzdENzc1ByZWZpeChwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIGlmICh0eXBlb2YgZW50cnkgIT09IFwic3RyaW5nXCIgJiYgZW50cnkgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6ICdjc3NQcmVmaXgnIG11c3QgYmUgYSBzdHJpbmcgb3IgYGZhbHNlYC5cIik7XG4gICAgICAgIH1cblxuICAgICAgICBwYXJzZWQuY3NzUHJlZml4ID0gZW50cnk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGVzdENzc0NsYXNzZXMocGFyc2VkLCBlbnRyeSkge1xuICAgICAgICBpZiAodHlwZW9mIGVudHJ5ICE9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6ICdjc3NDbGFzc2VzJyBtdXN0IGJlIGFuIG9iamVjdC5cIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIHBhcnNlZC5jc3NQcmVmaXggPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHBhcnNlZC5jc3NDbGFzc2VzID0ge307XG5cbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBlbnRyeSkge1xuICAgICAgICAgICAgICAgIGlmICghZW50cnkuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBwYXJzZWQuY3NzQ2xhc3Nlc1trZXldID0gcGFyc2VkLmNzc1ByZWZpeCArIGVudHJ5W2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXJzZWQuY3NzQ2xhc3NlcyA9IGVudHJ5O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gVGVzdCBhbGwgZGV2ZWxvcGVyIHNldHRpbmdzIGFuZCBwYXJzZSB0byBhc3N1bXB0aW9uLXNhZmUgdmFsdWVzLlxuICAgIGZ1bmN0aW9uIHRlc3RPcHRpb25zKG9wdGlvbnMpIHtcbiAgICAgICAgLy8gVG8gcHJvdmUgYSBmaXggZm9yICM1MzcsIGZyZWV6ZSBvcHRpb25zIGhlcmUuXG4gICAgICAgIC8vIElmIHRoZSBvYmplY3QgaXMgbW9kaWZpZWQsIGFuIGVycm9yIHdpbGwgYmUgdGhyb3duLlxuICAgICAgICAvLyBPYmplY3QuZnJlZXplKG9wdGlvbnMpO1xuXG4gICAgICAgIHZhciBwYXJzZWQgPSB7XG4gICAgICAgICAgICBtYXJnaW46IDAsXG4gICAgICAgICAgICBsaW1pdDogMCxcbiAgICAgICAgICAgIHBhZGRpbmc6IDAsXG4gICAgICAgICAgICBhbmltYXRlOiB0cnVlLFxuICAgICAgICAgICAgYW5pbWF0aW9uRHVyYXRpb246IDMwMCxcbiAgICAgICAgICAgIGFyaWFGb3JtYXQ6IGRlZmF1bHRGb3JtYXR0ZXIsXG4gICAgICAgICAgICBmb3JtYXQ6IGRlZmF1bHRGb3JtYXR0ZXJcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBUZXN0cyBhcmUgZXhlY3V0ZWQgaW4gdGhlIG9yZGVyIHRoZXkgYXJlIHByZXNlbnRlZCBoZXJlLlxuICAgICAgICB2YXIgdGVzdHMgPSB7XG4gICAgICAgICAgICBzdGVwOiB7IHI6IGZhbHNlLCB0OiB0ZXN0U3RlcCB9LFxuICAgICAgICAgICAgc3RhcnQ6IHsgcjogdHJ1ZSwgdDogdGVzdFN0YXJ0IH0sXG4gICAgICAgICAgICBjb25uZWN0OiB7IHI6IHRydWUsIHQ6IHRlc3RDb25uZWN0IH0sXG4gICAgICAgICAgICBkaXJlY3Rpb246IHsgcjogdHJ1ZSwgdDogdGVzdERpcmVjdGlvbiB9LFxuICAgICAgICAgICAgc25hcDogeyByOiBmYWxzZSwgdDogdGVzdFNuYXAgfSxcbiAgICAgICAgICAgIGFuaW1hdGU6IHsgcjogZmFsc2UsIHQ6IHRlc3RBbmltYXRlIH0sXG4gICAgICAgICAgICBhbmltYXRpb25EdXJhdGlvbjogeyByOiBmYWxzZSwgdDogdGVzdEFuaW1hdGlvbkR1cmF0aW9uIH0sXG4gICAgICAgICAgICByYW5nZTogeyByOiB0cnVlLCB0OiB0ZXN0UmFuZ2UgfSxcbiAgICAgICAgICAgIG9yaWVudGF0aW9uOiB7IHI6IGZhbHNlLCB0OiB0ZXN0T3JpZW50YXRpb24gfSxcbiAgICAgICAgICAgIG1hcmdpbjogeyByOiBmYWxzZSwgdDogdGVzdE1hcmdpbiB9LFxuICAgICAgICAgICAgbGltaXQ6IHsgcjogZmFsc2UsIHQ6IHRlc3RMaW1pdCB9LFxuICAgICAgICAgICAgcGFkZGluZzogeyByOiBmYWxzZSwgdDogdGVzdFBhZGRpbmcgfSxcbiAgICAgICAgICAgIGJlaGF2aW91cjogeyByOiB0cnVlLCB0OiB0ZXN0QmVoYXZpb3VyIH0sXG4gICAgICAgICAgICBhcmlhRm9ybWF0OiB7IHI6IGZhbHNlLCB0OiB0ZXN0QXJpYUZvcm1hdCB9LFxuICAgICAgICAgICAgZm9ybWF0OiB7IHI6IGZhbHNlLCB0OiB0ZXN0Rm9ybWF0IH0sXG4gICAgICAgICAgICB0b29sdGlwczogeyByOiBmYWxzZSwgdDogdGVzdFRvb2x0aXBzIH0sXG4gICAgICAgICAgICBrZXlib2FyZFN1cHBvcnQ6IHsgcjogdHJ1ZSwgdDogdGVzdEtleWJvYXJkU3VwcG9ydCB9LFxuICAgICAgICAgICAgZG9jdW1lbnRFbGVtZW50OiB7IHI6IGZhbHNlLCB0OiB0ZXN0RG9jdW1lbnRFbGVtZW50IH0sXG4gICAgICAgICAgICBjc3NQcmVmaXg6IHsgcjogdHJ1ZSwgdDogdGVzdENzc1ByZWZpeCB9LFxuICAgICAgICAgICAgY3NzQ2xhc3NlczogeyByOiB0cnVlLCB0OiB0ZXN0Q3NzQ2xhc3NlcyB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGRlZmF1bHRzID0ge1xuICAgICAgICAgICAgY29ubmVjdDogZmFsc2UsXG4gICAgICAgICAgICBkaXJlY3Rpb246IFwibHRyXCIsXG4gICAgICAgICAgICBiZWhhdmlvdXI6IFwidGFwXCIsXG4gICAgICAgICAgICBvcmllbnRhdGlvbjogXCJob3Jpem9udGFsXCIsXG4gICAgICAgICAgICBrZXlib2FyZFN1cHBvcnQ6IHRydWUsXG4gICAgICAgICAgICBjc3NQcmVmaXg6IFwibm9VaS1cIixcbiAgICAgICAgICAgIGNzc0NsYXNzZXM6IGNzc0NsYXNzZXNcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBBcmlhRm9ybWF0IGRlZmF1bHRzIHRvIHJlZ3VsYXIgZm9ybWF0LCBpZiBhbnkuXG4gICAgICAgIGlmIChvcHRpb25zLmZvcm1hdCAmJiAhb3B0aW9ucy5hcmlhRm9ybWF0KSB7XG4gICAgICAgICAgICBvcHRpb25zLmFyaWFGb3JtYXQgPSBvcHRpb25zLmZvcm1hdDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJ1biBhbGwgb3B0aW9ucyB0aHJvdWdoIGEgdGVzdGluZyBtZWNoYW5pc20gdG8gZW5zdXJlIGNvcnJlY3RcbiAgICAgICAgLy8gaW5wdXQuIEl0IHNob3VsZCBiZSBub3RlZCB0aGF0IG9wdGlvbnMgbWlnaHQgZ2V0IG1vZGlmaWVkIHRvXG4gICAgICAgIC8vIGJlIGhhbmRsZWQgcHJvcGVybHkuIEUuZy4gd3JhcHBpbmcgaW50ZWdlcnMgaW4gYXJyYXlzLlxuICAgICAgICBPYmplY3Qua2V5cyh0ZXN0cykuZm9yRWFjaChmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgICAgICAvLyBJZiB0aGUgb3B0aW9uIGlzbid0IHNldCwgYnV0IGl0IGlzIHJlcXVpcmVkLCB0aHJvdyBhbiBlcnJvci5cbiAgICAgICAgICAgIGlmICghaXNTZXQob3B0aW9uc1tuYW1lXSkgJiYgZGVmYXVsdHNbbmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGlmICh0ZXN0c1tuYW1lXS5yKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ1wiICsgbmFtZSArIFwiJyBpcyByZXF1aXJlZC5cIik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRlc3RzW25hbWVdLnQocGFyc2VkLCAhaXNTZXQob3B0aW9uc1tuYW1lXSkgPyBkZWZhdWx0c1tuYW1lXSA6IG9wdGlvbnNbbmFtZV0pO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBGb3J3YXJkIHBpcHMgb3B0aW9uc1xuICAgICAgICBwYXJzZWQucGlwcyA9IG9wdGlvbnMucGlwcztcblxuICAgICAgICAvLyBBbGwgcmVjZW50IGJyb3dzZXJzIGFjY2VwdCB1bnByZWZpeGVkIHRyYW5zZm9ybS5cbiAgICAgICAgLy8gV2UgbmVlZCAtbXMtIGZvciBJRTkgYW5kIC13ZWJraXQtIGZvciBvbGRlciBBbmRyb2lkO1xuICAgICAgICAvLyBBc3N1bWUgdXNlIG9mIC13ZWJraXQtIGlmIHVucHJlZml4ZWQgYW5kIC1tcy0gYXJlIG5vdCBzdXBwb3J0ZWQuXG4gICAgICAgIC8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI2ZlYXQ9dHJhbnNmb3JtczJkXG4gICAgICAgIHZhciBkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgdmFyIG1zUHJlZml4ID0gZC5zdHlsZS5tc1RyYW5zZm9ybSAhPT0gdW5kZWZpbmVkO1xuICAgICAgICB2YXIgbm9QcmVmaXggPSBkLnN0eWxlLnRyYW5zZm9ybSAhPT0gdW5kZWZpbmVkO1xuXG4gICAgICAgIHBhcnNlZC50cmFuc2Zvcm1SdWxlID0gbm9QcmVmaXggPyBcInRyYW5zZm9ybVwiIDogbXNQcmVmaXggPyBcIm1zVHJhbnNmb3JtXCIgOiBcIndlYmtpdFRyYW5zZm9ybVwiO1xuXG4gICAgICAgIC8vIFBpcHMgZG9uJ3QgbW92ZSwgc28gd2UgY2FuIHBsYWNlIHRoZW0gdXNpbmcgbGVmdC90b3AuXG4gICAgICAgIHZhciBzdHlsZXMgPSBbW1wibGVmdFwiLCBcInRvcFwiXSwgW1wicmlnaHRcIiwgXCJib3R0b21cIl1dO1xuXG4gICAgICAgIHBhcnNlZC5zdHlsZSA9IHN0eWxlc1twYXJzZWQuZGlyXVtwYXJzZWQub3J0XTtcblxuICAgICAgICByZXR1cm4gcGFyc2VkO1xuICAgIH1cblxuICAgIC8vZW5kcmVnaW9uXG5cbiAgICBmdW5jdGlvbiBzY29wZSh0YXJnZXQsIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucykge1xuICAgICAgICB2YXIgYWN0aW9ucyA9IGdldEFjdGlvbnMoKTtcbiAgICAgICAgdmFyIHN1cHBvcnRzVG91Y2hBY3Rpb25Ob25lID0gZ2V0U3VwcG9ydHNUb3VjaEFjdGlvbk5vbmUoKTtcbiAgICAgICAgdmFyIHN1cHBvcnRzUGFzc2l2ZSA9IHN1cHBvcnRzVG91Y2hBY3Rpb25Ob25lICYmIGdldFN1cHBvcnRzUGFzc2l2ZSgpO1xuXG4gICAgICAgIC8vIEFsbCB2YXJpYWJsZXMgbG9jYWwgdG8gJ3Njb3BlJyBhcmUgcHJlZml4ZWQgd2l0aCAnc2NvcGVfJ1xuXG4gICAgICAgIC8vIFNsaWRlciBET00gTm9kZXNcbiAgICAgICAgdmFyIHNjb3BlX1RhcmdldCA9IHRhcmdldDtcbiAgICAgICAgdmFyIHNjb3BlX0Jhc2U7XG4gICAgICAgIHZhciBzY29wZV9IYW5kbGVzO1xuICAgICAgICB2YXIgc2NvcGVfQ29ubmVjdHM7XG4gICAgICAgIHZhciBzY29wZV9QaXBzO1xuICAgICAgICB2YXIgc2NvcGVfVG9vbHRpcHM7XG5cbiAgICAgICAgLy8gU2xpZGVyIHN0YXRlIHZhbHVlc1xuICAgICAgICB2YXIgc2NvcGVfU3BlY3RydW0gPSBvcHRpb25zLnNwZWN0cnVtO1xuICAgICAgICB2YXIgc2NvcGVfVmFsdWVzID0gW107XG4gICAgICAgIHZhciBzY29wZV9Mb2NhdGlvbnMgPSBbXTtcbiAgICAgICAgdmFyIHNjb3BlX0hhbmRsZU51bWJlcnMgPSBbXTtcbiAgICAgICAgdmFyIHNjb3BlX0FjdGl2ZUhhbmRsZXNDb3VudCA9IDA7XG4gICAgICAgIHZhciBzY29wZV9FdmVudHMgPSB7fTtcblxuICAgICAgICAvLyBFeHBvc2VkIEFQSVxuICAgICAgICB2YXIgc2NvcGVfU2VsZjtcblxuICAgICAgICAvLyBEb2N1bWVudCBOb2Rlc1xuICAgICAgICB2YXIgc2NvcGVfRG9jdW1lbnQgPSB0YXJnZXQub3duZXJEb2N1bWVudDtcbiAgICAgICAgdmFyIHNjb3BlX0RvY3VtZW50RWxlbWVudCA9IG9wdGlvbnMuZG9jdW1lbnRFbGVtZW50IHx8IHNjb3BlX0RvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgdmFyIHNjb3BlX0JvZHkgPSBzY29wZV9Eb2N1bWVudC5ib2R5O1xuXG4gICAgICAgIC8vIFBpcHMgY29uc3RhbnRzXG4gICAgICAgIHZhciBQSVBTX05PTkUgPSAtMTtcbiAgICAgICAgdmFyIFBJUFNfTk9fVkFMVUUgPSAwO1xuICAgICAgICB2YXIgUElQU19MQVJHRV9WQUxVRSA9IDE7XG4gICAgICAgIHZhciBQSVBTX1NNQUxMX1ZBTFVFID0gMjtcblxuICAgICAgICAvLyBGb3IgaG9yaXpvbnRhbCBzbGlkZXJzIGluIHN0YW5kYXJkIGx0ciBkb2N1bWVudHMsXG4gICAgICAgIC8vIG1ha2UgLm5vVWktb3JpZ2luIG92ZXJmbG93IHRvIHRoZSBsZWZ0IHNvIHRoZSBkb2N1bWVudCBkb2Vzbid0IHNjcm9sbC5cbiAgICAgICAgdmFyIHNjb3BlX0Rpck9mZnNldCA9IHNjb3BlX0RvY3VtZW50LmRpciA9PT0gXCJydGxcIiB8fCBvcHRpb25zLm9ydCA9PT0gMSA/IDAgOiAxMDA7XG5cbiAgICAgICAgLy8gQ3JlYXRlcyBhIG5vZGUsIGFkZHMgaXQgdG8gdGFyZ2V0LCByZXR1cm5zIHRoZSBuZXcgbm9kZS5cbiAgICAgICAgZnVuY3Rpb24gYWRkTm9kZVRvKGFkZFRhcmdldCwgY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICB2YXIgZGl2ID0gc2NvcGVfRG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblxuICAgICAgICAgICAgaWYgKGNsYXNzTmFtZSkge1xuICAgICAgICAgICAgICAgIGFkZENsYXNzKGRpdiwgY2xhc3NOYW1lKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYWRkVGFyZ2V0LmFwcGVuZENoaWxkKGRpdik7XG5cbiAgICAgICAgICAgIHJldHVybiBkaXY7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBcHBlbmQgYSBvcmlnaW4gdG8gdGhlIGJhc2VcbiAgICAgICAgZnVuY3Rpb24gYWRkT3JpZ2luKGJhc2UsIGhhbmRsZU51bWJlcikge1xuICAgICAgICAgICAgdmFyIG9yaWdpbiA9IGFkZE5vZGVUbyhiYXNlLCBvcHRpb25zLmNzc0NsYXNzZXMub3JpZ2luKTtcbiAgICAgICAgICAgIHZhciBoYW5kbGUgPSBhZGROb2RlVG8ob3JpZ2luLCBvcHRpb25zLmNzc0NsYXNzZXMuaGFuZGxlKTtcblxuICAgICAgICAgICAgYWRkTm9kZVRvKGhhbmRsZSwgb3B0aW9ucy5jc3NDbGFzc2VzLnRvdWNoQXJlYSk7XG5cbiAgICAgICAgICAgIGhhbmRsZS5zZXRBdHRyaWJ1dGUoXCJkYXRhLWhhbmRsZVwiLCBoYW5kbGVOdW1iZXIpO1xuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5rZXlib2FyZFN1cHBvcnQpIHtcbiAgICAgICAgICAgICAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0dsb2JhbF9hdHRyaWJ1dGVzL3RhYmluZGV4XG4gICAgICAgICAgICAgICAgLy8gMCA9IGZvY3VzYWJsZSBhbmQgcmVhY2hhYmxlXG4gICAgICAgICAgICAgICAgaGFuZGxlLnNldEF0dHJpYnV0ZShcInRhYmluZGV4XCIsIFwiMFwiKTtcbiAgICAgICAgICAgICAgICBoYW5kbGUuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV2ZW50S2V5ZG93bihldmVudCwgaGFuZGxlTnVtYmVyKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaGFuZGxlLnNldEF0dHJpYnV0ZShcInJvbGVcIiwgXCJzbGlkZXJcIik7XG4gICAgICAgICAgICBoYW5kbGUuc2V0QXR0cmlidXRlKFwiYXJpYS1vcmllbnRhdGlvblwiLCBvcHRpb25zLm9ydCA/IFwidmVydGljYWxcIiA6IFwiaG9yaXpvbnRhbFwiKTtcblxuICAgICAgICAgICAgaWYgKGhhbmRsZU51bWJlciA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGFkZENsYXNzKGhhbmRsZSwgb3B0aW9ucy5jc3NDbGFzc2VzLmhhbmRsZUxvd2VyKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaGFuZGxlTnVtYmVyID09PSBvcHRpb25zLmhhbmRsZXMgLSAxKSB7XG4gICAgICAgICAgICAgICAgYWRkQ2xhc3MoaGFuZGxlLCBvcHRpb25zLmNzc0NsYXNzZXMuaGFuZGxlVXBwZXIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gb3JpZ2luO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSW5zZXJ0IG5vZGVzIGZvciBjb25uZWN0IGVsZW1lbnRzXG4gICAgICAgIGZ1bmN0aW9uIGFkZENvbm5lY3QoYmFzZSwgYWRkKSB7XG4gICAgICAgICAgICBpZiAoIWFkZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGFkZE5vZGVUbyhiYXNlLCBvcHRpb25zLmNzc0NsYXNzZXMuY29ubmVjdCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBZGQgaGFuZGxlcyB0byB0aGUgc2xpZGVyIGJhc2UuXG4gICAgICAgIGZ1bmN0aW9uIGFkZEVsZW1lbnRzKGNvbm5lY3RPcHRpb25zLCBiYXNlKSB7XG4gICAgICAgICAgICB2YXIgY29ubmVjdEJhc2UgPSBhZGROb2RlVG8oYmFzZSwgb3B0aW9ucy5jc3NDbGFzc2VzLmNvbm5lY3RzKTtcblxuICAgICAgICAgICAgc2NvcGVfSGFuZGxlcyA9IFtdO1xuICAgICAgICAgICAgc2NvcGVfQ29ubmVjdHMgPSBbXTtcblxuICAgICAgICAgICAgc2NvcGVfQ29ubmVjdHMucHVzaChhZGRDb25uZWN0KGNvbm5lY3RCYXNlLCBjb25uZWN0T3B0aW9uc1swXSkpO1xuXG4gICAgICAgICAgICAvLyBbOjo6Ok89PT09Tz09PT1PPT09PV1cbiAgICAgICAgICAgIC8vIGNvbm5lY3RPcHRpb25zID0gWzAsIDEsIDEsIDFdXG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3B0aW9ucy5oYW5kbGVzOyBpKyspIHtcbiAgICAgICAgICAgICAgICAvLyBLZWVwIGEgbGlzdCBvZiBhbGwgYWRkZWQgaGFuZGxlcy5cbiAgICAgICAgICAgICAgICBzY29wZV9IYW5kbGVzLnB1c2goYWRkT3JpZ2luKGJhc2UsIGkpKTtcbiAgICAgICAgICAgICAgICBzY29wZV9IYW5kbGVOdW1iZXJzW2ldID0gaTtcbiAgICAgICAgICAgICAgICBzY29wZV9Db25uZWN0cy5wdXNoKGFkZENvbm5lY3QoY29ubmVjdEJhc2UsIGNvbm5lY3RPcHRpb25zW2kgKyAxXSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gSW5pdGlhbGl6ZSBhIHNpbmdsZSBzbGlkZXIuXG4gICAgICAgIGZ1bmN0aW9uIGFkZFNsaWRlcihhZGRUYXJnZXQpIHtcbiAgICAgICAgICAgIC8vIEFwcGx5IGNsYXNzZXMgYW5kIGRhdGEgdG8gdGhlIHRhcmdldC5cbiAgICAgICAgICAgIGFkZENsYXNzKGFkZFRhcmdldCwgb3B0aW9ucy5jc3NDbGFzc2VzLnRhcmdldCk7XG5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLmRpciA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGFkZENsYXNzKGFkZFRhcmdldCwgb3B0aW9ucy5jc3NDbGFzc2VzLmx0cik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFkZENsYXNzKGFkZFRhcmdldCwgb3B0aW9ucy5jc3NDbGFzc2VzLnJ0bCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLm9ydCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGFkZENsYXNzKGFkZFRhcmdldCwgb3B0aW9ucy5jc3NDbGFzc2VzLmhvcml6b250YWwpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhZGRDbGFzcyhhZGRUYXJnZXQsIG9wdGlvbnMuY3NzQ2xhc3Nlcy52ZXJ0aWNhbCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciB0ZXh0RGlyZWN0aW9uID0gZ2V0Q29tcHV0ZWRTdHlsZShhZGRUYXJnZXQpLmRpcmVjdGlvbjtcblxuICAgICAgICAgICAgaWYgKHRleHREaXJlY3Rpb24gPT09IFwicnRsXCIpIHtcbiAgICAgICAgICAgICAgICBhZGRDbGFzcyhhZGRUYXJnZXQsIG9wdGlvbnMuY3NzQ2xhc3Nlcy50ZXh0RGlyZWN0aW9uUnRsKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYWRkQ2xhc3MoYWRkVGFyZ2V0LCBvcHRpb25zLmNzc0NsYXNzZXMudGV4dERpcmVjdGlvbkx0cik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBhZGROb2RlVG8oYWRkVGFyZ2V0LCBvcHRpb25zLmNzc0NsYXNzZXMuYmFzZSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBhZGRUb29sdGlwKGhhbmRsZSwgaGFuZGxlTnVtYmVyKSB7XG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMudG9vbHRpcHNbaGFuZGxlTnVtYmVyXSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGFkZE5vZGVUbyhoYW5kbGUuZmlyc3RDaGlsZCwgb3B0aW9ucy5jc3NDbGFzc2VzLnRvb2x0aXApO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaXNTbGlkZXJEaXNhYmxlZCgpIHtcbiAgICAgICAgICAgIHJldHVybiBzY29wZV9UYXJnZXQuaGFzQXR0cmlidXRlKFwiZGlzYWJsZWRcIik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBEaXNhYmxlIHRoZSBzbGlkZXIgZHJhZ2dpbmcgaWYgYW55IGhhbmRsZSBpcyBkaXNhYmxlZFxuICAgICAgICBmdW5jdGlvbiBpc0hhbmRsZURpc2FibGVkKGhhbmRsZU51bWJlcikge1xuICAgICAgICAgICAgdmFyIGhhbmRsZU9yaWdpbiA9IHNjb3BlX0hhbmRsZXNbaGFuZGxlTnVtYmVyXTtcbiAgICAgICAgICAgIHJldHVybiBoYW5kbGVPcmlnaW4uaGFzQXR0cmlidXRlKFwiZGlzYWJsZWRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiByZW1vdmVUb29sdGlwcygpIHtcbiAgICAgICAgICAgIGlmIChzY29wZV9Ub29sdGlwcykge1xuICAgICAgICAgICAgICAgIHJlbW92ZUV2ZW50KFwidXBkYXRlLnRvb2x0aXBzXCIpO1xuICAgICAgICAgICAgICAgIHNjb3BlX1Rvb2x0aXBzLmZvckVhY2goZnVuY3Rpb24odG9vbHRpcCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodG9vbHRpcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlRWxlbWVudCh0b29sdGlwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHNjb3BlX1Rvb2x0aXBzID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoZSB0b29sdGlwcyBvcHRpb24gaXMgYSBzaG9ydGhhbmQgZm9yIHVzaW5nIHRoZSAndXBkYXRlJyBldmVudC5cbiAgICAgICAgZnVuY3Rpb24gdG9vbHRpcHMoKSB7XG4gICAgICAgICAgICByZW1vdmVUb29sdGlwcygpO1xuXG4gICAgICAgICAgICAvLyBUb29sdGlwcyBhcmUgYWRkZWQgd2l0aCBvcHRpb25zLnRvb2x0aXBzIGluIG9yaWdpbmFsIG9yZGVyLlxuICAgICAgICAgICAgc2NvcGVfVG9vbHRpcHMgPSBzY29wZV9IYW5kbGVzLm1hcChhZGRUb29sdGlwKTtcblxuICAgICAgICAgICAgYmluZEV2ZW50KFwidXBkYXRlLnRvb2x0aXBzXCIsIGZ1bmN0aW9uKHZhbHVlcywgaGFuZGxlTnVtYmVyLCB1bmVuY29kZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXNjb3BlX1Rvb2x0aXBzW2hhbmRsZU51bWJlcl0pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBmb3JtYXR0ZWRWYWx1ZSA9IHZhbHVlc1toYW5kbGVOdW1iZXJdO1xuXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMudG9vbHRpcHNbaGFuZGxlTnVtYmVyXSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZWRWYWx1ZSA9IG9wdGlvbnMudG9vbHRpcHNbaGFuZGxlTnVtYmVyXS50byh1bmVuY29kZWRbaGFuZGxlTnVtYmVyXSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc2NvcGVfVG9vbHRpcHNbaGFuZGxlTnVtYmVyXS5pbm5lckhUTUwgPSBmb3JtYXR0ZWRWYWx1ZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gYXJpYSgpIHtcbiAgICAgICAgICAgIGJpbmRFdmVudChcInVwZGF0ZVwiLCBmdW5jdGlvbih2YWx1ZXMsIGhhbmRsZU51bWJlciwgdW5lbmNvZGVkLCB0YXAsIHBvc2l0aW9ucykge1xuICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBBcmlhIFZhbHVlcyBmb3IgYWxsIGhhbmRsZXMsIGFzIGEgY2hhbmdlIGluIG9uZSBjaGFuZ2VzIG1pbiBhbmQgbWF4IHZhbHVlcyBmb3IgdGhlIG5leHQuXG4gICAgICAgICAgICAgICAgc2NvcGVfSGFuZGxlTnVtYmVycy5mb3JFYWNoKGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBoYW5kbGUgPSBzY29wZV9IYW5kbGVzW2luZGV4XTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgbWluID0gY2hlY2tIYW5kbGVQb3NpdGlvbihzY29wZV9Mb2NhdGlvbnMsIGluZGV4LCAwLCB0cnVlLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1heCA9IGNoZWNrSGFuZGxlUG9zaXRpb24oc2NvcGVfTG9jYXRpb25zLCBpbmRleCwgMTAwLCB0cnVlLCB0cnVlLCB0cnVlKTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgbm93ID0gcG9zaXRpb25zW2luZGV4XTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBGb3JtYXR0ZWQgdmFsdWUgZm9yIGRpc3BsYXlcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRleHQgPSBvcHRpb25zLmFyaWFGb3JtYXQudG8odW5lbmNvZGVkW2luZGV4XSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gTWFwIHRvIHNsaWRlciByYW5nZSB2YWx1ZXNcbiAgICAgICAgICAgICAgICAgICAgbWluID0gc2NvcGVfU3BlY3RydW0uZnJvbVN0ZXBwaW5nKG1pbikudG9GaXhlZCgxKTtcbiAgICAgICAgICAgICAgICAgICAgbWF4ID0gc2NvcGVfU3BlY3RydW0uZnJvbVN0ZXBwaW5nKG1heCkudG9GaXhlZCgxKTtcbiAgICAgICAgICAgICAgICAgICAgbm93ID0gc2NvcGVfU3BlY3RydW0uZnJvbVN0ZXBwaW5nKG5vdykudG9GaXhlZCgxKTtcblxuICAgICAgICAgICAgICAgICAgICBoYW5kbGUuY2hpbGRyZW5bMF0uc2V0QXR0cmlidXRlKFwiYXJpYS12YWx1ZW1pblwiLCBtaW4pO1xuICAgICAgICAgICAgICAgICAgICBoYW5kbGUuY2hpbGRyZW5bMF0uc2V0QXR0cmlidXRlKFwiYXJpYS12YWx1ZW1heFwiLCBtYXgpO1xuICAgICAgICAgICAgICAgICAgICBoYW5kbGUuY2hpbGRyZW5bMF0uc2V0QXR0cmlidXRlKFwiYXJpYS12YWx1ZW5vd1wiLCBub3cpO1xuICAgICAgICAgICAgICAgICAgICBoYW5kbGUuY2hpbGRyZW5bMF0uc2V0QXR0cmlidXRlKFwiYXJpYS12YWx1ZXRleHRcIiwgdGV4dCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldEdyb3VwKG1vZGUsIHZhbHVlcywgc3RlcHBlZCkge1xuICAgICAgICAgICAgLy8gVXNlIHRoZSByYW5nZS5cbiAgICAgICAgICAgIGlmIChtb2RlID09PSBcInJhbmdlXCIgfHwgbW9kZSA9PT0gXCJzdGVwc1wiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNjb3BlX1NwZWN0cnVtLnhWYWw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChtb2RlID09PSBcImNvdW50XCIpIHtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWVzIDwgMikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6ICd2YWx1ZXMnICg+PSAyKSByZXF1aXJlZCBmb3IgbW9kZSAnY291bnQnLlwiKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBEaXZpZGUgMCAtIDEwMCBpbiAnY291bnQnIHBhcnRzLlxuICAgICAgICAgICAgICAgIHZhciBpbnRlcnZhbCA9IHZhbHVlcyAtIDE7XG4gICAgICAgICAgICAgICAgdmFyIHNwcmVhZCA9IDEwMCAvIGludGVydmFsO1xuXG4gICAgICAgICAgICAgICAgdmFsdWVzID0gW107XG5cbiAgICAgICAgICAgICAgICAvLyBMaXN0IHRoZXNlIHBhcnRzIGFuZCBoYXZlIHRoZW0gaGFuZGxlZCBhcyAncG9zaXRpb25zJy5cbiAgICAgICAgICAgICAgICB3aGlsZSAoaW50ZXJ2YWwtLSkge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZXNbaW50ZXJ2YWxdID0gaW50ZXJ2YWwgKiBzcHJlYWQ7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFsdWVzLnB1c2goMTAwKTtcblxuICAgICAgICAgICAgICAgIG1vZGUgPSBcInBvc2l0aW9uc1wiO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobW9kZSA9PT0gXCJwb3NpdGlvbnNcIikge1xuICAgICAgICAgICAgICAgIC8vIE1hcCBhbGwgcGVyY2VudGFnZXMgdG8gb24tcmFuZ2UgdmFsdWVzLlxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZXMubWFwKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzY29wZV9TcGVjdHJ1bS5mcm9tU3RlcHBpbmcoc3RlcHBlZCA/IHNjb3BlX1NwZWN0cnVtLmdldFN0ZXAodmFsdWUpIDogdmFsdWUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobW9kZSA9PT0gXCJ2YWx1ZXNcIikge1xuICAgICAgICAgICAgICAgIC8vIElmIHRoZSB2YWx1ZSBtdXN0IGJlIHN0ZXBwZWQsIGl0IG5lZWRzIHRvIGJlIGNvbnZlcnRlZCB0byBhIHBlcmNlbnRhZ2UgZmlyc3QuXG4gICAgICAgICAgICAgICAgaWYgKHN0ZXBwZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlcy5tYXAoZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENvbnZlcnQgdG8gcGVyY2VudGFnZSwgYXBwbHkgc3RlcCwgcmV0dXJuIHRvIHZhbHVlLlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNjb3BlX1NwZWN0cnVtLmZyb21TdGVwcGluZyhzY29wZV9TcGVjdHJ1bS5nZXRTdGVwKHNjb3BlX1NwZWN0cnVtLnRvU3RlcHBpbmcodmFsdWUpKSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIE90aGVyd2lzZSwgd2UgY2FuIHNpbXBseSB1c2UgdGhlIHZhbHVlcy5cbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWVzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2VuZXJhdGVTcHJlYWQoZGVuc2l0eSwgbW9kZSwgZ3JvdXApIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIHNhZmVJbmNyZW1lbnQodmFsdWUsIGluY3JlbWVudCkge1xuICAgICAgICAgICAgICAgIC8vIEF2b2lkIGZsb2F0aW5nIHBvaW50IHZhcmlhbmNlIGJ5IGRyb3BwaW5nIHRoZSBzbWFsbGVzdCBkZWNpbWFsIHBsYWNlcy5cbiAgICAgICAgICAgICAgICByZXR1cm4gKHZhbHVlICsgaW5jcmVtZW50KS50b0ZpeGVkKDcpIC8gMTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGluZGV4ZXMgPSB7fTtcbiAgICAgICAgICAgIHZhciBmaXJzdEluUmFuZ2UgPSBzY29wZV9TcGVjdHJ1bS54VmFsWzBdO1xuICAgICAgICAgICAgdmFyIGxhc3RJblJhbmdlID0gc2NvcGVfU3BlY3RydW0ueFZhbFtzY29wZV9TcGVjdHJ1bS54VmFsLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgdmFyIGlnbm9yZUZpcnN0ID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgaWdub3JlTGFzdCA9IGZhbHNlO1xuICAgICAgICAgICAgdmFyIHByZXZQY3QgPSAwO1xuXG4gICAgICAgICAgICAvLyBDcmVhdGUgYSBjb3B5IG9mIHRoZSBncm91cCwgc29ydCBpdCBhbmQgZmlsdGVyIGF3YXkgYWxsIGR1cGxpY2F0ZXMuXG4gICAgICAgICAgICBncm91cCA9IHVuaXF1ZShcbiAgICAgICAgICAgICAgICBncm91cC5zbGljZSgpLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYSAtIGI7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB0aGUgcmFuZ2Ugc3RhcnRzIHdpdGggdGhlIGZpcnN0IGVsZW1lbnQuXG4gICAgICAgICAgICBpZiAoZ3JvdXBbMF0gIT09IGZpcnN0SW5SYW5nZSkge1xuICAgICAgICAgICAgICAgIGdyb3VwLnVuc2hpZnQoZmlyc3RJblJhbmdlKTtcbiAgICAgICAgICAgICAgICBpZ25vcmVGaXJzdCA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIExpa2V3aXNlIGZvciB0aGUgbGFzdCBvbmUuXG4gICAgICAgICAgICBpZiAoZ3JvdXBbZ3JvdXAubGVuZ3RoIC0gMV0gIT09IGxhc3RJblJhbmdlKSB7XG4gICAgICAgICAgICAgICAgZ3JvdXAucHVzaChsYXN0SW5SYW5nZSk7XG4gICAgICAgICAgICAgICAgaWdub3JlTGFzdCA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGdyb3VwLmZvckVhY2goZnVuY3Rpb24oY3VycmVudCwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAvLyBHZXQgdGhlIGN1cnJlbnQgc3RlcCBhbmQgdGhlIGxvd2VyICsgdXBwZXIgcG9zaXRpb25zLlxuICAgICAgICAgICAgICAgIHZhciBzdGVwO1xuICAgICAgICAgICAgICAgIHZhciBpO1xuICAgICAgICAgICAgICAgIHZhciBxO1xuICAgICAgICAgICAgICAgIHZhciBsb3cgPSBjdXJyZW50O1xuICAgICAgICAgICAgICAgIHZhciBoaWdoID0gZ3JvdXBbaW5kZXggKyAxXTtcbiAgICAgICAgICAgICAgICB2YXIgbmV3UGN0O1xuICAgICAgICAgICAgICAgIHZhciBwY3REaWZmZXJlbmNlO1xuICAgICAgICAgICAgICAgIHZhciBwY3RQb3M7XG4gICAgICAgICAgICAgICAgdmFyIHR5cGU7XG4gICAgICAgICAgICAgICAgdmFyIHN0ZXBzO1xuICAgICAgICAgICAgICAgIHZhciByZWFsU3RlcHM7XG4gICAgICAgICAgICAgICAgdmFyIHN0ZXBTaXplO1xuICAgICAgICAgICAgICAgIHZhciBpc1N0ZXBzID0gbW9kZSA9PT0gXCJzdGVwc1wiO1xuXG4gICAgICAgICAgICAgICAgLy8gV2hlbiB1c2luZyAnc3RlcHMnIG1vZGUsIHVzZSB0aGUgcHJvdmlkZWQgc3RlcHMuXG4gICAgICAgICAgICAgICAgLy8gT3RoZXJ3aXNlLCB3ZSdsbCBzdGVwIG9uIHRvIHRoZSBuZXh0IHN1YnJhbmdlLlxuICAgICAgICAgICAgICAgIGlmIChpc1N0ZXBzKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0ZXAgPSBzY29wZV9TcGVjdHJ1bS54TnVtU3RlcHNbaW5kZXhdO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIERlZmF1bHQgdG8gYSAnZnVsbCcgc3RlcC5cbiAgICAgICAgICAgICAgICBpZiAoIXN0ZXApIHtcbiAgICAgICAgICAgICAgICAgICAgc3RlcCA9IGhpZ2ggLSBsb3c7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gTG93IGNhbiBiZSAwLCBzbyB0ZXN0IGZvciBmYWxzZS4gSWYgaGlnaCBpcyB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgLy8gd2UgYXJlIGF0IHRoZSBsYXN0IHN1YnJhbmdlLiBJbmRleCAwIGlzIGFscmVhZHkgaGFuZGxlZC5cbiAgICAgICAgICAgICAgICBpZiAobG93ID09PSBmYWxzZSB8fCBoaWdoID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSBzdGVwIGlzbid0IDAsIHdoaWNoIHdvdWxkIGNhdXNlIGFuIGluZmluaXRlIGxvb3AgKCM2NTQpXG4gICAgICAgICAgICAgICAgc3RlcCA9IE1hdGgubWF4KHN0ZXAsIDAuMDAwMDAwMSk7XG5cbiAgICAgICAgICAgICAgICAvLyBGaW5kIGFsbCBzdGVwcyBpbiB0aGUgc3VicmFuZ2UuXG4gICAgICAgICAgICAgICAgZm9yIChpID0gbG93OyBpIDw9IGhpZ2g7IGkgPSBzYWZlSW5jcmVtZW50KGksIHN0ZXApKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEdldCB0aGUgcGVyY2VudGFnZSB2YWx1ZSBmb3IgdGhlIGN1cnJlbnQgc3RlcCxcbiAgICAgICAgICAgICAgICAgICAgLy8gY2FsY3VsYXRlIHRoZSBzaXplIGZvciB0aGUgc3VicmFuZ2UuXG4gICAgICAgICAgICAgICAgICAgIG5ld1BjdCA9IHNjb3BlX1NwZWN0cnVtLnRvU3RlcHBpbmcoaSk7XG4gICAgICAgICAgICAgICAgICAgIHBjdERpZmZlcmVuY2UgPSBuZXdQY3QgLSBwcmV2UGN0O1xuXG4gICAgICAgICAgICAgICAgICAgIHN0ZXBzID0gcGN0RGlmZmVyZW5jZSAvIGRlbnNpdHk7XG4gICAgICAgICAgICAgICAgICAgIHJlYWxTdGVwcyA9IE1hdGgucm91bmQoc3RlcHMpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgcmF0aW8gcmVwcmVzZW50cyB0aGUgYW1vdW50IG9mIHBlcmNlbnRhZ2Utc3BhY2UgYSBwb2ludCBpbmRpY2F0ZXMuXG4gICAgICAgICAgICAgICAgICAgIC8vIEZvciBhIGRlbnNpdHkgMSB0aGUgcG9pbnRzL3BlcmNlbnRhZ2UgPSAxLiBGb3IgZGVuc2l0eSAyLCB0aGF0IHBlcmNlbnRhZ2UgbmVlZHMgdG8gYmUgcmUtZGl2aWRlZC5cbiAgICAgICAgICAgICAgICAgICAgLy8gUm91bmQgdGhlIHBlcmNlbnRhZ2Ugb2Zmc2V0IHRvIGFuIGV2ZW4gbnVtYmVyLCB0aGVuIGRpdmlkZSBieSB0d29cbiAgICAgICAgICAgICAgICAgICAgLy8gdG8gc3ByZWFkIHRoZSBvZmZzZXQgb24gYm90aCBzaWRlcyBvZiB0aGUgcmFuZ2UuXG4gICAgICAgICAgICAgICAgICAgIHN0ZXBTaXplID0gcGN0RGlmZmVyZW5jZSAvIHJlYWxTdGVwcztcblxuICAgICAgICAgICAgICAgICAgICAvLyBEaXZpZGUgYWxsIHBvaW50cyBldmVubHksIGFkZGluZyB0aGUgY29ycmVjdCBudW1iZXIgdG8gdGhpcyBzdWJyYW5nZS5cbiAgICAgICAgICAgICAgICAgICAgLy8gUnVuIHVwIHRvIDw9IHNvIHRoYXQgMTAwJSBnZXRzIGEgcG9pbnQsIGV2ZW50IGlmIGlnbm9yZUxhc3QgaXMgc2V0LlxuICAgICAgICAgICAgICAgICAgICBmb3IgKHEgPSAxOyBxIDw9IHJlYWxTdGVwczsgcSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgcmF0aW8gYmV0d2VlbiB0aGUgcm91bmRlZCB2YWx1ZSBhbmQgdGhlIGFjdHVhbCBzaXplIG1pZ2h0IGJlIH4xJSBvZmYuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDb3JyZWN0IHRoZSBwZXJjZW50YWdlIG9mZnNldCBieSB0aGUgbnVtYmVyIG9mIHBvaW50c1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcGVyIHN1YnJhbmdlLiBkZW5zaXR5ID0gMSB3aWxsIHJlc3VsdCBpbiAxMDAgcG9pbnRzIG9uIHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZnVsbCByYW5nZSwgMiBmb3IgNTAsIDQgZm9yIDI1LCBldGMuXG4gICAgICAgICAgICAgICAgICAgICAgICBwY3RQb3MgPSBwcmV2UGN0ICsgcSAqIHN0ZXBTaXplO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXhlc1twY3RQb3MudG9GaXhlZCg1KV0gPSBbc2NvcGVfU3BlY3RydW0uZnJvbVN0ZXBwaW5nKHBjdFBvcyksIDBdO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gRGV0ZXJtaW5lIHRoZSBwb2ludCB0eXBlLlxuICAgICAgICAgICAgICAgICAgICB0eXBlID0gZ3JvdXAuaW5kZXhPZihpKSA+IC0xID8gUElQU19MQVJHRV9WQUxVRSA6IGlzU3RlcHMgPyBQSVBTX1NNQUxMX1ZBTFVFIDogUElQU19OT19WQUxVRTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBFbmZvcmNlIHRoZSAnaWdub3JlRmlyc3QnIG9wdGlvbiBieSBvdmVyd3JpdGluZyB0aGUgdHlwZSBmb3IgMC5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpbmRleCAmJiBpZ25vcmVGaXJzdCAmJiBpICE9PSBoaWdoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlID0gMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmICghKGkgPT09IGhpZ2ggJiYgaWdub3JlTGFzdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1hcmsgdGhlICd0eXBlJyBvZiB0aGlzIHBvaW50LiAwID0gcGxhaW4sIDEgPSByZWFsIHZhbHVlLCAyID0gc3RlcCB2YWx1ZS5cbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ZXNbbmV3UGN0LnRvRml4ZWQoNSldID0gW2ksIHR5cGVdO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBwZXJjZW50YWdlIGNvdW50LlxuICAgICAgICAgICAgICAgICAgICBwcmV2UGN0ID0gbmV3UGN0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gaW5kZXhlcztcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGFkZE1hcmtpbmcoc3ByZWFkLCBmaWx0ZXJGdW5jLCBmb3JtYXR0ZXIpIHtcbiAgICAgICAgICAgIHZhciBlbGVtZW50ID0gc2NvcGVfRG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblxuICAgICAgICAgICAgdmFyIHZhbHVlU2l6ZUNsYXNzZXMgPSBbXTtcbiAgICAgICAgICAgIHZhbHVlU2l6ZUNsYXNzZXNbUElQU19OT19WQUxVRV0gPSBvcHRpb25zLmNzc0NsYXNzZXMudmFsdWVOb3JtYWw7XG4gICAgICAgICAgICB2YWx1ZVNpemVDbGFzc2VzW1BJUFNfTEFSR0VfVkFMVUVdID0gb3B0aW9ucy5jc3NDbGFzc2VzLnZhbHVlTGFyZ2U7XG4gICAgICAgICAgICB2YWx1ZVNpemVDbGFzc2VzW1BJUFNfU01BTExfVkFMVUVdID0gb3B0aW9ucy5jc3NDbGFzc2VzLnZhbHVlU3ViO1xuXG4gICAgICAgICAgICB2YXIgbWFya2VyU2l6ZUNsYXNzZXMgPSBbXTtcbiAgICAgICAgICAgIG1hcmtlclNpemVDbGFzc2VzW1BJUFNfTk9fVkFMVUVdID0gb3B0aW9ucy5jc3NDbGFzc2VzLm1hcmtlck5vcm1hbDtcbiAgICAgICAgICAgIG1hcmtlclNpemVDbGFzc2VzW1BJUFNfTEFSR0VfVkFMVUVdID0gb3B0aW9ucy5jc3NDbGFzc2VzLm1hcmtlckxhcmdlO1xuICAgICAgICAgICAgbWFya2VyU2l6ZUNsYXNzZXNbUElQU19TTUFMTF9WQUxVRV0gPSBvcHRpb25zLmNzc0NsYXNzZXMubWFya2VyU3ViO1xuXG4gICAgICAgICAgICB2YXIgdmFsdWVPcmllbnRhdGlvbkNsYXNzZXMgPSBbb3B0aW9ucy5jc3NDbGFzc2VzLnZhbHVlSG9yaXpvbnRhbCwgb3B0aW9ucy5jc3NDbGFzc2VzLnZhbHVlVmVydGljYWxdO1xuICAgICAgICAgICAgdmFyIG1hcmtlck9yaWVudGF0aW9uQ2xhc3NlcyA9IFtvcHRpb25zLmNzc0NsYXNzZXMubWFya2VySG9yaXpvbnRhbCwgb3B0aW9ucy5jc3NDbGFzc2VzLm1hcmtlclZlcnRpY2FsXTtcblxuICAgICAgICAgICAgYWRkQ2xhc3MoZWxlbWVudCwgb3B0aW9ucy5jc3NDbGFzc2VzLnBpcHMpO1xuICAgICAgICAgICAgYWRkQ2xhc3MoZWxlbWVudCwgb3B0aW9ucy5vcnQgPT09IDAgPyBvcHRpb25zLmNzc0NsYXNzZXMucGlwc0hvcml6b250YWwgOiBvcHRpb25zLmNzc0NsYXNzZXMucGlwc1ZlcnRpY2FsKTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0Q2xhc3Nlcyh0eXBlLCBzb3VyY2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgYSA9IHNvdXJjZSA9PT0gb3B0aW9ucy5jc3NDbGFzc2VzLnZhbHVlO1xuICAgICAgICAgICAgICAgIHZhciBvcmllbnRhdGlvbkNsYXNzZXMgPSBhID8gdmFsdWVPcmllbnRhdGlvbkNsYXNzZXMgOiBtYXJrZXJPcmllbnRhdGlvbkNsYXNzZXM7XG4gICAgICAgICAgICAgICAgdmFyIHNpemVDbGFzc2VzID0gYSA/IHZhbHVlU2l6ZUNsYXNzZXMgOiBtYXJrZXJTaXplQ2xhc3NlcztcblxuICAgICAgICAgICAgICAgIHJldHVybiBzb3VyY2UgKyBcIiBcIiArIG9yaWVudGF0aW9uQ2xhc3Nlc1tvcHRpb25zLm9ydF0gKyBcIiBcIiArIHNpemVDbGFzc2VzW3R5cGVdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBhZGRTcHJlYWQob2Zmc2V0LCB2YWx1ZSwgdHlwZSkge1xuICAgICAgICAgICAgICAgIC8vIEFwcGx5IHRoZSBmaWx0ZXIgZnVuY3Rpb24sIGlmIGl0IGlzIHNldC5cbiAgICAgICAgICAgICAgICB0eXBlID0gZmlsdGVyRnVuYyA/IGZpbHRlckZ1bmModmFsdWUsIHR5cGUpIDogdHlwZTtcblxuICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSBQSVBTX05PTkUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIEFkZCBhIG1hcmtlciBmb3IgZXZlcnkgcG9pbnRcbiAgICAgICAgICAgICAgICB2YXIgbm9kZSA9IGFkZE5vZGVUbyhlbGVtZW50LCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgbm9kZS5jbGFzc05hbWUgPSBnZXRDbGFzc2VzKHR5cGUsIG9wdGlvbnMuY3NzQ2xhc3Nlcy5tYXJrZXIpO1xuICAgICAgICAgICAgICAgIG5vZGUuc3R5bGVbb3B0aW9ucy5zdHlsZV0gPSBvZmZzZXQgKyBcIiVcIjtcblxuICAgICAgICAgICAgICAgIC8vIFZhbHVlcyBhcmUgb25seSBhcHBlbmRlZCBmb3IgcG9pbnRzIG1hcmtlZCAnMScgb3IgJzInLlxuICAgICAgICAgICAgICAgIGlmICh0eXBlID4gUElQU19OT19WQUxVRSkge1xuICAgICAgICAgICAgICAgICAgICBub2RlID0gYWRkTm9kZVRvKGVsZW1lbnQsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5jbGFzc05hbWUgPSBnZXRDbGFzc2VzKHR5cGUsIG9wdGlvbnMuY3NzQ2xhc3Nlcy52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKFwiZGF0YS12YWx1ZVwiLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUuc3R5bGVbb3B0aW9ucy5zdHlsZV0gPSBvZmZzZXQgKyBcIiVcIjtcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5pbm5lckhUTUwgPSBmb3JtYXR0ZXIudG8odmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQXBwZW5kIGFsbCBwb2ludHMuXG4gICAgICAgICAgICBPYmplY3Qua2V5cyhzcHJlYWQpLmZvckVhY2goZnVuY3Rpb24ob2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgYWRkU3ByZWFkKG9mZnNldCwgc3ByZWFkW29mZnNldF1bMF0sIHNwcmVhZFtvZmZzZXRdWzFdKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHJlbW92ZVBpcHMoKSB7XG4gICAgICAgICAgICBpZiAoc2NvcGVfUGlwcykge1xuICAgICAgICAgICAgICAgIHJlbW92ZUVsZW1lbnQoc2NvcGVfUGlwcyk7XG4gICAgICAgICAgICAgICAgc2NvcGVfUGlwcyA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBwaXBzKGdyaWQpIHtcbiAgICAgICAgICAgIC8vIEZpeCAjNjY5XG4gICAgICAgICAgICByZW1vdmVQaXBzKCk7XG5cbiAgICAgICAgICAgIHZhciBtb2RlID0gZ3JpZC5tb2RlO1xuICAgICAgICAgICAgdmFyIGRlbnNpdHkgPSBncmlkLmRlbnNpdHkgfHwgMTtcbiAgICAgICAgICAgIHZhciBmaWx0ZXIgPSBncmlkLmZpbHRlciB8fCBmYWxzZTtcbiAgICAgICAgICAgIHZhciB2YWx1ZXMgPSBncmlkLnZhbHVlcyB8fCBmYWxzZTtcbiAgICAgICAgICAgIHZhciBzdGVwcGVkID0gZ3JpZC5zdGVwcGVkIHx8IGZhbHNlO1xuICAgICAgICAgICAgdmFyIGdyb3VwID0gZ2V0R3JvdXAobW9kZSwgdmFsdWVzLCBzdGVwcGVkKTtcbiAgICAgICAgICAgIHZhciBzcHJlYWQgPSBnZW5lcmF0ZVNwcmVhZChkZW5zaXR5LCBtb2RlLCBncm91cCk7XG4gICAgICAgICAgICB2YXIgZm9ybWF0ID0gZ3JpZC5mb3JtYXQgfHwge1xuICAgICAgICAgICAgICAgIHRvOiBNYXRoLnJvdW5kXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBzY29wZV9QaXBzID0gc2NvcGVfVGFyZ2V0LmFwcGVuZENoaWxkKGFkZE1hcmtpbmcoc3ByZWFkLCBmaWx0ZXIsIGZvcm1hdCkpO1xuXG4gICAgICAgICAgICByZXR1cm4gc2NvcGVfUGlwcztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNob3J0aGFuZCBmb3IgYmFzZSBkaW1lbnNpb25zLlxuICAgICAgICBmdW5jdGlvbiBiYXNlU2l6ZSgpIHtcbiAgICAgICAgICAgIHZhciByZWN0ID0gc2NvcGVfQmFzZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgIHZhciBhbHQgPSBcIm9mZnNldFwiICsgW1wiV2lkdGhcIiwgXCJIZWlnaHRcIl1bb3B0aW9ucy5vcnRdO1xuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMub3J0ID09PSAwID8gcmVjdC53aWR0aCB8fCBzY29wZV9CYXNlW2FsdF0gOiByZWN0LmhlaWdodCB8fCBzY29wZV9CYXNlW2FsdF07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBIYW5kbGVyIGZvciBhdHRhY2hpbmcgZXZlbnRzIHRyb3VnaCBhIHByb3h5LlxuICAgICAgICBmdW5jdGlvbiBhdHRhY2hFdmVudChldmVudHMsIGVsZW1lbnQsIGNhbGxiYWNrLCBkYXRhKSB7XG4gICAgICAgICAgICAvLyBUaGlzIGZ1bmN0aW9uIGNhbiBiZSB1c2VkIHRvICdmaWx0ZXInIGV2ZW50cyB0byB0aGUgc2xpZGVyLlxuICAgICAgICAgICAgLy8gZWxlbWVudCBpcyBhIG5vZGUsIG5vdCBhIG5vZGVMaXN0XG5cbiAgICAgICAgICAgIHZhciBtZXRob2QgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgZSA9IGZpeEV2ZW50KGUsIGRhdGEucGFnZU9mZnNldCwgZGF0YS50YXJnZXQgfHwgZWxlbWVudCk7XG5cbiAgICAgICAgICAgICAgICAvLyBmaXhFdmVudCByZXR1cm5zIGZhbHNlIGlmIHRoaXMgZXZlbnQgaGFzIGEgZGlmZmVyZW50IHRhcmdldFxuICAgICAgICAgICAgICAgIC8vIHdoZW4gaGFuZGxpbmcgKG11bHRpLSkgdG91Y2ggZXZlbnRzO1xuICAgICAgICAgICAgICAgIGlmICghZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gZG9Ob3RSZWplY3QgaXMgcGFzc2VkIGJ5IGFsbCBlbmQgZXZlbnRzIHRvIG1ha2Ugc3VyZSByZWxlYXNlZCB0b3VjaGVzXG4gICAgICAgICAgICAgICAgLy8gYXJlIG5vdCByZWplY3RlZCwgbGVhdmluZyB0aGUgc2xpZGVyIFwic3R1Y2tcIiB0byB0aGUgY3Vyc29yO1xuICAgICAgICAgICAgICAgIGlmIChpc1NsaWRlckRpc2FibGVkKCkgJiYgIWRhdGEuZG9Ob3RSZWplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFN0b3AgaWYgYW4gYWN0aXZlICd0YXAnIHRyYW5zaXRpb24gaXMgdGFraW5nIHBsYWNlLlxuICAgICAgICAgICAgICAgIGlmIChoYXNDbGFzcyhzY29wZV9UYXJnZXQsIG9wdGlvbnMuY3NzQ2xhc3Nlcy50YXApICYmICFkYXRhLmRvTm90UmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBJZ25vcmUgcmlnaHQgb3IgbWlkZGxlIGNsaWNrcyBvbiBzdGFydCAjNDU0XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50cyA9PT0gYWN0aW9ucy5zdGFydCAmJiBlLmJ1dHRvbnMgIT09IHVuZGVmaW5lZCAmJiBlLmJ1dHRvbnMgPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBJZ25vcmUgcmlnaHQgb3IgbWlkZGxlIGNsaWNrcyBvbiBzdGFydCAjNDU0XG4gICAgICAgICAgICAgICAgaWYgKGRhdGEuaG92ZXIgJiYgZS5idXR0b25zKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyAnc3VwcG9ydHNQYXNzaXZlJyBpcyBvbmx5IHRydWUgaWYgYSBicm93c2VyIGFsc28gc3VwcG9ydHMgdG91Y2gtYWN0aW9uOiBub25lIGluIENTUy5cbiAgICAgICAgICAgICAgICAvLyBpT1Mgc2FmYXJpIGRvZXMgbm90LCBzbyBpdCBkb2Vzbid0IGdldCB0byBiZW5lZml0IGZyb20gcGFzc2l2ZSBzY3JvbGxpbmcuIGlPUyBkb2VzIHN1cHBvcnRcbiAgICAgICAgICAgICAgICAvLyB0b3VjaC1hY3Rpb246IG1hbmlwdWxhdGlvbiwgYnV0IHRoYXQgYWxsb3dzIHBhbm5pbmcsIHdoaWNoIGJyZWFrc1xuICAgICAgICAgICAgICAgIC8vIHNsaWRlcnMgYWZ0ZXIgem9vbWluZy9vbiBub24tcmVzcG9uc2l2ZSBwYWdlcy5cbiAgICAgICAgICAgICAgICAvLyBTZWU6IGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzMxMTJcbiAgICAgICAgICAgICAgICBpZiAoIXN1cHBvcnRzUGFzc2l2ZSkge1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZS5jYWxjUG9pbnQgPSBlLnBvaW50c1tvcHRpb25zLm9ydF07XG5cbiAgICAgICAgICAgICAgICAvLyBDYWxsIHRoZSBldmVudCBoYW5kbGVyIHdpdGggdGhlIGV2ZW50IFsgYW5kIGFkZGl0aW9uYWwgZGF0YSBdLlxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGUsIGRhdGEpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdmFyIG1ldGhvZHMgPSBbXTtcblxuICAgICAgICAgICAgLy8gQmluZCBhIGNsb3N1cmUgb24gdGhlIHRhcmdldCBmb3IgZXZlcnkgZXZlbnQgdHlwZS5cbiAgICAgICAgICAgIGV2ZW50cy5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihldmVudE5hbWUpIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBtZXRob2QsIHN1cHBvcnRzUGFzc2l2ZSA/IHsgcGFzc2l2ZTogdHJ1ZSB9IDogZmFsc2UpO1xuICAgICAgICAgICAgICAgIG1ldGhvZHMucHVzaChbZXZlbnROYW1lLCBtZXRob2RdKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gbWV0aG9kcztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFByb3ZpZGUgYSBjbGVhbiBldmVudCB3aXRoIHN0YW5kYXJkaXplZCBvZmZzZXQgdmFsdWVzLlxuICAgICAgICBmdW5jdGlvbiBmaXhFdmVudChlLCBwYWdlT2Zmc2V0LCBldmVudFRhcmdldCkge1xuICAgICAgICAgICAgLy8gRmlsdGVyIHRoZSBldmVudCB0byByZWdpc3RlciB0aGUgdHlwZSwgd2hpY2ggY2FuIGJlXG4gICAgICAgICAgICAvLyB0b3VjaCwgbW91c2Ugb3IgcG9pbnRlci4gT2Zmc2V0IGNoYW5nZXMgbmVlZCB0byBiZVxuICAgICAgICAgICAgLy8gbWFkZSBvbiBhbiBldmVudCBzcGVjaWZpYyBiYXNpcy5cbiAgICAgICAgICAgIHZhciB0b3VjaCA9IGUudHlwZS5pbmRleE9mKFwidG91Y2hcIikgPT09IDA7XG4gICAgICAgICAgICB2YXIgbW91c2UgPSBlLnR5cGUuaW5kZXhPZihcIm1vdXNlXCIpID09PSAwO1xuICAgICAgICAgICAgdmFyIHBvaW50ZXIgPSBlLnR5cGUuaW5kZXhPZihcInBvaW50ZXJcIikgPT09IDA7XG5cbiAgICAgICAgICAgIHZhciB4O1xuICAgICAgICAgICAgdmFyIHk7XG5cbiAgICAgICAgICAgIC8vIElFMTAgaW1wbGVtZW50ZWQgcG9pbnRlciBldmVudHMgd2l0aCBhIHByZWZpeDtcbiAgICAgICAgICAgIGlmIChlLnR5cGUuaW5kZXhPZihcIk1TUG9pbnRlclwiKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHBvaW50ZXIgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBUaGUgb25seSB0aGluZyBvbmUgaGFuZGxlIHNob3VsZCBiZSBjb25jZXJuZWQgYWJvdXQgaXMgdGhlIHRvdWNoZXMgdGhhdCBvcmlnaW5hdGVkIG9uIHRvcCBvZiBpdC5cbiAgICAgICAgICAgIGlmICh0b3VjaCkge1xuICAgICAgICAgICAgICAgIC8vIFJldHVybnMgdHJ1ZSBpZiBhIHRvdWNoIG9yaWdpbmF0ZWQgb24gdGhlIHRhcmdldC5cbiAgICAgICAgICAgICAgICB2YXIgaXNUb3VjaE9uVGFyZ2V0ID0gZnVuY3Rpb24oY2hlY2tUb3VjaCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tUb3VjaC50YXJnZXQgPT09IGV2ZW50VGFyZ2V0IHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudFRhcmdldC5jb250YWlucyhjaGVja1RvdWNoLnRhcmdldCkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIChjaGVja1RvdWNoLnRhcmdldC5zaGFkb3dSb290ICYmIGNoZWNrVG91Y2gudGFyZ2V0LnNoYWRvd1Jvb3QuY29udGFpbnMoZXZlbnRUYXJnZXQpKVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAvLyBJbiB0aGUgY2FzZSBvZiB0b3VjaHN0YXJ0IGV2ZW50cywgd2UgbmVlZCB0byBtYWtlIHN1cmUgdGhlcmUgaXMgc3RpbGwgbm8gbW9yZSB0aGFuIG9uZVxuICAgICAgICAgICAgICAgIC8vIHRvdWNoIG9uIHRoZSB0YXJnZXQgc28gd2UgbG9vayBhbW9uZ3N0IGFsbCB0b3VjaGVzLlxuICAgICAgICAgICAgICAgIGlmIChlLnR5cGUgPT09IFwidG91Y2hzdGFydFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXRUb3VjaGVzID0gQXJyYXkucHJvdG90eXBlLmZpbHRlci5jYWxsKGUudG91Y2hlcywgaXNUb3VjaE9uVGFyZ2V0KTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBEbyBub3Qgc3VwcG9ydCBtb3JlIHRoYW4gb25lIHRvdWNoIHBlciBoYW5kbGUuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXRUb3VjaGVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHggPSB0YXJnZXRUb3VjaGVzWzBdLnBhZ2VYO1xuICAgICAgICAgICAgICAgICAgICB5ID0gdGFyZ2V0VG91Y2hlc1swXS5wYWdlWTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBJbiB0aGUgb3RoZXIgY2FzZXMsIGZpbmQgb24gY2hhbmdlZFRvdWNoZXMgaXMgZW5vdWdoLlxuICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0VG91Y2ggPSBBcnJheS5wcm90b3R5cGUuZmluZC5jYWxsKGUuY2hhbmdlZFRvdWNoZXMsIGlzVG91Y2hPblRhcmdldCk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQ2FuY2VsIGlmIHRoZSB0YXJnZXQgdG91Y2ggaGFzIG5vdCBtb3ZlZC5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0YXJnZXRUb3VjaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgeCA9IHRhcmdldFRvdWNoLnBhZ2VYO1xuICAgICAgICAgICAgICAgICAgICB5ID0gdGFyZ2V0VG91Y2gucGFnZVk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBwYWdlT2Zmc2V0ID0gcGFnZU9mZnNldCB8fCBnZXRQYWdlT2Zmc2V0KHNjb3BlX0RvY3VtZW50KTtcblxuICAgICAgICAgICAgaWYgKG1vdXNlIHx8IHBvaW50ZXIpIHtcbiAgICAgICAgICAgICAgICB4ID0gZS5jbGllbnRYICsgcGFnZU9mZnNldC54O1xuICAgICAgICAgICAgICAgIHkgPSBlLmNsaWVudFkgKyBwYWdlT2Zmc2V0Lnk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGUucGFnZU9mZnNldCA9IHBhZ2VPZmZzZXQ7XG4gICAgICAgICAgICBlLnBvaW50cyA9IFt4LCB5XTtcbiAgICAgICAgICAgIGUuY3Vyc29yID0gbW91c2UgfHwgcG9pbnRlcjsgLy8gRml4ICM0MzVcblxuICAgICAgICAgICAgcmV0dXJuIGU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUcmFuc2xhdGUgYSBjb29yZGluYXRlIGluIHRoZSBkb2N1bWVudCB0byBhIHBlcmNlbnRhZ2Ugb24gdGhlIHNsaWRlclxuICAgICAgICBmdW5jdGlvbiBjYWxjUG9pbnRUb1BlcmNlbnRhZ2UoY2FsY1BvaW50KSB7XG4gICAgICAgICAgICB2YXIgbG9jYXRpb24gPSBjYWxjUG9pbnQgLSBvZmZzZXQoc2NvcGVfQmFzZSwgb3B0aW9ucy5vcnQpO1xuICAgICAgICAgICAgdmFyIHByb3Bvc2FsID0gKGxvY2F0aW9uICogMTAwKSAvIGJhc2VTaXplKCk7XG5cbiAgICAgICAgICAgIC8vIENsYW1wIHByb3Bvc2FsIGJldHdlZW4gMCUgYW5kIDEwMCVcbiAgICAgICAgICAgIC8vIE91dC1vZi1ib3VuZCBjb29yZGluYXRlcyBtYXkgb2NjdXIgd2hlbiAubm9VaS1iYXNlIHBzZXVkby1lbGVtZW50c1xuICAgICAgICAgICAgLy8gYXJlIHVzZWQgKGUuZy4gY29udGFpbmVkIGhhbmRsZXMgZmVhdHVyZSlcbiAgICAgICAgICAgIHByb3Bvc2FsID0gbGltaXQocHJvcG9zYWwpO1xuXG4gICAgICAgICAgICByZXR1cm4gb3B0aW9ucy5kaXIgPyAxMDAgLSBwcm9wb3NhbCA6IHByb3Bvc2FsO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRmluZCBoYW5kbGUgY2xvc2VzdCB0byBhIGNlcnRhaW4gcGVyY2VudGFnZSBvbiB0aGUgc2xpZGVyXG4gICAgICAgIGZ1bmN0aW9uIGdldENsb3Nlc3RIYW5kbGUoY2xpY2tlZFBvc2l0aW9uKSB7XG4gICAgICAgICAgICB2YXIgc21hbGxlc3REaWZmZXJlbmNlID0gMTAwO1xuICAgICAgICAgICAgdmFyIGhhbmRsZU51bWJlciA9IGZhbHNlO1xuXG4gICAgICAgICAgICBzY29wZV9IYW5kbGVzLmZvckVhY2goZnVuY3Rpb24oaGFuZGxlLCBpbmRleCkge1xuICAgICAgICAgICAgICAgIC8vIERpc2FibGVkIGhhbmRsZXMgYXJlIGlnbm9yZWRcbiAgICAgICAgICAgICAgICBpZiAoaXNIYW5kbGVEaXNhYmxlZChpbmRleCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBoYW5kbGVQb3NpdGlvbiA9IHNjb3BlX0xvY2F0aW9uc1tpbmRleF07XG4gICAgICAgICAgICAgICAgdmFyIGRpZmZlcmVuY2VXaXRoVGhpc0hhbmRsZSA9IE1hdGguYWJzKGhhbmRsZVBvc2l0aW9uIC0gY2xpY2tlZFBvc2l0aW9uKTtcblxuICAgICAgICAgICAgICAgIC8vIEluaXRpYWwgc3RhdGVcbiAgICAgICAgICAgICAgICB2YXIgY2xpY2tBdEVkZ2UgPSBkaWZmZXJlbmNlV2l0aFRoaXNIYW5kbGUgPT09IDEwMCAmJiBzbWFsbGVzdERpZmZlcmVuY2UgPT09IDEwMDtcblxuICAgICAgICAgICAgICAgIC8vIERpZmZlcmVuY2Ugd2l0aCB0aGlzIGhhbmRsZSBpcyBzbWFsbGVyIHRoYW4gdGhlIHByZXZpb3VzbHkgY2hlY2tlZCBoYW5kbGVcbiAgICAgICAgICAgICAgICB2YXIgaXNDbG9zZXIgPSBkaWZmZXJlbmNlV2l0aFRoaXNIYW5kbGUgPCBzbWFsbGVzdERpZmZlcmVuY2U7XG4gICAgICAgICAgICAgICAgdmFyIGlzQ2xvc2VyQWZ0ZXIgPSBkaWZmZXJlbmNlV2l0aFRoaXNIYW5kbGUgPD0gc21hbGxlc3REaWZmZXJlbmNlICYmIGNsaWNrZWRQb3NpdGlvbiA+IGhhbmRsZVBvc2l0aW9uO1xuXG4gICAgICAgICAgICAgICAgaWYgKGlzQ2xvc2VyIHx8IGlzQ2xvc2VyQWZ0ZXIgfHwgY2xpY2tBdEVkZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlTnVtYmVyID0gaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIHNtYWxsZXN0RGlmZmVyZW5jZSA9IGRpZmZlcmVuY2VXaXRoVGhpc0hhbmRsZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZU51bWJlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZpcmUgJ2VuZCcgd2hlbiBhIG1vdXNlIG9yIHBlbiBsZWF2ZXMgdGhlIGRvY3VtZW50LlxuICAgICAgICBmdW5jdGlvbiBkb2N1bWVudExlYXZlKGV2ZW50LCBkYXRhKSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQudHlwZSA9PT0gXCJtb3VzZW91dFwiICYmIGV2ZW50LnRhcmdldC5ub2RlTmFtZSA9PT0gXCJIVE1MXCIgJiYgZXZlbnQucmVsYXRlZFRhcmdldCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGV2ZW50RW5kKGV2ZW50LCBkYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEhhbmRsZSBtb3ZlbWVudCBvbiBkb2N1bWVudCBmb3IgaGFuZGxlIGFuZCByYW5nZSBkcmFnLlxuICAgICAgICBmdW5jdGlvbiBldmVudE1vdmUoZXZlbnQsIGRhdGEpIHtcbiAgICAgICAgICAgIC8vIEZpeCAjNDk4XG4gICAgICAgICAgICAvLyBDaGVjayB2YWx1ZSBvZiAuYnV0dG9ucyBpbiAnc3RhcnQnIHRvIHdvcmsgYXJvdW5kIGEgYnVnIGluIElFMTAgbW9iaWxlIChkYXRhLmJ1dHRvbnNQcm9wZXJ0eSkuXG4gICAgICAgICAgICAvLyBodHRwczovL2Nvbm5lY3QubWljcm9zb2Z0LmNvbS9JRS9mZWVkYmFjay9kZXRhaWxzLzkyNzAwNS9tb2JpbGUtaWUxMC13aW5kb3dzLXBob25lLWJ1dHRvbnMtcHJvcGVydHktb2YtcG9pbnRlcm1vdmUtZXZlbnQtYWx3YXlzLXplcm9cbiAgICAgICAgICAgIC8vIElFOSBoYXMgLmJ1dHRvbnMgYW5kIC53aGljaCB6ZXJvIG9uIG1vdXNlbW92ZS5cbiAgICAgICAgICAgIC8vIEZpcmVmb3ggYnJlYWtzIHRoZSBzcGVjIE1ETiBkZWZpbmVzLlxuICAgICAgICAgICAgaWYgKG5hdmlnYXRvci5hcHBWZXJzaW9uLmluZGV4T2YoXCJNU0lFIDlcIikgPT09IC0xICYmIGV2ZW50LmJ1dHRvbnMgPT09IDAgJiYgZGF0YS5idXR0b25zUHJvcGVydHkgIT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXZlbnRFbmQoZXZlbnQsIGRhdGEpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBDaGVjayBpZiB3ZSBhcmUgbW92aW5nIHVwIG9yIGRvd25cbiAgICAgICAgICAgIHZhciBtb3ZlbWVudCA9IChvcHRpb25zLmRpciA/IC0xIDogMSkgKiAoZXZlbnQuY2FsY1BvaW50IC0gZGF0YS5zdGFydENhbGNQb2ludCk7XG5cbiAgICAgICAgICAgIC8vIENvbnZlcnQgdGhlIG1vdmVtZW50IGludG8gYSBwZXJjZW50YWdlIG9mIHRoZSBzbGlkZXIgd2lkdGgvaGVpZ2h0XG4gICAgICAgICAgICB2YXIgcHJvcG9zYWwgPSAobW92ZW1lbnQgKiAxMDApIC8gZGF0YS5iYXNlU2l6ZTtcblxuICAgICAgICAgICAgbW92ZUhhbmRsZXMobW92ZW1lbnQgPiAwLCBwcm9wb3NhbCwgZGF0YS5sb2NhdGlvbnMsIGRhdGEuaGFuZGxlTnVtYmVycyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVbmJpbmQgbW92ZSBldmVudHMgb24gZG9jdW1lbnQsIGNhbGwgY2FsbGJhY2tzLlxuICAgICAgICBmdW5jdGlvbiBldmVudEVuZChldmVudCwgZGF0YSkge1xuICAgICAgICAgICAgLy8gVGhlIGhhbmRsZSBpcyBubyBsb25nZXIgYWN0aXZlLCBzbyByZW1vdmUgdGhlIGNsYXNzLlxuICAgICAgICAgICAgaWYgKGRhdGEuaGFuZGxlKSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3MoZGF0YS5oYW5kbGUsIG9wdGlvbnMuY3NzQ2xhc3Nlcy5hY3RpdmUpO1xuICAgICAgICAgICAgICAgIHNjb3BlX0FjdGl2ZUhhbmRsZXNDb3VudCAtPSAxO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBVbmJpbmQgdGhlIG1vdmUgYW5kIGVuZCBldmVudHMsIHdoaWNoIGFyZSBhZGRlZCBvbiAnc3RhcnQnLlxuICAgICAgICAgICAgZGF0YS5saXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbihjKSB7XG4gICAgICAgICAgICAgICAgc2NvcGVfRG9jdW1lbnRFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoY1swXSwgY1sxXSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKHNjb3BlX0FjdGl2ZUhhbmRsZXNDb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBkcmFnZ2luZyBjbGFzcy5cbiAgICAgICAgICAgICAgICByZW1vdmVDbGFzcyhzY29wZV9UYXJnZXQsIG9wdGlvbnMuY3NzQ2xhc3Nlcy5kcmFnKTtcbiAgICAgICAgICAgICAgICBzZXRaaW5kZXgoKTtcblxuICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBjdXJzb3Igc3R5bGVzIGFuZCB0ZXh0LXNlbGVjdGlvbiBldmVudHMgYm91bmQgdG8gdGhlIGJvZHkuXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LmN1cnNvcikge1xuICAgICAgICAgICAgICAgICAgICBzY29wZV9Cb2R5LnN0eWxlLmN1cnNvciA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgIHNjb3BlX0JvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInNlbGVjdHN0YXJ0XCIsIHByZXZlbnREZWZhdWx0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRhdGEuaGFuZGxlTnVtYmVycy5mb3JFYWNoKGZ1bmN0aW9uKGhhbmRsZU51bWJlcikge1xuICAgICAgICAgICAgICAgIGZpcmVFdmVudChcImNoYW5nZVwiLCBoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgICAgIGZpcmVFdmVudChcInNldFwiLCBoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgICAgIGZpcmVFdmVudChcImVuZFwiLCBoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCaW5kIG1vdmUgZXZlbnRzIG9uIGRvY3VtZW50LlxuICAgICAgICBmdW5jdGlvbiBldmVudFN0YXJ0KGV2ZW50LCBkYXRhKSB7XG4gICAgICAgICAgICAvLyBJZ25vcmUgZXZlbnQgaWYgYW55IGhhbmRsZSBpcyBkaXNhYmxlZFxuICAgICAgICAgICAgaWYgKGRhdGEuaGFuZGxlTnVtYmVycy5zb21lKGlzSGFuZGxlRGlzYWJsZWQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgaGFuZGxlO1xuXG4gICAgICAgICAgICBpZiAoZGF0YS5oYW5kbGVOdW1iZXJzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHZhciBoYW5kbGVPcmlnaW4gPSBzY29wZV9IYW5kbGVzW2RhdGEuaGFuZGxlTnVtYmVyc1swXV07XG5cbiAgICAgICAgICAgICAgICBoYW5kbGUgPSBoYW5kbGVPcmlnaW4uY2hpbGRyZW5bMF07XG4gICAgICAgICAgICAgICAgc2NvcGVfQWN0aXZlSGFuZGxlc0NvdW50ICs9IDE7XG5cbiAgICAgICAgICAgICAgICAvLyBNYXJrIHRoZSBoYW5kbGUgYXMgJ2FjdGl2ZScgc28gaXQgY2FuIGJlIHN0eWxlZC5cbiAgICAgICAgICAgICAgICBhZGRDbGFzcyhoYW5kbGUsIG9wdGlvbnMuY3NzQ2xhc3Nlcy5hY3RpdmUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBBIGRyYWcgc2hvdWxkIG5ldmVyIHByb3BhZ2F0ZSB1cCB0byB0aGUgJ3RhcCcgZXZlbnQuXG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgICAgICAgLy8gUmVjb3JkIHRoZSBldmVudCBsaXN0ZW5lcnMuXG4gICAgICAgICAgICB2YXIgbGlzdGVuZXJzID0gW107XG5cbiAgICAgICAgICAgIC8vIEF0dGFjaCB0aGUgbW92ZSBhbmQgZW5kIGV2ZW50cy5cbiAgICAgICAgICAgIHZhciBtb3ZlRXZlbnQgPSBhdHRhY2hFdmVudChhY3Rpb25zLm1vdmUsIHNjb3BlX0RvY3VtZW50RWxlbWVudCwgZXZlbnRNb3ZlLCB7XG4gICAgICAgICAgICAgICAgLy8gVGhlIGV2ZW50IHRhcmdldCBoYXMgY2hhbmdlZCBzbyB3ZSBuZWVkIHRvIHByb3BhZ2F0ZSB0aGUgb3JpZ2luYWwgb25lIHNvIHRoYXQgd2Uga2VlcFxuICAgICAgICAgICAgICAgIC8vIHJlbHlpbmcgb24gaXQgdG8gZXh0cmFjdCB0YXJnZXQgdG91Y2hlcy5cbiAgICAgICAgICAgICAgICB0YXJnZXQ6IGV2ZW50LnRhcmdldCxcbiAgICAgICAgICAgICAgICBoYW5kbGU6IGhhbmRsZSxcbiAgICAgICAgICAgICAgICBsaXN0ZW5lcnM6IGxpc3RlbmVycyxcbiAgICAgICAgICAgICAgICBzdGFydENhbGNQb2ludDogZXZlbnQuY2FsY1BvaW50LFxuICAgICAgICAgICAgICAgIGJhc2VTaXplOiBiYXNlU2l6ZSgpLFxuICAgICAgICAgICAgICAgIHBhZ2VPZmZzZXQ6IGV2ZW50LnBhZ2VPZmZzZXQsXG4gICAgICAgICAgICAgICAgaGFuZGxlTnVtYmVyczogZGF0YS5oYW5kbGVOdW1iZXJzLFxuICAgICAgICAgICAgICAgIGJ1dHRvbnNQcm9wZXJ0eTogZXZlbnQuYnV0dG9ucyxcbiAgICAgICAgICAgICAgICBsb2NhdGlvbnM6IHNjb3BlX0xvY2F0aW9ucy5zbGljZSgpXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdmFyIGVuZEV2ZW50ID0gYXR0YWNoRXZlbnQoYWN0aW9ucy5lbmQsIHNjb3BlX0RvY3VtZW50RWxlbWVudCwgZXZlbnRFbmQsIHtcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IGV2ZW50LnRhcmdldCxcbiAgICAgICAgICAgICAgICBoYW5kbGU6IGhhbmRsZSxcbiAgICAgICAgICAgICAgICBsaXN0ZW5lcnM6IGxpc3RlbmVycyxcbiAgICAgICAgICAgICAgICBkb05vdFJlamVjdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBoYW5kbGVOdW1iZXJzOiBkYXRhLmhhbmRsZU51bWJlcnNcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB2YXIgb3V0RXZlbnQgPSBhdHRhY2hFdmVudChcIm1vdXNlb3V0XCIsIHNjb3BlX0RvY3VtZW50RWxlbWVudCwgZG9jdW1lbnRMZWF2ZSwge1xuICAgICAgICAgICAgICAgIHRhcmdldDogZXZlbnQudGFyZ2V0LFxuICAgICAgICAgICAgICAgIGhhbmRsZTogaGFuZGxlLFxuICAgICAgICAgICAgICAgIGxpc3RlbmVyczogbGlzdGVuZXJzLFxuICAgICAgICAgICAgICAgIGRvTm90UmVqZWN0OiB0cnVlLFxuICAgICAgICAgICAgICAgIGhhbmRsZU51bWJlcnM6IGRhdGEuaGFuZGxlTnVtYmVyc1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIFdlIHdhbnQgdG8gbWFrZSBzdXJlIHdlIHB1c2hlZCB0aGUgbGlzdGVuZXJzIGluIHRoZSBsaXN0ZW5lciBsaXN0IHJhdGhlciB0aGFuIGNyZWF0aW5nXG4gICAgICAgICAgICAvLyBhIG5ldyBvbmUgYXMgaXQgaGFzIGFscmVhZHkgYmVlbiBwYXNzZWQgdG8gdGhlIGV2ZW50IGhhbmRsZXJzLlxuICAgICAgICAgICAgbGlzdGVuZXJzLnB1c2guYXBwbHkobGlzdGVuZXJzLCBtb3ZlRXZlbnQuY29uY2F0KGVuZEV2ZW50LCBvdXRFdmVudCkpO1xuXG4gICAgICAgICAgICAvLyBUZXh0IHNlbGVjdGlvbiBpc24ndCBhbiBpc3N1ZSBvbiB0b3VjaCBkZXZpY2VzLFxuICAgICAgICAgICAgLy8gc28gYWRkaW5nIGN1cnNvciBzdHlsZXMgY2FuIGJlIHNraXBwZWQuXG4gICAgICAgICAgICBpZiAoZXZlbnQuY3Vyc29yKSB7XG4gICAgICAgICAgICAgICAgLy8gUHJldmVudCB0aGUgJ0knIGN1cnNvciBhbmQgZXh0ZW5kIHRoZSByYW5nZS1kcmFnIGN1cnNvci5cbiAgICAgICAgICAgICAgICBzY29wZV9Cb2R5LnN0eWxlLmN1cnNvciA9IGdldENvbXB1dGVkU3R5bGUoZXZlbnQudGFyZ2V0KS5jdXJzb3I7XG5cbiAgICAgICAgICAgICAgICAvLyBNYXJrIHRoZSB0YXJnZXQgd2l0aCBhIGRyYWdnaW5nIHN0YXRlLlxuICAgICAgICAgICAgICAgIGlmIChzY29wZV9IYW5kbGVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkQ2xhc3Moc2NvcGVfVGFyZ2V0LCBvcHRpb25zLmNzc0NsYXNzZXMuZHJhZyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gUHJldmVudCB0ZXh0IHNlbGVjdGlvbiB3aGVuIGRyYWdnaW5nIHRoZSBoYW5kbGVzLlxuICAgICAgICAgICAgICAgIC8vIEluIG5vVWlTbGlkZXIgPD0gOS4yLjAsIHRoaXMgd2FzIGhhbmRsZWQgYnkgY2FsbGluZyBwcmV2ZW50RGVmYXVsdCBvbiBtb3VzZS90b3VjaCBzdGFydC9tb3ZlLFxuICAgICAgICAgICAgICAgIC8vIHdoaWNoIGlzIHNjcm9sbCBibG9ja2luZy4gVGhlIHNlbGVjdHN0YXJ0IGV2ZW50IGlzIHN1cHBvcnRlZCBieSBGaXJlRm94IHN0YXJ0aW5nIGZyb20gdmVyc2lvbiA1MixcbiAgICAgICAgICAgICAgICAvLyBtZWFuaW5nIHRoZSBvbmx5IGhvbGRvdXQgaXMgaU9TIFNhZmFyaS4gVGhpcyBkb2Vzbid0IG1hdHRlcjogdGV4dCBzZWxlY3Rpb24gaXNuJ3QgdHJpZ2dlcmVkIHRoZXJlLlxuICAgICAgICAgICAgICAgIC8vIFRoZSAnY3Vyc29yJyBmbGFnIGlzIGZhbHNlLlxuICAgICAgICAgICAgICAgIC8vIFNlZTogaHR0cDovL2Nhbml1c2UuY29tLyNzZWFyY2g9c2VsZWN0c3RhcnRcbiAgICAgICAgICAgICAgICBzY29wZV9Cb2R5LmFkZEV2ZW50TGlzdGVuZXIoXCJzZWxlY3RzdGFydFwiLCBwcmV2ZW50RGVmYXVsdCwgZmFsc2UpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkYXRhLmhhbmRsZU51bWJlcnMuZm9yRWFjaChmdW5jdGlvbihoYW5kbGVOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICBmaXJlRXZlbnQoXCJzdGFydFwiLCBoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBNb3ZlIGNsb3Nlc3QgaGFuZGxlIHRvIHRhcHBlZCBsb2NhdGlvbi5cbiAgICAgICAgZnVuY3Rpb24gZXZlbnRUYXAoZXZlbnQpIHtcbiAgICAgICAgICAgIC8vIFRoZSB0YXAgZXZlbnQgc2hvdWxkbid0IHByb3BhZ2F0ZSB1cFxuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgICAgICAgIHZhciBwcm9wb3NhbCA9IGNhbGNQb2ludFRvUGVyY2VudGFnZShldmVudC5jYWxjUG9pbnQpO1xuICAgICAgICAgICAgdmFyIGhhbmRsZU51bWJlciA9IGdldENsb3Nlc3RIYW5kbGUocHJvcG9zYWwpO1xuXG4gICAgICAgICAgICAvLyBUYWNrbGUgdGhlIGNhc2UgdGhhdCBhbGwgaGFuZGxlcyBhcmUgJ2Rpc2FibGVkJy5cbiAgICAgICAgICAgIGlmIChoYW5kbGVOdW1iZXIgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBGbGFnIHRoZSBzbGlkZXIgYXMgaXQgaXMgbm93IGluIGEgdHJhbnNpdGlvbmFsIHN0YXRlLlxuICAgICAgICAgICAgLy8gVHJhbnNpdGlvbiB0YWtlcyBhIGNvbmZpZ3VyYWJsZSBhbW91bnQgb2YgbXMgKGRlZmF1bHQgMzAwKS4gUmUtZW5hYmxlIHRoZSBzbGlkZXIgYWZ0ZXIgdGhhdC5cbiAgICAgICAgICAgIGlmICghb3B0aW9ucy5ldmVudHMuc25hcCkge1xuICAgICAgICAgICAgICAgIGFkZENsYXNzRm9yKHNjb3BlX1RhcmdldCwgb3B0aW9ucy5jc3NDbGFzc2VzLnRhcCwgb3B0aW9ucy5hbmltYXRpb25EdXJhdGlvbik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNldEhhbmRsZShoYW5kbGVOdW1iZXIsIHByb3Bvc2FsLCB0cnVlLCB0cnVlKTtcblxuICAgICAgICAgICAgc2V0WmluZGV4KCk7XG5cbiAgICAgICAgICAgIGZpcmVFdmVudChcInNsaWRlXCIsIGhhbmRsZU51bWJlciwgdHJ1ZSk7XG4gICAgICAgICAgICBmaXJlRXZlbnQoXCJ1cGRhdGVcIiwgaGFuZGxlTnVtYmVyLCB0cnVlKTtcbiAgICAgICAgICAgIGZpcmVFdmVudChcImNoYW5nZVwiLCBoYW5kbGVOdW1iZXIsIHRydWUpO1xuICAgICAgICAgICAgZmlyZUV2ZW50KFwic2V0XCIsIGhhbmRsZU51bWJlciwgdHJ1ZSk7XG5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLmV2ZW50cy5zbmFwKSB7XG4gICAgICAgICAgICAgICAgZXZlbnRTdGFydChldmVudCwgeyBoYW5kbGVOdW1iZXJzOiBbaGFuZGxlTnVtYmVyXSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZpcmVzIGEgJ2hvdmVyJyBldmVudCBmb3IgYSBob3ZlcmVkIG1vdXNlL3BlbiBwb3NpdGlvbi5cbiAgICAgICAgZnVuY3Rpb24gZXZlbnRIb3ZlcihldmVudCkge1xuICAgICAgICAgICAgdmFyIHByb3Bvc2FsID0gY2FsY1BvaW50VG9QZXJjZW50YWdlKGV2ZW50LmNhbGNQb2ludCk7XG5cbiAgICAgICAgICAgIHZhciB0byA9IHNjb3BlX1NwZWN0cnVtLmdldFN0ZXAocHJvcG9zYWwpO1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gc2NvcGVfU3BlY3RydW0uZnJvbVN0ZXBwaW5nKHRvKTtcblxuICAgICAgICAgICAgT2JqZWN0LmtleXMoc2NvcGVfRXZlbnRzKS5mb3JFYWNoKGZ1bmN0aW9uKHRhcmdldEV2ZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKFwiaG92ZXJcIiA9PT0gdGFyZ2V0RXZlbnQuc3BsaXQoXCIuXCIpWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgIHNjb3BlX0V2ZW50c1t0YXJnZXRFdmVudF0uZm9yRWFjaChmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbChzY29wZV9TZWxmLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSGFuZGxlcyBrZXlkb3duIG9uIGZvY3VzZWQgaGFuZGxlc1xuICAgICAgICAvLyBEb24ndCBtb3ZlIHRoZSBkb2N1bWVudCB3aGVuIHByZXNzaW5nIGFycm93IGtleXMgb24gZm9jdXNlZCBoYW5kbGVzXG4gICAgICAgIGZ1bmN0aW9uIGV2ZW50S2V5ZG93bihldmVudCwgaGFuZGxlTnVtYmVyKSB7XG4gICAgICAgICAgICBpZiAoaXNTbGlkZXJEaXNhYmxlZCgpIHx8IGlzSGFuZGxlRGlzYWJsZWQoaGFuZGxlTnVtYmVyKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGhvcml6b250YWxLZXlzID0gW1wiTGVmdFwiLCBcIlJpZ2h0XCJdO1xuICAgICAgICAgICAgdmFyIHZlcnRpY2FsS2V5cyA9IFtcIkRvd25cIiwgXCJVcFwiXTtcbiAgICAgICAgICAgIHZhciBsYXJnZVN0ZXBLZXlzID0gW1wiUGFnZURvd25cIiwgXCJQYWdlVXBcIl07XG4gICAgICAgICAgICB2YXIgZWRnZUtleXMgPSBbXCJIb21lXCIsIFwiRW5kXCJdO1xuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5kaXIgJiYgIW9wdGlvbnMub3J0KSB7XG4gICAgICAgICAgICAgICAgLy8gT24gYW4gcmlnaHQtdG8tbGVmdCBzbGlkZXIsIHRoZSBsZWZ0IGFuZCByaWdodCBrZXlzIGFjdCBpbnZlcnRlZFxuICAgICAgICAgICAgICAgIGhvcml6b250YWxLZXlzLnJldmVyc2UoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy5vcnQgJiYgIW9wdGlvbnMuZGlyKSB7XG4gICAgICAgICAgICAgICAgLy8gT24gYSB0b3AtdG8tYm90dG9tIHNsaWRlciwgdGhlIHVwIGFuZCBkb3duIGtleXMgYWN0IGludmVydGVkXG4gICAgICAgICAgICAgICAgdmVydGljYWxLZXlzLnJldmVyc2UoKTtcbiAgICAgICAgICAgICAgICBsYXJnZVN0ZXBLZXlzLnJldmVyc2UoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU3RyaXAgXCJBcnJvd1wiIGZvciBJRSBjb21wYXRpYmlsaXR5LiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvS2V5Ym9hcmRFdmVudC9rZXlcbiAgICAgICAgICAgIHZhciBrZXkgPSBldmVudC5rZXkucmVwbGFjZShcIkFycm93XCIsIFwiXCIpO1xuXG4gICAgICAgICAgICB2YXIgaXNMYXJnZURvd24gPSBrZXkgPT09IGxhcmdlU3RlcEtleXNbMF07XG4gICAgICAgICAgICB2YXIgaXNMYXJnZVVwID0ga2V5ID09PSBsYXJnZVN0ZXBLZXlzWzFdO1xuICAgICAgICAgICAgdmFyIGlzRG93biA9IGtleSA9PT0gdmVydGljYWxLZXlzWzBdIHx8IGtleSA9PT0gaG9yaXpvbnRhbEtleXNbMF0gfHwgaXNMYXJnZURvd247XG4gICAgICAgICAgICB2YXIgaXNVcCA9IGtleSA9PT0gdmVydGljYWxLZXlzWzFdIHx8IGtleSA9PT0gaG9yaXpvbnRhbEtleXNbMV0gfHwgaXNMYXJnZVVwO1xuICAgICAgICAgICAgdmFyIGlzTWluID0ga2V5ID09PSBlZGdlS2V5c1swXTtcbiAgICAgICAgICAgIHZhciBpc01heCA9IGtleSA9PT0gZWRnZUtleXNbMV07XG5cbiAgICAgICAgICAgIGlmICghaXNEb3duICYmICFpc1VwICYmICFpc01pbiAmJiAhaXNNYXgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgdmFyIHRvO1xuXG4gICAgICAgICAgICBpZiAoaXNVcCB8fCBpc0Rvd24pIHtcbiAgICAgICAgICAgICAgICB2YXIgbXVsdGlwbGllciA9IDU7XG4gICAgICAgICAgICAgICAgdmFyIGRpcmVjdGlvbiA9IGlzRG93biA/IDAgOiAxO1xuICAgICAgICAgICAgICAgIHZhciBzdGVwcyA9IGdldE5leHRTdGVwc0ZvckhhbmRsZShoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgICAgIHZhciBzdGVwID0gc3RlcHNbZGlyZWN0aW9uXTtcblxuICAgICAgICAgICAgICAgIC8vIEF0IHRoZSBlZGdlIG9mIGEgc2xpZGVyLCBkbyBub3RoaW5nXG4gICAgICAgICAgICAgICAgaWYgKHN0ZXAgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIE5vIHN0ZXAgc2V0LCB1c2UgdGhlIGRlZmF1bHQgb2YgMTAlIG9mIHRoZSBzdWItcmFuZ2VcbiAgICAgICAgICAgICAgICBpZiAoc3RlcCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RlcCA9IHNjb3BlX1NwZWN0cnVtLmdldERlZmF1bHRTdGVwKHNjb3BlX0xvY2F0aW9uc1toYW5kbGVOdW1iZXJdLCBpc0Rvd24sIDEwKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoaXNMYXJnZVVwIHx8IGlzTGFyZ2VEb3duKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0ZXAgKj0gbXVsdGlwbGllcjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBTdGVwIG92ZXIgemVyby1sZW5ndGggcmFuZ2VzICgjOTQ4KTtcbiAgICAgICAgICAgICAgICBzdGVwID0gTWF0aC5tYXgoc3RlcCwgMC4wMDAwMDAxKTtcblxuICAgICAgICAgICAgICAgIC8vIERlY3JlbWVudCBmb3IgZG93biBzdGVwc1xuICAgICAgICAgICAgICAgIHN0ZXAgPSAoaXNEb3duID8gLTEgOiAxKSAqIHN0ZXA7XG5cbiAgICAgICAgICAgICAgICB0byA9IHNjb3BlX1ZhbHVlc1toYW5kbGVOdW1iZXJdICsgc3RlcDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNNYXgpIHtcbiAgICAgICAgICAgICAgICAvLyBFbmQga2V5XG4gICAgICAgICAgICAgICAgdG8gPSBvcHRpb25zLnNwZWN0cnVtLnhWYWxbb3B0aW9ucy5zcGVjdHJ1bS54VmFsLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBIb21lIGtleVxuICAgICAgICAgICAgICAgIHRvID0gb3B0aW9ucy5zcGVjdHJ1bS54VmFsWzBdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzZXRIYW5kbGUoaGFuZGxlTnVtYmVyLCBzY29wZV9TcGVjdHJ1bS50b1N0ZXBwaW5nKHRvKSwgdHJ1ZSwgdHJ1ZSk7XG5cbiAgICAgICAgICAgIGZpcmVFdmVudChcInNsaWRlXCIsIGhhbmRsZU51bWJlcik7XG4gICAgICAgICAgICBmaXJlRXZlbnQoXCJ1cGRhdGVcIiwgaGFuZGxlTnVtYmVyKTtcbiAgICAgICAgICAgIGZpcmVFdmVudChcImNoYW5nZVwiLCBoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgZmlyZUV2ZW50KFwic2V0XCIsIGhhbmRsZU51bWJlcik7XG5cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEF0dGFjaCBldmVudHMgdG8gc2V2ZXJhbCBzbGlkZXIgcGFydHMuXG4gICAgICAgIGZ1bmN0aW9uIGJpbmRTbGlkZXJFdmVudHMoYmVoYXZpb3VyKSB7XG4gICAgICAgICAgICAvLyBBdHRhY2ggdGhlIHN0YW5kYXJkIGRyYWcgZXZlbnQgdG8gdGhlIGhhbmRsZXMuXG4gICAgICAgICAgICBpZiAoIWJlaGF2aW91ci5maXhlZCkge1xuICAgICAgICAgICAgICAgIHNjb3BlX0hhbmRsZXMuZm9yRWFjaChmdW5jdGlvbihoYW5kbGUsIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZXNlIGV2ZW50cyBhcmUgb25seSBib3VuZCB0byB0aGUgdmlzdWFsIGhhbmRsZVxuICAgICAgICAgICAgICAgICAgICAvLyBlbGVtZW50LCBub3QgdGhlICdyZWFsJyBvcmlnaW4gZWxlbWVudC5cbiAgICAgICAgICAgICAgICAgICAgYXR0YWNoRXZlbnQoYWN0aW9ucy5zdGFydCwgaGFuZGxlLmNoaWxkcmVuWzBdLCBldmVudFN0YXJ0LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVOdW1iZXJzOiBbaW5kZXhdXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBBdHRhY2ggdGhlIHRhcCBldmVudCB0byB0aGUgc2xpZGVyIGJhc2UuXG4gICAgICAgICAgICBpZiAoYmVoYXZpb3VyLnRhcCkge1xuICAgICAgICAgICAgICAgIGF0dGFjaEV2ZW50KGFjdGlvbnMuc3RhcnQsIHNjb3BlX0Jhc2UsIGV2ZW50VGFwLCB7fSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEZpcmUgaG92ZXIgZXZlbnRzXG4gICAgICAgICAgICBpZiAoYmVoYXZpb3VyLmhvdmVyKSB7XG4gICAgICAgICAgICAgICAgYXR0YWNoRXZlbnQoYWN0aW9ucy5tb3ZlLCBzY29wZV9CYXNlLCBldmVudEhvdmVyLCB7XG4gICAgICAgICAgICAgICAgICAgIGhvdmVyOiB0cnVlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIE1ha2UgdGhlIHJhbmdlIGRyYWdnYWJsZS5cbiAgICAgICAgICAgIGlmIChiZWhhdmlvdXIuZHJhZykge1xuICAgICAgICAgICAgICAgIHNjb3BlX0Nvbm5lY3RzLmZvckVhY2goZnVuY3Rpb24oY29ubmVjdCwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbm5lY3QgPT09IGZhbHNlIHx8IGluZGV4ID09PSAwIHx8IGluZGV4ID09PSBzY29wZV9Db25uZWN0cy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB2YXIgaGFuZGxlQmVmb3JlID0gc2NvcGVfSGFuZGxlc1tpbmRleCAtIDFdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaGFuZGxlQWZ0ZXIgPSBzY29wZV9IYW5kbGVzW2luZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50SG9sZGVycyA9IFtjb25uZWN0XTtcblxuICAgICAgICAgICAgICAgICAgICBhZGRDbGFzcyhjb25uZWN0LCBvcHRpb25zLmNzc0NsYXNzZXMuZHJhZ2dhYmxlKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBXaGVuIHRoZSByYW5nZSBpcyBmaXhlZCwgdGhlIGVudGlyZSByYW5nZSBjYW5cbiAgICAgICAgICAgICAgICAgICAgLy8gYmUgZHJhZ2dlZCBieSB0aGUgaGFuZGxlcy4gVGhlIGhhbmRsZSBpbiB0aGUgZmlyc3RcbiAgICAgICAgICAgICAgICAgICAgLy8gb3JpZ2luIHdpbGwgcHJvcGFnYXRlIHRoZSBzdGFydCBldmVudCB1cHdhcmQsXG4gICAgICAgICAgICAgICAgICAgIC8vIGJ1dCBpdCBuZWVkcyB0byBiZSBib3VuZCBtYW51YWxseSBvbiB0aGUgb3RoZXIuXG4gICAgICAgICAgICAgICAgICAgIGlmIChiZWhhdmlvdXIuZml4ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50SG9sZGVycy5wdXNoKGhhbmRsZUJlZm9yZS5jaGlsZHJlblswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudEhvbGRlcnMucHVzaChoYW5kbGVBZnRlci5jaGlsZHJlblswXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBldmVudEhvbGRlcnMuZm9yRWFjaChmdW5jdGlvbihldmVudEhvbGRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0YWNoRXZlbnQoYWN0aW9ucy5zdGFydCwgZXZlbnRIb2xkZXIsIGV2ZW50U3RhcnQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVzOiBbaGFuZGxlQmVmb3JlLCBoYW5kbGVBZnRlcl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlTnVtYmVyczogW2luZGV4IC0gMSwgaW5kZXhdXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBdHRhY2ggYW4gZXZlbnQgdG8gdGhpcyBzbGlkZXIsIHBvc3NpYmx5IGluY2x1ZGluZyBhIG5hbWVzcGFjZVxuICAgICAgICBmdW5jdGlvbiBiaW5kRXZlbnQobmFtZXNwYWNlZEV2ZW50LCBjYWxsYmFjaykge1xuICAgICAgICAgICAgc2NvcGVfRXZlbnRzW25hbWVzcGFjZWRFdmVudF0gPSBzY29wZV9FdmVudHNbbmFtZXNwYWNlZEV2ZW50XSB8fCBbXTtcbiAgICAgICAgICAgIHNjb3BlX0V2ZW50c1tuYW1lc3BhY2VkRXZlbnRdLnB1c2goY2FsbGJhY2spO1xuXG4gICAgICAgICAgICAvLyBJZiB0aGUgZXZlbnQgYm91bmQgaXMgJ3VwZGF0ZSwnIGZpcmUgaXQgaW1tZWRpYXRlbHkgZm9yIGFsbCBoYW5kbGVzLlxuICAgICAgICAgICAgaWYgKG5hbWVzcGFjZWRFdmVudC5zcGxpdChcIi5cIilbMF0gPT09IFwidXBkYXRlXCIpIHtcbiAgICAgICAgICAgICAgICBzY29wZV9IYW5kbGVzLmZvckVhY2goZnVuY3Rpb24oYSwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlyZUV2ZW50KFwidXBkYXRlXCIsIGluZGV4KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVuZG8gYXR0YWNobWVudCBvZiBldmVudFxuICAgICAgICBmdW5jdGlvbiByZW1vdmVFdmVudChuYW1lc3BhY2VkRXZlbnQpIHtcbiAgICAgICAgICAgIHZhciBldmVudCA9IG5hbWVzcGFjZWRFdmVudCAmJiBuYW1lc3BhY2VkRXZlbnQuc3BsaXQoXCIuXCIpWzBdO1xuICAgICAgICAgICAgdmFyIG5hbWVzcGFjZSA9IGV2ZW50ICYmIG5hbWVzcGFjZWRFdmVudC5zdWJzdHJpbmcoZXZlbnQubGVuZ3RoKTtcblxuICAgICAgICAgICAgT2JqZWN0LmtleXMoc2NvcGVfRXZlbnRzKS5mb3JFYWNoKGZ1bmN0aW9uKGJpbmQpIHtcbiAgICAgICAgICAgICAgICB2YXIgdEV2ZW50ID0gYmluZC5zcGxpdChcIi5cIilbMF07XG4gICAgICAgICAgICAgICAgdmFyIHROYW1lc3BhY2UgPSBiaW5kLnN1YnN0cmluZyh0RXZlbnQubGVuZ3RoKTtcblxuICAgICAgICAgICAgICAgIGlmICgoIWV2ZW50IHx8IGV2ZW50ID09PSB0RXZlbnQpICYmICghbmFtZXNwYWNlIHx8IG5hbWVzcGFjZSA9PT0gdE5hbWVzcGFjZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHNjb3BlX0V2ZW50c1tiaW5kXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEV4dGVybmFsIGV2ZW50IGhhbmRsaW5nXG4gICAgICAgIGZ1bmN0aW9uIGZpcmVFdmVudChldmVudE5hbWUsIGhhbmRsZU51bWJlciwgdGFwKSB7XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhzY29wZV9FdmVudHMpLmZvckVhY2goZnVuY3Rpb24odGFyZ2V0RXZlbnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZXZlbnRUeXBlID0gdGFyZ2V0RXZlbnQuc3BsaXQoXCIuXCIpWzBdO1xuXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50TmFtZSA9PT0gZXZlbnRUeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIHNjb3BlX0V2ZW50c1t0YXJnZXRFdmVudF0uZm9yRWFjaChmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBVc2UgdGhlIHNsaWRlciBwdWJsaWMgQVBJIGFzIHRoZSBzY29wZSAoJ3RoaXMnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlX1NlbGYsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmV0dXJuIHZhbHVlcyBhcyBhcnJheSwgc28gYXJnXzFbYXJnXzJdIGlzIGFsd2F5cyB2YWxpZC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZV9WYWx1ZXMubWFwKG9wdGlvbnMuZm9ybWF0LnRvKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBIYW5kbGUgaW5kZXgsIDAgb3IgMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZU51bWJlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBVbi1mb3JtYXR0ZWQgc2xpZGVyIHZhbHVlc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlX1ZhbHVlcy5zbGljZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEV2ZW50IGlzIGZpcmVkIGJ5IHRhcCwgdHJ1ZSBvciBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcCB8fCBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBMZWZ0IG9mZnNldCBvZiB0aGUgaGFuZGxlLCBpbiByZWxhdGlvbiB0byB0aGUgc2xpZGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGVfTG9jYXRpb25zLnNsaWNlKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWRkIHRoZSBzbGlkZXIgcHVibGljIEFQSSB0byBhbiBhY2Nlc3NpYmxlIHBhcmFtZXRlciB3aGVuIHRoaXMgaXMgdW5hdmFpbGFibGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZV9TZWxmXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNwbGl0IG91dCB0aGUgaGFuZGxlIHBvc2l0aW9uaW5nIGxvZ2ljIHNvIHRoZSBNb3ZlIGV2ZW50IGNhbiB1c2UgaXQsIHRvb1xuICAgICAgICBmdW5jdGlvbiBjaGVja0hhbmRsZVBvc2l0aW9uKHJlZmVyZW5jZSwgaGFuZGxlTnVtYmVyLCB0bywgbG9va0JhY2t3YXJkLCBsb29rRm9yd2FyZCwgZ2V0VmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBkaXN0YW5jZTtcblxuICAgICAgICAgICAgLy8gRm9yIHNsaWRlcnMgd2l0aCBtdWx0aXBsZSBoYW5kbGVzLCBsaW1pdCBtb3ZlbWVudCB0byB0aGUgb3RoZXIgaGFuZGxlLlxuICAgICAgICAgICAgLy8gQXBwbHkgdGhlIG1hcmdpbiBvcHRpb24gYnkgYWRkaW5nIGl0IHRvIHRoZSBoYW5kbGUgcG9zaXRpb25zLlxuICAgICAgICAgICAgaWYgKHNjb3BlX0hhbmRsZXMubGVuZ3RoID4gMSAmJiAhb3B0aW9ucy5ldmVudHMudW5jb25zdHJhaW5lZCkge1xuICAgICAgICAgICAgICAgIGlmIChsb29rQmFja3dhcmQgJiYgaGFuZGxlTnVtYmVyID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBkaXN0YW5jZSA9IHNjb3BlX1NwZWN0cnVtLmdldEFic29sdXRlRGlzdGFuY2UocmVmZXJlbmNlW2hhbmRsZU51bWJlciAtIDFdLCBvcHRpb25zLm1hcmdpbiwgMCk7XG4gICAgICAgICAgICAgICAgICAgIHRvID0gTWF0aC5tYXgodG8sIGRpc3RhbmNlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAobG9va0ZvcndhcmQgJiYgaGFuZGxlTnVtYmVyIDwgc2NvcGVfSGFuZGxlcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3RhbmNlID0gc2NvcGVfU3BlY3RydW0uZ2V0QWJzb2x1dGVEaXN0YW5jZShyZWZlcmVuY2VbaGFuZGxlTnVtYmVyICsgMV0sIG9wdGlvbnMubWFyZ2luLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgdG8gPSBNYXRoLm1pbih0bywgZGlzdGFuY2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVGhlIGxpbWl0IG9wdGlvbiBoYXMgdGhlIG9wcG9zaXRlIGVmZmVjdCwgbGltaXRpbmcgaGFuZGxlcyB0byBhXG4gICAgICAgICAgICAvLyBtYXhpbXVtIGRpc3RhbmNlIGZyb20gYW5vdGhlci4gTGltaXQgbXVzdCBiZSA+IDAsIGFzIG90aGVyd2lzZVxuICAgICAgICAgICAgLy8gaGFuZGxlcyB3b3VsZCBiZSB1bm1vdmFibGUuXG4gICAgICAgICAgICBpZiAoc2NvcGVfSGFuZGxlcy5sZW5ndGggPiAxICYmIG9wdGlvbnMubGltaXQpIHtcbiAgICAgICAgICAgICAgICBpZiAobG9va0JhY2t3YXJkICYmIGhhbmRsZU51bWJlciA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2UgPSBzY29wZV9TcGVjdHJ1bS5nZXRBYnNvbHV0ZURpc3RhbmNlKHJlZmVyZW5jZVtoYW5kbGVOdW1iZXIgLSAxXSwgb3B0aW9ucy5saW1pdCwgMCk7XG4gICAgICAgICAgICAgICAgICAgIHRvID0gTWF0aC5taW4odG8sIGRpc3RhbmNlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAobG9va0ZvcndhcmQgJiYgaGFuZGxlTnVtYmVyIDwgc2NvcGVfSGFuZGxlcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3RhbmNlID0gc2NvcGVfU3BlY3RydW0uZ2V0QWJzb2x1dGVEaXN0YW5jZShyZWZlcmVuY2VbaGFuZGxlTnVtYmVyICsgMV0sIG9wdGlvbnMubGltaXQsIDEpO1xuICAgICAgICAgICAgICAgICAgICB0byA9IE1hdGgubWF4KHRvLCBkaXN0YW5jZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBUaGUgcGFkZGluZyBvcHRpb24ga2VlcHMgdGhlIGhhbmRsZXMgYSBjZXJ0YWluIGRpc3RhbmNlIGZyb20gdGhlXG4gICAgICAgICAgICAvLyBlZGdlcyBvZiB0aGUgc2xpZGVyLiBQYWRkaW5nIG11c3QgYmUgPiAwLlxuICAgICAgICAgICAgaWYgKG9wdGlvbnMucGFkZGluZykge1xuICAgICAgICAgICAgICAgIGlmIChoYW5kbGVOdW1iZXIgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2UgPSBzY29wZV9TcGVjdHJ1bS5nZXRBYnNvbHV0ZURpc3RhbmNlKDAsIG9wdGlvbnMucGFkZGluZ1swXSwgMCk7XG4gICAgICAgICAgICAgICAgICAgIHRvID0gTWF0aC5tYXgodG8sIGRpc3RhbmNlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoaGFuZGxlTnVtYmVyID09PSBzY29wZV9IYW5kbGVzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2UgPSBzY29wZV9TcGVjdHJ1bS5nZXRBYnNvbHV0ZURpc3RhbmNlKDEwMCwgb3B0aW9ucy5wYWRkaW5nWzFdLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgdG8gPSBNYXRoLm1pbih0bywgZGlzdGFuY2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdG8gPSBzY29wZV9TcGVjdHJ1bS5nZXRTdGVwKHRvKTtcblxuICAgICAgICAgICAgLy8gTGltaXQgcGVyY2VudGFnZSB0byB0aGUgMCAtIDEwMCByYW5nZVxuICAgICAgICAgICAgdG8gPSBsaW1pdCh0byk7XG5cbiAgICAgICAgICAgIC8vIFJldHVybiBmYWxzZSBpZiBoYW5kbGUgY2FuJ3QgbW92ZVxuICAgICAgICAgICAgaWYgKHRvID09PSByZWZlcmVuY2VbaGFuZGxlTnVtYmVyXSAmJiAhZ2V0VmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0bztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVzZXMgc2xpZGVyIG9yaWVudGF0aW9uIHRvIGNyZWF0ZSBDU1MgcnVsZXMuIGEgPSBiYXNlIHZhbHVlO1xuICAgICAgICBmdW5jdGlvbiBpblJ1bGVPcmRlcih2LCBhKSB7XG4gICAgICAgICAgICB2YXIgbyA9IG9wdGlvbnMub3J0O1xuICAgICAgICAgICAgcmV0dXJuIChvID8gYSA6IHYpICsgXCIsIFwiICsgKG8gPyB2IDogYSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBNb3ZlcyBoYW5kbGUocykgYnkgYSBwZXJjZW50YWdlXG4gICAgICAgIC8vIChib29sLCAlIHRvIG1vdmUsIFslIHdoZXJlIGhhbmRsZSBzdGFydGVkLCAuLi5dLCBbaW5kZXggaW4gc2NvcGVfSGFuZGxlcywgLi4uXSlcbiAgICAgICAgZnVuY3Rpb24gbW92ZUhhbmRsZXModXB3YXJkLCBwcm9wb3NhbCwgbG9jYXRpb25zLCBoYW5kbGVOdW1iZXJzKSB7XG4gICAgICAgICAgICB2YXIgcHJvcG9zYWxzID0gbG9jYXRpb25zLnNsaWNlKCk7XG5cbiAgICAgICAgICAgIHZhciBiID0gWyF1cHdhcmQsIHVwd2FyZF07XG4gICAgICAgICAgICB2YXIgZiA9IFt1cHdhcmQsICF1cHdhcmRdO1xuXG4gICAgICAgICAgICAvLyBDb3B5IGhhbmRsZU51bWJlcnMgc28gd2UgZG9uJ3QgY2hhbmdlIHRoZSBkYXRhc2V0XG4gICAgICAgICAgICBoYW5kbGVOdW1iZXJzID0gaGFuZGxlTnVtYmVycy5zbGljZSgpO1xuXG4gICAgICAgICAgICAvLyBDaGVjayB0byBzZWUgd2hpY2ggaGFuZGxlIGlzICdsZWFkaW5nJy5cbiAgICAgICAgICAgIC8vIElmIHRoYXQgb25lIGNhbid0IG1vdmUgdGhlIHNlY29uZCBjYW4ndCBlaXRoZXIuXG4gICAgICAgICAgICBpZiAodXB3YXJkKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlTnVtYmVycy5yZXZlcnNlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFN0ZXAgMTogZ2V0IHRoZSBtYXhpbXVtIHBlcmNlbnRhZ2UgdGhhdCBhbnkgb2YgdGhlIGhhbmRsZXMgY2FuIG1vdmVcbiAgICAgICAgICAgIGlmIChoYW5kbGVOdW1iZXJzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVOdW1iZXJzLmZvckVhY2goZnVuY3Rpb24oaGFuZGxlTnVtYmVyLCBvKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0byA9IGNoZWNrSGFuZGxlUG9zaXRpb24oXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wb3NhbHMsXG4gICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVOdW1iZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wb3NhbHNbaGFuZGxlTnVtYmVyXSArIHByb3Bvc2FsLFxuICAgICAgICAgICAgICAgICAgICAgICAgYltvXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZbb10sXG4gICAgICAgICAgICAgICAgICAgICAgICBmYWxzZVxuICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFN0b3AgaWYgb25lIG9mIHRoZSBoYW5kbGVzIGNhbid0IG1vdmUuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0byA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3Bvc2FsID0gMDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3Bvc2FsID0gdG8gLSBwcm9wb3NhbHNbaGFuZGxlTnVtYmVyXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3Bvc2Fsc1toYW5kbGVOdW1iZXJdID0gdG87XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSWYgdXNpbmcgb25lIGhhbmRsZSwgY2hlY2sgYmFja3dhcmQgQU5EIGZvcndhcmRcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGIgPSBmID0gW3RydWVdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgc3RhdGUgPSBmYWxzZTtcblxuICAgICAgICAgICAgLy8gU3RlcCAyOiBUcnkgdG8gc2V0IHRoZSBoYW5kbGVzIHdpdGggdGhlIGZvdW5kIHBlcmNlbnRhZ2VcbiAgICAgICAgICAgIGhhbmRsZU51bWJlcnMuZm9yRWFjaChmdW5jdGlvbihoYW5kbGVOdW1iZXIsIG8pIHtcbiAgICAgICAgICAgICAgICBzdGF0ZSA9IHNldEhhbmRsZShoYW5kbGVOdW1iZXIsIGxvY2F0aW9uc1toYW5kbGVOdW1iZXJdICsgcHJvcG9zYWwsIGJbb10sIGZbb10pIHx8IHN0YXRlO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIFN0ZXAgMzogSWYgYSBoYW5kbGUgbW92ZWQsIGZpcmUgZXZlbnRzXG4gICAgICAgICAgICBpZiAoc3RhdGUpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVOdW1iZXJzLmZvckVhY2goZnVuY3Rpb24oaGFuZGxlTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpcmVFdmVudChcInVwZGF0ZVwiLCBoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgICAgICAgICBmaXJlRXZlbnQoXCJzbGlkZVwiLCBoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGFrZXMgYSBiYXNlIHZhbHVlIGFuZCBhbiBvZmZzZXQuIFRoaXMgb2Zmc2V0IGlzIHVzZWQgZm9yIHRoZSBjb25uZWN0IGJhciBzaXplLlxuICAgICAgICAvLyBJbiB0aGUgaW5pdGlhbCBkZXNpZ24gZm9yIHRoaXMgZmVhdHVyZSwgdGhlIG9yaWdpbiBlbGVtZW50IHdhcyAxJSB3aWRlLlxuICAgICAgICAvLyBVbmZvcnR1bmF0ZWx5LCBhIHJvdW5kaW5nIGJ1ZyBpbiBDaHJvbWUgbWFrZXMgaXQgaW1wb3NzaWJsZSB0byBpbXBsZW1lbnQgdGhpcyBmZWF0dXJlXG4gICAgICAgIC8vIGluIHRoaXMgbWFubmVyOiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD03OTgyMjNcbiAgICAgICAgZnVuY3Rpb24gdHJhbnNmb3JtRGlyZWN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgIHJldHVybiBvcHRpb25zLmRpciA/IDEwMCAtIGEgLSBiIDogYTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVwZGF0ZXMgc2NvcGVfTG9jYXRpb25zIGFuZCBzY29wZV9WYWx1ZXMsIHVwZGF0ZXMgdmlzdWFsIHN0YXRlXG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZUhhbmRsZVBvc2l0aW9uKGhhbmRsZU51bWJlciwgdG8pIHtcbiAgICAgICAgICAgIC8vIFVwZGF0ZSBsb2NhdGlvbnMuXG4gICAgICAgICAgICBzY29wZV9Mb2NhdGlvbnNbaGFuZGxlTnVtYmVyXSA9IHRvO1xuXG4gICAgICAgICAgICAvLyBDb252ZXJ0IHRoZSB2YWx1ZSB0byB0aGUgc2xpZGVyIHN0ZXBwaW5nL3JhbmdlLlxuICAgICAgICAgICAgc2NvcGVfVmFsdWVzW2hhbmRsZU51bWJlcl0gPSBzY29wZV9TcGVjdHJ1bS5mcm9tU3RlcHBpbmcodG8pO1xuXG4gICAgICAgICAgICB2YXIgdHJhbnNsYXRpb24gPSAxMCAqICh0cmFuc2Zvcm1EaXJlY3Rpb24odG8sIDApIC0gc2NvcGVfRGlyT2Zmc2V0KTtcbiAgICAgICAgICAgIHZhciB0cmFuc2xhdGVSdWxlID0gXCJ0cmFuc2xhdGUoXCIgKyBpblJ1bGVPcmRlcih0cmFuc2xhdGlvbiArIFwiJVwiLCBcIjBcIikgKyBcIilcIjtcblxuICAgICAgICAgICAgc2NvcGVfSGFuZGxlc1toYW5kbGVOdW1iZXJdLnN0eWxlW29wdGlvbnMudHJhbnNmb3JtUnVsZV0gPSB0cmFuc2xhdGVSdWxlO1xuXG4gICAgICAgICAgICB1cGRhdGVDb25uZWN0KGhhbmRsZU51bWJlcik7XG4gICAgICAgICAgICB1cGRhdGVDb25uZWN0KGhhbmRsZU51bWJlciArIDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSGFuZGxlcyBiZWZvcmUgdGhlIHNsaWRlciBtaWRkbGUgYXJlIHN0YWNrZWQgbGF0ZXIgPSBoaWdoZXIsXG4gICAgICAgIC8vIEhhbmRsZXMgYWZ0ZXIgdGhlIG1pZGRsZSBsYXRlciBpcyBsb3dlclxuICAgICAgICAvLyBbWzddIFs4XSAuLi4uLi4uLi4uIHwgLi4uLi4uLi4uLiBbNV0gWzRdXG4gICAgICAgIGZ1bmN0aW9uIHNldFppbmRleCgpIHtcbiAgICAgICAgICAgIHNjb3BlX0hhbmRsZU51bWJlcnMuZm9yRWFjaChmdW5jdGlvbihoYW5kbGVOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGlyID0gc2NvcGVfTG9jYXRpb25zW2hhbmRsZU51bWJlcl0gPiA1MCA/IC0xIDogMTtcbiAgICAgICAgICAgICAgICB2YXIgekluZGV4ID0gMyArIChzY29wZV9IYW5kbGVzLmxlbmd0aCArIGRpciAqIGhhbmRsZU51bWJlcik7XG4gICAgICAgICAgICAgICAgc2NvcGVfSGFuZGxlc1toYW5kbGVOdW1iZXJdLnN0eWxlLnpJbmRleCA9IHpJbmRleDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGVzdCBzdWdnZXN0ZWQgdmFsdWVzIGFuZCBhcHBseSBtYXJnaW4sIHN0ZXAuXG4gICAgICAgIGZ1bmN0aW9uIHNldEhhbmRsZShoYW5kbGVOdW1iZXIsIHRvLCBsb29rQmFja3dhcmQsIGxvb2tGb3J3YXJkKSB7XG4gICAgICAgICAgICB0byA9IGNoZWNrSGFuZGxlUG9zaXRpb24oc2NvcGVfTG9jYXRpb25zLCBoYW5kbGVOdW1iZXIsIHRvLCBsb29rQmFja3dhcmQsIGxvb2tGb3J3YXJkLCBmYWxzZSk7XG5cbiAgICAgICAgICAgIGlmICh0byA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHVwZGF0ZUhhbmRsZVBvc2l0aW9uKGhhbmRsZU51bWJlciwgdG8pO1xuXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVwZGF0ZXMgc3R5bGUgYXR0cmlidXRlIGZvciBjb25uZWN0IG5vZGVzXG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZUNvbm5lY3QoaW5kZXgpIHtcbiAgICAgICAgICAgIC8vIFNraXAgY29ubmVjdHMgc2V0IHRvIGZhbHNlXG4gICAgICAgICAgICBpZiAoIXNjb3BlX0Nvbm5lY3RzW2luZGV4XSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGwgPSAwO1xuICAgICAgICAgICAgdmFyIGggPSAxMDA7XG5cbiAgICAgICAgICAgIGlmIChpbmRleCAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGwgPSBzY29wZV9Mb2NhdGlvbnNbaW5kZXggLSAxXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGluZGV4ICE9PSBzY29wZV9Db25uZWN0cy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgaCA9IHNjb3BlX0xvY2F0aW9uc1tpbmRleF07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFdlIHVzZSB0d28gcnVsZXM6XG4gICAgICAgICAgICAvLyAndHJhbnNsYXRlJyB0byBjaGFuZ2UgdGhlIGxlZnQvdG9wIG9mZnNldDtcbiAgICAgICAgICAgIC8vICdzY2FsZScgdG8gY2hhbmdlIHRoZSB3aWR0aCBvZiB0aGUgZWxlbWVudDtcbiAgICAgICAgICAgIC8vIEFzIHRoZSBlbGVtZW50IGhhcyBhIHdpZHRoIG9mIDEwMCUsIGEgdHJhbnNsYXRpb24gb2YgMTAwJSBpcyBlcXVhbCB0byAxMDAlIG9mIHRoZSBwYXJlbnQgKC5ub1VpLWJhc2UpXG4gICAgICAgICAgICB2YXIgY29ubmVjdFdpZHRoID0gaCAtIGw7XG4gICAgICAgICAgICB2YXIgdHJhbnNsYXRlUnVsZSA9IFwidHJhbnNsYXRlKFwiICsgaW5SdWxlT3JkZXIodHJhbnNmb3JtRGlyZWN0aW9uKGwsIGNvbm5lY3RXaWR0aCkgKyBcIiVcIiwgXCIwXCIpICsgXCIpXCI7XG4gICAgICAgICAgICB2YXIgc2NhbGVSdWxlID0gXCJzY2FsZShcIiArIGluUnVsZU9yZGVyKGNvbm5lY3RXaWR0aCAvIDEwMCwgXCIxXCIpICsgXCIpXCI7XG5cbiAgICAgICAgICAgIHNjb3BlX0Nvbm5lY3RzW2luZGV4XS5zdHlsZVtvcHRpb25zLnRyYW5zZm9ybVJ1bGVdID0gdHJhbnNsYXRlUnVsZSArIFwiIFwiICsgc2NhbGVSdWxlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUGFyc2VzIHZhbHVlIHBhc3NlZCB0byAuc2V0IG1ldGhvZC4gUmV0dXJucyBjdXJyZW50IHZhbHVlIGlmIG5vdCBwYXJzZS1hYmxlLlxuICAgICAgICBmdW5jdGlvbiByZXNvbHZlVG9WYWx1ZSh0bywgaGFuZGxlTnVtYmVyKSB7XG4gICAgICAgICAgICAvLyBTZXR0aW5nIHdpdGggbnVsbCBpbmRpY2F0ZXMgYW4gJ2lnbm9yZScuXG4gICAgICAgICAgICAvLyBJbnB1dHRpbmcgJ2ZhbHNlJyBpcyBpbnZhbGlkLlxuICAgICAgICAgICAgaWYgKHRvID09PSBudWxsIHx8IHRvID09PSBmYWxzZSB8fCB0byA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNjb3BlX0xvY2F0aW9uc1toYW5kbGVOdW1iZXJdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJZiBhIGZvcm1hdHRlZCBudW1iZXIgd2FzIHBhc3NlZCwgYXR0ZW1wdCB0byBkZWNvZGUgaXQuXG4gICAgICAgICAgICBpZiAodHlwZW9mIHRvID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICAgICAgdG8gPSBTdHJpbmcodG8pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0byA9IG9wdGlvbnMuZm9ybWF0LmZyb20odG8pO1xuICAgICAgICAgICAgdG8gPSBzY29wZV9TcGVjdHJ1bS50b1N0ZXBwaW5nKHRvKTtcblxuICAgICAgICAgICAgLy8gSWYgcGFyc2luZyB0aGUgbnVtYmVyIGZhaWxlZCwgdXNlIHRoZSBjdXJyZW50IHZhbHVlLlxuICAgICAgICAgICAgaWYgKHRvID09PSBmYWxzZSB8fCBpc05hTih0bykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2NvcGVfTG9jYXRpb25zW2hhbmRsZU51bWJlcl07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0bztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNldCB0aGUgc2xpZGVyIHZhbHVlLlxuICAgICAgICBmdW5jdGlvbiB2YWx1ZVNldChpbnB1dCwgZmlyZVNldEV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgdmFsdWVzID0gYXNBcnJheShpbnB1dCk7XG4gICAgICAgICAgICB2YXIgaXNJbml0ID0gc2NvcGVfTG9jYXRpb25zWzBdID09PSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgIC8vIEV2ZW50IGZpcmVzIGJ5IGRlZmF1bHRcbiAgICAgICAgICAgIGZpcmVTZXRFdmVudCA9IGZpcmVTZXRFdmVudCA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6ICEhZmlyZVNldEV2ZW50O1xuXG4gICAgICAgICAgICAvLyBBbmltYXRpb24gaXMgb3B0aW9uYWwuXG4gICAgICAgICAgICAvLyBNYWtlIHN1cmUgdGhlIGluaXRpYWwgdmFsdWVzIHdlcmUgc2V0IGJlZm9yZSB1c2luZyBhbmltYXRlZCBwbGFjZW1lbnQuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5hbmltYXRlICYmICFpc0luaXQpIHtcbiAgICAgICAgICAgICAgICBhZGRDbGFzc0ZvcihzY29wZV9UYXJnZXQsIG9wdGlvbnMuY3NzQ2xhc3Nlcy50YXAsIG9wdGlvbnMuYW5pbWF0aW9uRHVyYXRpb24pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBGaXJzdCBwYXNzLCB3aXRob3V0IGxvb2tBaGVhZCBidXQgd2l0aCBsb29rQmFja3dhcmQuIFZhbHVlcyBhcmUgc2V0IGZyb20gbGVmdCB0byByaWdodC5cbiAgICAgICAgICAgIHNjb3BlX0hhbmRsZU51bWJlcnMuZm9yRWFjaChmdW5jdGlvbihoYW5kbGVOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICBzZXRIYW5kbGUoaGFuZGxlTnVtYmVyLCByZXNvbHZlVG9WYWx1ZSh2YWx1ZXNbaGFuZGxlTnVtYmVyXSwgaGFuZGxlTnVtYmVyKSwgdHJ1ZSwgZmFsc2UpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHZhciBpID0gc2NvcGVfSGFuZGxlTnVtYmVycy5sZW5ndGggPT09IDEgPyAwIDogMTtcblxuICAgICAgICAgICAgLy8gU2Vjb25kYXJ5IHBhc3Nlcy4gTm93IHRoYXQgYWxsIGJhc2UgdmFsdWVzIGFyZSBzZXQsIGFwcGx5IGNvbnN0cmFpbnRzLlxuICAgICAgICAgICAgLy8gSXRlcmF0ZSBhbGwgaGFuZGxlcyB0byBlbnN1cmUgY29uc3RyYWludHMgYXJlIGFwcGxpZWQgZm9yIHRoZSBlbnRpcmUgc2xpZGVyIChJc3N1ZSAjMTAwOSlcbiAgICAgICAgICAgIGZvciAoOyBpIDwgc2NvcGVfSGFuZGxlTnVtYmVycy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIHNjb3BlX0hhbmRsZU51bWJlcnMuZm9yRWFjaChmdW5jdGlvbihoYW5kbGVOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0SGFuZGxlKGhhbmRsZU51bWJlciwgc2NvcGVfTG9jYXRpb25zW2hhbmRsZU51bWJlcl0sIHRydWUsIHRydWUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzZXRaaW5kZXgoKTtcblxuICAgICAgICAgICAgc2NvcGVfSGFuZGxlTnVtYmVycy5mb3JFYWNoKGZ1bmN0aW9uKGhhbmRsZU51bWJlcikge1xuICAgICAgICAgICAgICAgIGZpcmVFdmVudChcInVwZGF0ZVwiLCBoYW5kbGVOdW1iZXIpO1xuXG4gICAgICAgICAgICAgICAgLy8gRmlyZSB0aGUgZXZlbnQgb25seSBmb3IgaGFuZGxlcyB0aGF0IHJlY2VpdmVkIGEgbmV3IHZhbHVlLCBhcyBwZXIgIzU3OVxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZXNbaGFuZGxlTnVtYmVyXSAhPT0gbnVsbCAmJiBmaXJlU2V0RXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlyZUV2ZW50KFwic2V0XCIsIGhhbmRsZU51bWJlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZXNldCBzbGlkZXIgdG8gaW5pdGlhbCB2YWx1ZXNcbiAgICAgICAgZnVuY3Rpb24gdmFsdWVSZXNldChmaXJlU2V0RXZlbnQpIHtcbiAgICAgICAgICAgIHZhbHVlU2V0KG9wdGlvbnMuc3RhcnQsIGZpcmVTZXRFdmVudCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZXQgdmFsdWUgZm9yIGEgc2luZ2xlIGhhbmRsZVxuICAgICAgICBmdW5jdGlvbiB2YWx1ZVNldEhhbmRsZShoYW5kbGVOdW1iZXIsIHZhbHVlLCBmaXJlU2V0RXZlbnQpIHtcbiAgICAgICAgICAgIC8vIEVuc3VyZSBudW1lcmljIGlucHV0XG4gICAgICAgICAgICBoYW5kbGVOdW1iZXIgPSBOdW1iZXIoaGFuZGxlTnVtYmVyKTtcblxuICAgICAgICAgICAgaWYgKCEoaGFuZGxlTnVtYmVyID49IDAgJiYgaGFuZGxlTnVtYmVyIDwgc2NvcGVfSGFuZGxlTnVtYmVycy5sZW5ndGgpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiBpbnZhbGlkIGhhbmRsZSBudW1iZXIsIGdvdDogXCIgKyBoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBMb29rIGJvdGggYmFja3dhcmQgYW5kIGZvcndhcmQsIHNpbmNlIHdlIGRvbid0IHdhbnQgdGhpcyBoYW5kbGUgdG8gXCJwdXNoXCIgb3RoZXIgaGFuZGxlcyAoIzk2MCk7XG4gICAgICAgICAgICBzZXRIYW5kbGUoaGFuZGxlTnVtYmVyLCByZXNvbHZlVG9WYWx1ZSh2YWx1ZSwgaGFuZGxlTnVtYmVyKSwgdHJ1ZSwgdHJ1ZSk7XG5cbiAgICAgICAgICAgIGZpcmVFdmVudChcInVwZGF0ZVwiLCBoYW5kbGVOdW1iZXIpO1xuXG4gICAgICAgICAgICBpZiAoZmlyZVNldEV2ZW50KSB7XG4gICAgICAgICAgICAgICAgZmlyZUV2ZW50KFwic2V0XCIsIGhhbmRsZU51bWJlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBHZXQgdGhlIHNsaWRlciB2YWx1ZS5cbiAgICAgICAgZnVuY3Rpb24gdmFsdWVHZXQoKSB7XG4gICAgICAgICAgICB2YXIgdmFsdWVzID0gc2NvcGVfVmFsdWVzLm1hcChvcHRpb25zLmZvcm1hdC50byk7XG5cbiAgICAgICAgICAgIC8vIElmIG9ubHkgb25lIGhhbmRsZSBpcyB1c2VkLCByZXR1cm4gYSBzaW5nbGUgdmFsdWUuXG4gICAgICAgICAgICBpZiAodmFsdWVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZXNbMF07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZW1vdmVzIGNsYXNzZXMgZnJvbSB0aGUgcm9vdCBhbmQgZW1wdGllcyBpdC5cbiAgICAgICAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBvcHRpb25zLmNzc0NsYXNzZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoIW9wdGlvbnMuY3NzQ2xhc3Nlcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZW1vdmVDbGFzcyhzY29wZV9UYXJnZXQsIG9wdGlvbnMuY3NzQ2xhc3Nlc1trZXldKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgd2hpbGUgKHNjb3BlX1RhcmdldC5maXJzdENoaWxkKSB7XG4gICAgICAgICAgICAgICAgc2NvcGVfVGFyZ2V0LnJlbW92ZUNoaWxkKHNjb3BlX1RhcmdldC5maXJzdENoaWxkKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGVsZXRlIHNjb3BlX1RhcmdldC5ub1VpU2xpZGVyO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0TmV4dFN0ZXBzRm9ySGFuZGxlKGhhbmRsZU51bWJlcikge1xuICAgICAgICAgICAgdmFyIGxvY2F0aW9uID0gc2NvcGVfTG9jYXRpb25zW2hhbmRsZU51bWJlcl07XG4gICAgICAgICAgICB2YXIgbmVhcmJ5U3RlcHMgPSBzY29wZV9TcGVjdHJ1bS5nZXROZWFyYnlTdGVwcyhsb2NhdGlvbik7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBzY29wZV9WYWx1ZXNbaGFuZGxlTnVtYmVyXTtcbiAgICAgICAgICAgIHZhciBpbmNyZW1lbnQgPSBuZWFyYnlTdGVwcy50aGlzU3RlcC5zdGVwO1xuICAgICAgICAgICAgdmFyIGRlY3JlbWVudCA9IG51bGw7XG5cbiAgICAgICAgICAgIC8vIElmIHNuYXBwZWQsIGRpcmVjdGx5IHVzZSBkZWZpbmVkIHN0ZXAgdmFsdWVcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnNuYXApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSAtIG5lYXJieVN0ZXBzLnN0ZXBCZWZvcmUuc3RhcnRWYWx1ZSB8fCBudWxsLFxuICAgICAgICAgICAgICAgICAgICBuZWFyYnlTdGVwcy5zdGVwQWZ0ZXIuc3RhcnRWYWx1ZSAtIHZhbHVlIHx8IG51bGxcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJZiB0aGUgbmV4dCB2YWx1ZSBpbiB0aGlzIHN0ZXAgbW92ZXMgaW50byB0aGUgbmV4dCBzdGVwLFxuICAgICAgICAgICAgLy8gdGhlIGluY3JlbWVudCBpcyB0aGUgc3RhcnQgb2YgdGhlIG5leHQgc3RlcCAtIHRoZSBjdXJyZW50IHZhbHVlXG4gICAgICAgICAgICBpZiAoaW5jcmVtZW50ICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSArIGluY3JlbWVudCA+IG5lYXJieVN0ZXBzLnN0ZXBBZnRlci5zdGFydFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGluY3JlbWVudCA9IG5lYXJieVN0ZXBzLnN0ZXBBZnRlci5zdGFydFZhbHVlIC0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJZiB0aGUgdmFsdWUgaXMgYmV5b25kIHRoZSBzdGFydGluZyBwb2ludFxuICAgICAgICAgICAgaWYgKHZhbHVlID4gbmVhcmJ5U3RlcHMudGhpc1N0ZXAuc3RhcnRWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGRlY3JlbWVudCA9IG5lYXJieVN0ZXBzLnRoaXNTdGVwLnN0ZXA7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG5lYXJieVN0ZXBzLnN0ZXBCZWZvcmUuc3RlcCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBkZWNyZW1lbnQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSWYgYSBoYW5kbGUgaXMgYXQgdGhlIHN0YXJ0IG9mIGEgc3RlcCwgaXQgYWx3YXlzIHN0ZXBzIGJhY2sgaW50byB0aGUgcHJldmlvdXMgc3RlcCBmaXJzdFxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZGVjcmVtZW50ID0gdmFsdWUgLSBuZWFyYnlTdGVwcy5zdGVwQmVmb3JlLmhpZ2hlc3RTdGVwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBOb3csIGlmIGF0IHRoZSBzbGlkZXIgZWRnZXMsIHRoZXJlIGlzIG5vIGluL2RlY3JlbWVudFxuICAgICAgICAgICAgaWYgKGxvY2F0aW9uID09PSAxMDApIHtcbiAgICAgICAgICAgICAgICBpbmNyZW1lbnQgPSBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChsb2NhdGlvbiA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGRlY3JlbWVudCA9IG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEFzIHBlciAjMzkxLCB0aGUgY29tcGFyaXNvbiBmb3IgdGhlIGRlY3JlbWVudCBzdGVwIGNhbiBoYXZlIHNvbWUgcm91bmRpbmcgaXNzdWVzLlxuICAgICAgICAgICAgdmFyIHN0ZXBEZWNpbWFscyA9IHNjb3BlX1NwZWN0cnVtLmNvdW50U3RlcERlY2ltYWxzKCk7XG5cbiAgICAgICAgICAgIC8vIFJvdW5kIHBlciAjMzkxXG4gICAgICAgICAgICBpZiAoaW5jcmVtZW50ICE9PSBudWxsICYmIGluY3JlbWVudCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBpbmNyZW1lbnQgPSBOdW1iZXIoaW5jcmVtZW50LnRvRml4ZWQoc3RlcERlY2ltYWxzKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChkZWNyZW1lbnQgIT09IG51bGwgJiYgZGVjcmVtZW50ICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIGRlY3JlbWVudCA9IE51bWJlcihkZWNyZW1lbnQudG9GaXhlZChzdGVwRGVjaW1hbHMpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIFtkZWNyZW1lbnQsIGluY3JlbWVudF07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBHZXQgdGhlIGN1cnJlbnQgc3RlcCBzaXplIGZvciB0aGUgc2xpZGVyLlxuICAgICAgICBmdW5jdGlvbiBnZXROZXh0U3RlcHMoKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NvcGVfSGFuZGxlTnVtYmVycy5tYXAoZ2V0TmV4dFN0ZXBzRm9ySGFuZGxlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVwZGF0ZWFibGU6IG1hcmdpbiwgbGltaXQsIHBhZGRpbmcsIHN0ZXAsIHJhbmdlLCBhbmltYXRlLCBzbmFwXG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZU9wdGlvbnMob3B0aW9uc1RvVXBkYXRlLCBmaXJlU2V0RXZlbnQpIHtcbiAgICAgICAgICAgIC8vIFNwZWN0cnVtIGlzIGNyZWF0ZWQgdXNpbmcgdGhlIHJhbmdlLCBzbmFwLCBkaXJlY3Rpb24gYW5kIHN0ZXAgb3B0aW9ucy5cbiAgICAgICAgICAgIC8vICdzbmFwJyBhbmQgJ3N0ZXAnIGNhbiBiZSB1cGRhdGVkLlxuICAgICAgICAgICAgLy8gSWYgJ3NuYXAnIGFuZCAnc3RlcCcgYXJlIG5vdCBwYXNzZWQsIHRoZXkgc2hvdWxkIHJlbWFpbiB1bmNoYW5nZWQuXG4gICAgICAgICAgICB2YXIgdiA9IHZhbHVlR2V0KCk7XG5cbiAgICAgICAgICAgIHZhciB1cGRhdGVBYmxlID0gW1xuICAgICAgICAgICAgICAgIFwibWFyZ2luXCIsXG4gICAgICAgICAgICAgICAgXCJsaW1pdFwiLFxuICAgICAgICAgICAgICAgIFwicGFkZGluZ1wiLFxuICAgICAgICAgICAgICAgIFwicmFuZ2VcIixcbiAgICAgICAgICAgICAgICBcImFuaW1hdGVcIixcbiAgICAgICAgICAgICAgICBcInNuYXBcIixcbiAgICAgICAgICAgICAgICBcInN0ZXBcIixcbiAgICAgICAgICAgICAgICBcImZvcm1hdFwiLFxuICAgICAgICAgICAgICAgIFwicGlwc1wiLFxuICAgICAgICAgICAgICAgIFwidG9vbHRpcHNcIlxuICAgICAgICAgICAgXTtcblxuICAgICAgICAgICAgLy8gT25seSBjaGFuZ2Ugb3B0aW9ucyB0aGF0IHdlJ3JlIGFjdHVhbGx5IHBhc3NlZCB0byB1cGRhdGUuXG4gICAgICAgICAgICB1cGRhdGVBYmxlLmZvckVhY2goZnVuY3Rpb24obmFtZSkge1xuICAgICAgICAgICAgICAgIC8vIENoZWNrIGZvciB1bmRlZmluZWQuIG51bGwgcmVtb3ZlcyB0aGUgdmFsdWUuXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnNUb1VwZGF0ZVtuYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsT3B0aW9uc1tuYW1lXSA9IG9wdGlvbnNUb1VwZGF0ZVtuYW1lXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdmFyIG5ld09wdGlvbnMgPSB0ZXN0T3B0aW9ucyhvcmlnaW5hbE9wdGlvbnMpO1xuXG4gICAgICAgICAgICAvLyBMb2FkIG5ldyBvcHRpb25zIGludG8gdGhlIHNsaWRlciBzdGF0ZVxuICAgICAgICAgICAgdXBkYXRlQWJsZS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9uc1RvVXBkYXRlW25hbWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uc1tuYW1lXSA9IG5ld09wdGlvbnNbbmFtZV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHNjb3BlX1NwZWN0cnVtID0gbmV3T3B0aW9ucy5zcGVjdHJ1bTtcblxuICAgICAgICAgICAgLy8gTGltaXQsIG1hcmdpbiBhbmQgcGFkZGluZyBkZXBlbmQgb24gdGhlIHNwZWN0cnVtIGJ1dCBhcmUgc3RvcmVkIG91dHNpZGUgb2YgaXQuICgjNjc3KVxuICAgICAgICAgICAgb3B0aW9ucy5tYXJnaW4gPSBuZXdPcHRpb25zLm1hcmdpbjtcbiAgICAgICAgICAgIG9wdGlvbnMubGltaXQgPSBuZXdPcHRpb25zLmxpbWl0O1xuICAgICAgICAgICAgb3B0aW9ucy5wYWRkaW5nID0gbmV3T3B0aW9ucy5wYWRkaW5nO1xuXG4gICAgICAgICAgICAvLyBVcGRhdGUgcGlwcywgcmVtb3ZlcyBleGlzdGluZy5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLnBpcHMpIHtcbiAgICAgICAgICAgICAgICBwaXBzKG9wdGlvbnMucGlwcyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlbW92ZVBpcHMoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVXBkYXRlIHRvb2x0aXBzLCByZW1vdmVzIGV4aXN0aW5nLlxuICAgICAgICAgICAgaWYgKG9wdGlvbnMudG9vbHRpcHMpIHtcbiAgICAgICAgICAgICAgICB0b29sdGlwcygpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZW1vdmVUb29sdGlwcygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJbnZhbGlkYXRlIHRoZSBjdXJyZW50IHBvc2l0aW9uaW5nIHNvIHZhbHVlU2V0IGZvcmNlcyBhbiB1cGRhdGUuXG4gICAgICAgICAgICBzY29wZV9Mb2NhdGlvbnMgPSBbXTtcbiAgICAgICAgICAgIHZhbHVlU2V0KG9wdGlvbnNUb1VwZGF0ZS5zdGFydCB8fCB2LCBmaXJlU2V0RXZlbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSW5pdGlhbGl6YXRpb24gc3RlcHNcbiAgICAgICAgZnVuY3Rpb24gc2V0dXBTbGlkZXIoKSB7XG4gICAgICAgICAgICAvLyBDcmVhdGUgdGhlIGJhc2UgZWxlbWVudCwgaW5pdGlhbGl6ZSBIVE1MIGFuZCBzZXQgY2xhc3Nlcy5cbiAgICAgICAgICAgIC8vIEFkZCBoYW5kbGVzIGFuZCBjb25uZWN0IGVsZW1lbnRzLlxuICAgICAgICAgICAgc2NvcGVfQmFzZSA9IGFkZFNsaWRlcihzY29wZV9UYXJnZXQpO1xuXG4gICAgICAgICAgICBhZGRFbGVtZW50cyhvcHRpb25zLmNvbm5lY3QsIHNjb3BlX0Jhc2UpO1xuXG4gICAgICAgICAgICAvLyBBdHRhY2ggdXNlciBldmVudHMuXG4gICAgICAgICAgICBiaW5kU2xpZGVyRXZlbnRzKG9wdGlvbnMuZXZlbnRzKTtcblxuICAgICAgICAgICAgLy8gVXNlIHRoZSBwdWJsaWMgdmFsdWUgbWV0aG9kIHRvIHNldCB0aGUgc3RhcnQgdmFsdWVzLlxuICAgICAgICAgICAgdmFsdWVTZXQob3B0aW9ucy5zdGFydCk7XG5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLnBpcHMpIHtcbiAgICAgICAgICAgICAgICBwaXBzKG9wdGlvbnMucGlwcyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLnRvb2x0aXBzKSB7XG4gICAgICAgICAgICAgICAgdG9vbHRpcHMoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYXJpYSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgc2V0dXBTbGlkZXIoKTtcblxuICAgICAgICAvLyBub2luc3BlY3Rpb24gSlNVbnVzZWRHbG9iYWxTeW1ib2xzXG4gICAgICAgIHNjb3BlX1NlbGYgPSB7XG4gICAgICAgICAgICBkZXN0cm95OiBkZXN0cm95LFxuICAgICAgICAgICAgc3RlcHM6IGdldE5leHRTdGVwcyxcbiAgICAgICAgICAgIG9uOiBiaW5kRXZlbnQsXG4gICAgICAgICAgICBvZmY6IHJlbW92ZUV2ZW50LFxuICAgICAgICAgICAgZ2V0OiB2YWx1ZUdldCxcbiAgICAgICAgICAgIHNldDogdmFsdWVTZXQsXG4gICAgICAgICAgICBzZXRIYW5kbGU6IHZhbHVlU2V0SGFuZGxlLFxuICAgICAgICAgICAgcmVzZXQ6IHZhbHVlUmVzZXQsXG4gICAgICAgICAgICAvLyBFeHBvc2VkIGZvciB1bml0IHRlc3RpbmcsIGRvbid0IHVzZSB0aGlzIGluIHlvdXIgYXBwbGljYXRpb24uXG4gICAgICAgICAgICBfX21vdmVIYW5kbGVzOiBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICAgICAgICAgICAgbW92ZUhhbmRsZXMoYSwgYiwgc2NvcGVfTG9jYXRpb25zLCBjKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvcHRpb25zOiBvcmlnaW5hbE9wdGlvbnMsIC8vIElzc3VlICM2MDAsICM2NzhcbiAgICAgICAgICAgIHVwZGF0ZU9wdGlvbnM6IHVwZGF0ZU9wdGlvbnMsXG4gICAgICAgICAgICB0YXJnZXQ6IHNjb3BlX1RhcmdldCwgLy8gSXNzdWUgIzU5N1xuICAgICAgICAgICAgcmVtb3ZlUGlwczogcmVtb3ZlUGlwcyxcbiAgICAgICAgICAgIHJlbW92ZVRvb2x0aXBzOiByZW1vdmVUb29sdGlwcyxcbiAgICAgICAgICAgIGdldFRvb2x0aXBzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2NvcGVfVG9vbHRpcHM7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0T3JpZ2luczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNjb3BlX0hhbmRsZXM7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGlwczogcGlwcyAvLyBJc3N1ZSAjNTk0XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHNjb3BlX1NlbGY7XG4gICAgfVxuXG4gICAgLy8gUnVuIHRoZSBzdGFuZGFyZCBpbml0aWFsaXplclxuICAgIGZ1bmN0aW9uIGluaXRpYWxpemUodGFyZ2V0LCBvcmlnaW5hbE9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCF0YXJnZXQgfHwgIXRhcmdldC5ub2RlTmFtZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiBjcmVhdGUgcmVxdWlyZXMgYSBzaW5nbGUgZWxlbWVudCwgZ290OiBcIiArIHRhcmdldCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaHJvdyBhbiBlcnJvciBpZiB0aGUgc2xpZGVyIHdhcyBhbHJlYWR5IGluaXRpYWxpemVkLlxuICAgICAgICBpZiAodGFyZ2V0Lm5vVWlTbGlkZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogU2xpZGVyIHdhcyBhbHJlYWR5IGluaXRpYWxpemVkLlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRlc3QgdGhlIG9wdGlvbnMgYW5kIGNyZWF0ZSB0aGUgc2xpZGVyIGVudmlyb25tZW50O1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHRlc3RPcHRpb25zKG9yaWdpbmFsT3B0aW9ucywgdGFyZ2V0KTtcbiAgICAgICAgdmFyIGFwaSA9IHNjb3BlKHRhcmdldCwgb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zKTtcblxuICAgICAgICB0YXJnZXQubm9VaVNsaWRlciA9IGFwaTtcblxuICAgICAgICByZXR1cm4gYXBpO1xuICAgIH1cblxuICAgIC8vIFVzZSBhbiBvYmplY3QgaW5zdGVhZCBvZiBhIGZ1bmN0aW9uIGZvciBmdXR1cmUgZXhwYW5kYWJpbGl0eTtcbiAgICByZXR1cm4ge1xuICAgICAgICAvLyBFeHBvc2VkIGZvciB1bml0IHRlc3RpbmcsIGRvbid0IHVzZSB0aGlzIGluIHlvdXIgYXBwbGljYXRpb24uXG4gICAgICAgIF9fc3BlY3RydW06IFNwZWN0cnVtLFxuICAgICAgICB2ZXJzaW9uOiBWRVJTSU9OLFxuICAgICAgICAvLyBBIHJlZmVyZW5jZSB0byB0aGUgZGVmYXVsdCBjbGFzc2VzLCBhbGxvd3MgZ2xvYmFsIGNoYW5nZXMuXG4gICAgICAgIC8vIFVzZSB0aGUgY3NzQ2xhc3NlcyBvcHRpb24gZm9yIGNoYW5nZXMgdG8gb25lIHNsaWRlci5cbiAgICAgICAgY3NzQ2xhc3NlczogY3NzQ2xhc3NlcyxcbiAgICAgICAgY3JlYXRlOiBpbml0aWFsaXplXG4gICAgfTtcbn0pO1xuIiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9ub3Vpc2xpZGVyLmNzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBpc09sZElFID0gZnVuY3Rpb24gaXNPbGRJRSgpIHtcbiAgdmFyIG1lbW87XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSgpIHtcbiAgICBpZiAodHlwZW9mIG1lbW8gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuICAgICAgLy8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuICAgICAgLy8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuICAgICAgLy8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG4gICAgICAvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcbiAgICAgIG1lbW8gPSBCb29sZWFuKHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtbztcbiAgfTtcbn0oKTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uIGdldFRhcmdldCgpIHtcbiAgdmFyIG1lbW8gPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKHRhcmdldCkge1xuICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtb1t0YXJnZXRdO1xuICB9O1xufSgpO1xuXG52YXIgc3R5bGVzSW5Eb20gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRvbS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRvbVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdXG4gICAgfTtcblxuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZXNJbkRvbS5wdXNoKHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogYWRkU3R5bGUob2JqLCBvcHRpb25zKSxcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgdmFyIGF0dHJpYnV0ZXMgPSBvcHRpb25zLmF0dHJpYnV0ZXMgfHwge307XG5cbiAgaWYgKHR5cGVvZiBhdHRyaWJ1dGVzLm5vbmNlID09PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gJ3VuZGVmaW5lZCcgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgICBpZiAobm9uY2UpIHtcbiAgICAgIGF0dHJpYnV0ZXMubm9uY2UgPSBub25jZTtcbiAgICB9XG4gIH1cblxuICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyaWJ1dGVzW2tleV0pO1xuICB9KTtcblxuICBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb3B0aW9ucy5pbnNlcnQoc3R5bGUpO1xuICB9IGVsc2Uge1xuICAgIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQob3B0aW9ucy5pbnNlcnQgfHwgJ2hlYWQnKTtcblxuICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICAgIH1cblxuICAgIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gIH1cblxuICByZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbnZhciByZXBsYWNlVGV4dCA9IGZ1bmN0aW9uIHJlcGxhY2VUZXh0KCkge1xuICB2YXIgdGV4dFN0b3JlID0gW107XG4gIHJldHVybiBmdW5jdGlvbiByZXBsYWNlKGluZGV4LCByZXBsYWNlbWVudCkge1xuICAgIHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcbiAgICByZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKTtcbiAgfTtcbn0oKTtcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyhzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG4gIHZhciBjc3MgPSByZW1vdmUgPyAnJyA6IG9iai5tZWRpYSA/IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIikuY29uY2F0KG9iai5jc3MsIFwifVwiKSA6IG9iai5jc3M7IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcyk7XG4gICAgdmFyIGNoaWxkTm9kZXMgPSBzdHlsZS5jaGlsZE5vZGVzO1xuXG4gICAgaWYgKGNoaWxkTm9kZXNbaW5kZXhdKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfVxuXG4gICAgaWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgICBzdHlsZS5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZS5hcHBlbmRDaGlsZChjc3NOb2RlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyhzdHlsZSwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBvYmouY3NzO1xuICB2YXIgbWVkaWEgPSBvYmoubWVkaWE7XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChtZWRpYSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZSgnbWVkaWEnLCBtZWRpYSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUucmVtb3ZlQXR0cmlidXRlKCdtZWRpYScpO1xuICB9XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiBidG9hKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZS5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG52YXIgc2luZ2xldG9uID0gbnVsbDtcbnZhciBzaW5nbGV0b25Db3VudGVyID0gMDtcblxuZnVuY3Rpb24gYWRkU3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBzdHlsZTtcbiAgdmFyIHVwZGF0ZTtcbiAgdmFyIHJlbW92ZTtcblxuICBpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcbiAgICB2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrKztcbiAgICBzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIGZhbHNlKTtcbiAgICByZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cbiAgICByZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuICAgIH07XG4gIH1cblxuICB1cGRhdGUob2JqKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB1cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlKCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OyAvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cbiAgLy8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXG4gIGlmICghb3B0aW9ucy5zaW5nbGV0b24gJiYgdHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uICE9PSAnYm9vbGVhbicpIHtcbiAgICBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcbiAgfVxuXG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobmV3TGlzdCkgIT09ICdbb2JqZWN0IEFycmF5XScpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5Eb21bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRG9tW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRG9tLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi8qISBub3Vpc2xpZGVyIC0gMTQuNS4wIC0gNS8xMS8yMDIwICovXFxuLyogRnVuY3Rpb25hbCBzdHlsaW5nO1xcbiAqIFRoZXNlIHN0eWxlcyBhcmUgcmVxdWlyZWQgZm9yIG5vVWlTbGlkZXIgdG8gZnVuY3Rpb24uXFxuICogWW91IGRvbid0IG5lZWQgdG8gY2hhbmdlIHRoZXNlIHJ1bGVzIHRvIGFwcGx5IHlvdXIgZGVzaWduLlxcbiAqL1xcbi5ub1VpLXRhcmdldCxcXG4ubm9VaS10YXJnZXQgKiB7XFxuICAtd2Via2l0LXRvdWNoLWNhbGxvdXQ6IG5vbmU7XFxuICAtd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMCk7XFxuICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lO1xcbiAgLW1zLXRvdWNoLWFjdGlvbjogbm9uZTtcXG4gIHRvdWNoLWFjdGlvbjogbm9uZTtcXG4gIC1tcy11c2VyLXNlbGVjdDogbm9uZTtcXG4gIC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7XFxuICB1c2VyLXNlbGVjdDogbm9uZTtcXG4gIC1tb3otYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcbi5ub1VpLXRhcmdldCB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxufVxcbi5ub1VpLWJhc2UsXFxuLm5vVWktY29ubmVjdHMge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB6LWluZGV4OiAxO1xcbn1cXG4vKiBXcmFwcGVyIGZvciBhbGwgY29ubmVjdCBlbGVtZW50cy5cXG4gKi9cXG4ubm9VaS1jb25uZWN0cyB7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgei1pbmRleDogMDtcXG59XFxuLm5vVWktY29ubmVjdCxcXG4ubm9VaS1vcmlnaW4ge1xcbiAgd2lsbC1jaGFuZ2U6IHRyYW5zZm9ybTtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHotaW5kZXg6IDE7XFxuICB0b3A6IDA7XFxuICByaWdodDogMDtcXG4gIC1tcy10cmFuc2Zvcm0tb3JpZ2luOiAwIDA7XFxuICAtd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46IDAgMDtcXG4gIC13ZWJraXQtdHJhbnNmb3JtLXN0eWxlOiBwcmVzZXJ2ZS0zZDtcXG4gIHRyYW5zZm9ybS1vcmlnaW46IDAgMDtcXG4gIHRyYW5zZm9ybS1zdHlsZTogZmxhdDtcXG59XFxuLm5vVWktY29ubmVjdCB7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICB3aWR0aDogMTAwJTtcXG59XFxuLm5vVWktb3JpZ2luIHtcXG4gIGhlaWdodDogMTAlO1xcbiAgd2lkdGg6IDEwJTtcXG59XFxuLyogT2Zmc2V0IGRpcmVjdGlvblxcbiAqL1xcbi5ub1VpLXR4dC1kaXItcnRsLm5vVWktaG9yaXpvbnRhbCAubm9VaS1vcmlnaW4ge1xcbiAgbGVmdDogMDtcXG4gIHJpZ2h0OiBhdXRvO1xcbn1cXG4vKiBHaXZlIG9yaWdpbnMgMCBoZWlnaHQvd2lkdGggc28gdGhleSBkb24ndCBpbnRlcmZlcmUgd2l0aCBjbGlja2luZyB0aGVcXG4gKiBjb25uZWN0IGVsZW1lbnRzLlxcbiAqL1xcbi5ub1VpLXZlcnRpY2FsIC5ub1VpLW9yaWdpbiB7XFxuICB3aWR0aDogMDtcXG59XFxuLm5vVWktaG9yaXpvbnRhbCAubm9VaS1vcmlnaW4ge1xcbiAgaGVpZ2h0OiAwO1xcbn1cXG4ubm9VaS1oYW5kbGUge1xcbiAgLXdlYmtpdC1iYWNrZmFjZS12aXNpYmlsaXR5OiBoaWRkZW47XFxuICBiYWNrZmFjZS12aXNpYmlsaXR5OiBoaWRkZW47XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxufVxcbi5ub1VpLXRvdWNoLWFyZWEge1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgd2lkdGg6IDEwMCU7XFxufVxcbi5ub1VpLXN0YXRlLXRhcCAubm9VaS1jb25uZWN0LFxcbi5ub1VpLXN0YXRlLXRhcCAubm9VaS1vcmlnaW4ge1xcbiAgLXdlYmtpdC10cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC4zcztcXG4gIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjNzO1xcbn1cXG4ubm9VaS1zdGF0ZS1kcmFnICoge1xcbiAgY3Vyc29yOiBpbmhlcml0ICFpbXBvcnRhbnQ7XFxufVxcbi8qIFNsaWRlciBzaXplIGFuZCBoYW5kbGUgcGxhY2VtZW50O1xcbiAqL1xcbi5ub1VpLWhvcml6b250YWwge1xcbiAgaGVpZ2h0OiAxOHB4O1xcbn1cXG4ubm9VaS1ob3Jpem9udGFsIC5ub1VpLWhhbmRsZSB7XFxuICB3aWR0aDogMzRweDtcXG4gIGhlaWdodDogMjhweDtcXG4gIHJpZ2h0OiAtMTdweDtcXG4gIHRvcDogLTZweDtcXG59XFxuLm5vVWktdmVydGljYWwge1xcbiAgd2lkdGg6IDE4cHg7XFxufVxcbi5ub1VpLXZlcnRpY2FsIC5ub1VpLWhhbmRsZSB7XFxuICB3aWR0aDogMjhweDtcXG4gIGhlaWdodDogMzRweDtcXG4gIHJpZ2h0OiAtNnB4O1xcbiAgdG9wOiAtMTdweDtcXG59XFxuLm5vVWktdHh0LWRpci1ydGwubm9VaS1ob3Jpem9udGFsIC5ub1VpLWhhbmRsZSB7XFxuICBsZWZ0OiAtMTdweDtcXG4gIHJpZ2h0OiBhdXRvO1xcbn1cXG4vKiBTdHlsaW5nO1xcbiAqIEdpdmluZyB0aGUgY29ubmVjdCBlbGVtZW50IGEgYm9yZGVyIHJhZGl1cyBjYXVzZXMgaXNzdWVzIHdpdGggdXNpbmcgdHJhbnNmb3JtOiBzY2FsZVxcbiAqL1xcbi5ub1VpLXRhcmdldCB7XFxuICBiYWNrZ3JvdW5kOiAjRkFGQUZBO1xcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xcbiAgYm9yZGVyOiAxcHggc29saWQgI0QzRDNEMztcXG4gIGJveC1zaGFkb3c6IGluc2V0IDAgMXB4IDFweCAjRjBGMEYwLCAwIDNweCA2cHggLTVweCAjQkJCO1xcbn1cXG4ubm9VaS1jb25uZWN0cyB7XFxuICBib3JkZXItcmFkaXVzOiAzcHg7XFxufVxcbi5ub1VpLWNvbm5lY3Qge1xcbiAgYmFja2dyb3VuZDogIzNGQjhBRjtcXG59XFxuLyogSGFuZGxlcyBhbmQgY3Vyc29ycztcXG4gKi9cXG4ubm9VaS1kcmFnZ2FibGUge1xcbiAgY3Vyc29yOiBldy1yZXNpemU7XFxufVxcbi5ub1VpLXZlcnRpY2FsIC5ub1VpLWRyYWdnYWJsZSB7XFxuICBjdXJzb3I6IG5zLXJlc2l6ZTtcXG59XFxuLm5vVWktaGFuZGxlIHtcXG4gIGJvcmRlcjogMXB4IHNvbGlkICNEOUQ5RDk7XFxuICBib3JkZXItcmFkaXVzOiAzcHg7XFxuICBiYWNrZ3JvdW5kOiAjRkZGO1xcbiAgY3Vyc29yOiBkZWZhdWx0O1xcbiAgYm94LXNoYWRvdzogaW5zZXQgMCAwIDFweCAjRkZGLCBpbnNldCAwIDFweCA3cHggI0VCRUJFQiwgMCAzcHggNnB4IC0zcHggI0JCQjtcXG59XFxuLm5vVWktYWN0aXZlIHtcXG4gIGJveC1zaGFkb3c6IGluc2V0IDAgMCAxcHggI0ZGRiwgaW5zZXQgMCAxcHggN3B4ICNEREQsIDAgM3B4IDZweCAtM3B4ICNCQkI7XFxufVxcbi8qIEhhbmRsZSBzdHJpcGVzO1xcbiAqL1xcbi5ub1VpLWhhbmRsZTpiZWZvcmUsXFxuLm5vVWktaGFuZGxlOmFmdGVyIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFwiO1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBoZWlnaHQ6IDE0cHg7XFxuICB3aWR0aDogMXB4O1xcbiAgYmFja2dyb3VuZDogI0U4RTdFNjtcXG4gIGxlZnQ6IDE0cHg7XFxuICB0b3A6IDZweDtcXG59XFxuLm5vVWktaGFuZGxlOmFmdGVyIHtcXG4gIGxlZnQ6IDE3cHg7XFxufVxcbi5ub1VpLXZlcnRpY2FsIC5ub1VpLWhhbmRsZTpiZWZvcmUsXFxuLm5vVWktdmVydGljYWwgLm5vVWktaGFuZGxlOmFmdGVyIHtcXG4gIHdpZHRoOiAxNHB4O1xcbiAgaGVpZ2h0OiAxcHg7XFxuICBsZWZ0OiA2cHg7XFxuICB0b3A6IDE0cHg7XFxufVxcbi5ub1VpLXZlcnRpY2FsIC5ub1VpLWhhbmRsZTphZnRlciB7XFxuICB0b3A6IDE3cHg7XFxufVxcbi8qIERpc2FibGVkIHN0YXRlO1xcbiAqL1xcbltkaXNhYmxlZF0gLm5vVWktY29ubmVjdCB7XFxuICBiYWNrZ3JvdW5kOiAjQjhCOEI4O1xcbn1cXG5bZGlzYWJsZWRdLm5vVWktdGFyZ2V0LFxcbltkaXNhYmxlZF0ubm9VaS1oYW5kbGUsXFxuW2Rpc2FibGVkXSAubm9VaS1oYW5kbGUge1xcbiAgY3Vyc29yOiBub3QtYWxsb3dlZDtcXG59XFxuLyogQmFzZTtcXG4gKlxcbiAqL1xcbi5ub1VpLXBpcHMsXFxuLm5vVWktcGlwcyAqIHtcXG4gIC1tb3otYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcbi5ub1VpLXBpcHMge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgY29sb3I6ICM5OTk7XFxufVxcbi8qIFZhbHVlcztcXG4gKlxcbiAqL1xcbi5ub1VpLXZhbHVlIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcbi5ub1VpLXZhbHVlLXN1YiB7XFxuICBjb2xvcjogI2NjYztcXG4gIGZvbnQtc2l6ZTogMTBweDtcXG59XFxuLyogTWFya2luZ3M7XFxuICpcXG4gKi9cXG4ubm9VaS1tYXJrZXIge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgYmFja2dyb3VuZDogI0NDQztcXG59XFxuLm5vVWktbWFya2VyLXN1YiB7XFxuICBiYWNrZ3JvdW5kOiAjQUFBO1xcbn1cXG4ubm9VaS1tYXJrZXItbGFyZ2Uge1xcbiAgYmFja2dyb3VuZDogI0FBQTtcXG59XFxuLyogSG9yaXpvbnRhbCBsYXlvdXQ7XFxuICpcXG4gKi9cXG4ubm9VaS1waXBzLWhvcml6b250YWwge1xcbiAgcGFkZGluZzogMTBweCAwO1xcbiAgaGVpZ2h0OiA4MHB4O1xcbiAgdG9wOiAxMDAlO1xcbiAgbGVmdDogMDtcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG4ubm9VaS12YWx1ZS1ob3Jpem9udGFsIHtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgNTAlKTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIDUwJSk7XFxufVxcbi5ub1VpLXJ0bCAubm9VaS12YWx1ZS1ob3Jpem9udGFsIHtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoNTAlLCA1MCUpO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoNTAlLCA1MCUpO1xcbn1cXG4ubm9VaS1tYXJrZXItaG9yaXpvbnRhbC5ub1VpLW1hcmtlciB7XFxuICBtYXJnaW4tbGVmdDogLTFweDtcXG4gIHdpZHRoOiAycHg7XFxuICBoZWlnaHQ6IDVweDtcXG59XFxuLm5vVWktbWFya2VyLWhvcml6b250YWwubm9VaS1tYXJrZXItc3ViIHtcXG4gIGhlaWdodDogMTBweDtcXG59XFxuLm5vVWktbWFya2VyLWhvcml6b250YWwubm9VaS1tYXJrZXItbGFyZ2Uge1xcbiAgaGVpZ2h0OiAxNXB4O1xcbn1cXG4vKiBWZXJ0aWNhbCBsYXlvdXQ7XFxuICpcXG4gKi9cXG4ubm9VaS1waXBzLXZlcnRpY2FsIHtcXG4gIHBhZGRpbmc6IDAgMTBweDtcXG4gIGhlaWdodDogMTAwJTtcXG4gIHRvcDogMDtcXG4gIGxlZnQ6IDEwMCU7XFxufVxcbi5ub1VpLXZhbHVlLXZlcnRpY2FsIHtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoMCwgLTUwJSk7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgwLCAtNTAlKTtcXG4gIHBhZGRpbmctbGVmdDogMjVweDtcXG59XFxuLm5vVWktcnRsIC5ub1VpLXZhbHVlLXZlcnRpY2FsIHtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoMCwgNTAlKTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKDAsIDUwJSk7XFxufVxcbi5ub1VpLW1hcmtlci12ZXJ0aWNhbC5ub1VpLW1hcmtlciB7XFxuICB3aWR0aDogNXB4O1xcbiAgaGVpZ2h0OiAycHg7XFxuICBtYXJnaW4tdG9wOiAtMXB4O1xcbn1cXG4ubm9VaS1tYXJrZXItdmVydGljYWwubm9VaS1tYXJrZXItc3ViIHtcXG4gIHdpZHRoOiAxMHB4O1xcbn1cXG4ubm9VaS1tYXJrZXItdmVydGljYWwubm9VaS1tYXJrZXItbGFyZ2Uge1xcbiAgd2lkdGg6IDE1cHg7XFxufVxcbi5ub1VpLXRvb2x0aXAge1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjRDlEOUQ5O1xcbiAgYm9yZGVyLXJhZGl1czogM3B4O1xcbiAgYmFja2dyb3VuZDogI2ZmZjtcXG4gIGNvbG9yOiAjMDAwO1xcbiAgcGFkZGluZzogNXB4O1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG59XFxuLm5vVWktaG9yaXpvbnRhbCAubm9VaS10b29sdGlwIHtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgMCk7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAwKTtcXG4gIGxlZnQ6IDUwJTtcXG4gIGJvdHRvbTogMTIwJTtcXG59XFxuLm5vVWktdmVydGljYWwgLm5vVWktdG9vbHRpcCB7XFxuICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlKDAsIC01MCUpO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMCwgLTUwJSk7XFxuICB0b3A6IDUwJTtcXG4gIHJpZ2h0OiAxMjAlO1xcbn1cXG4ubm9VaS1ob3Jpem9udGFsIC5ub1VpLW9yaWdpbiA+IC5ub1VpLXRvb2x0aXAge1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSg1MCUsIDApO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoNTAlLCAwKTtcXG4gIGxlZnQ6IGF1dG87XFxuICBib3R0b206IDEwcHg7XFxufVxcbi5ub1VpLXZlcnRpY2FsIC5ub1VpLW9yaWdpbiA+IC5ub1VpLXRvb2x0aXAge1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSgwLCAtMThweCk7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgwLCAtMThweCk7XFxuICB0b3A6IGF1dG87XFxuICByaWdodDogMjhweDtcXG59XFxuXCIsIFwiXCJdKTtcblxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXNlU291cmNlTWFwKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKTtcblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgcmV0dXJuICdAbWVkaWEgJyArIGl0ZW1bMl0gKyAneycgKyBjb250ZW50ICsgJ30nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgICB9XG4gICAgfSkuam9pbignJyk7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiAobW9kdWxlcywgbWVkaWFRdWVyeSkge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsICcnXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkID0gdGhpc1tpXVswXTtcblxuICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAoaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IG1vZHVsZXNbaV07IC8vIHNraXAgYWxyZWFkeSBpbXBvcnRlZCBtb2R1bGVcbiAgICAgIC8vIHRoaXMgaW1wbGVtZW50YXRpb24gaXMgbm90IDEwMCUgcGVyZmVjdCBmb3Igd2VpcmQgbWVkaWEgcXVlcnkgY29tYmluYXRpb25zXG4gICAgICAvLyB3aGVuIGEgbW9kdWxlIGlzIGltcG9ydGVkIG11bHRpcGxlIHRpbWVzIHdpdGggZGlmZmVyZW50IG1lZGlhIHF1ZXJpZXMuXG4gICAgICAvLyBJIGhvcGUgdGhpcyB3aWxsIG5ldmVyIG9jY3VyIChIZXkgdGhpcyB3YXkgd2UgaGF2ZSBzbWFsbGVyIGJ1bmRsZXMpXG5cbiAgICAgIGlmIChpdGVtWzBdID09IG51bGwgfHwgIWFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgaWYgKG1lZGlhUXVlcnkgJiYgIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgfSBlbHNlIGlmIChtZWRpYVF1ZXJ5KSB7XG4gICAgICAgICAgaXRlbVsyXSA9ICcoJyArIGl0ZW1bMl0gKyAnKSBhbmQgKCcgKyBtZWRpYVF1ZXJ5ICsgJyknO1xuICAgICAgICB9XG5cbiAgICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07XG5cbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCAnJztcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG5cbiAgaWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gJy8qIyBzb3VyY2VVUkw9JyArIGNzc01hcHBpbmcuc291cmNlUm9vdCArIHNvdXJjZSArICcgKi8nO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oJ1xcbicpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKCdcXG4nKTtcbn0gLy8gQWRhcHRlZCBmcm9tIGNvbnZlcnQtc291cmNlLW1hcCAoTUlUKVxuXG5cbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xuICB2YXIgZGF0YSA9ICdzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCwnICsgYmFzZTY0O1xuICByZXR1cm4gJy8qIyAnICsgZGF0YSArICcgKi8nO1xufSIsInZhciBtYXAgPSB7XG5cdFwiLi9Hcm91cCAxNS5zdmdcIjogMTAsXG5cdFwiLi9hY2Nlc3Nvcmllcy1taW4ucG5nXCI6IDExLFxuXHRcIi4vYWNjZXNzb3JpZXMucG5nXCI6IDEyLFxuXHRcIi4vYWRkLXByb2R1Y3QtMS5zdmdcIjogMTMsXG5cdFwiLi9hZGQtcHJvZHVjdC0yLnN2Z1wiOiAxNCxcblx0XCIuL2FkZC1wcm9kdWN0LTMuc3ZnXCI6IDE1LFxuXHRcIi4vYW1lcmljYW4tZXhwcmVzcy5zdmdcIjogMTYsXG5cdFwiLi9hcnJvdy5zdmdcIjogMTcsXG5cdFwiLi9hcnJvd3Muc3ZnXCI6IDE4LFxuXHRcIi4vYXJ0aWNsZS1tYWluLWltYWdlLW1pbi5wbmdcIjogMTksXG5cdFwiLi9hcnRpY2xlLW1haW4taW1hZ2UucG5nXCI6IDIwLFxuXHRcIi4vYXJ0aWNsZS1wcmV2aWV3LTEtbWluLnBuZ1wiOiAyMSxcblx0XCIuL2FydGljbGUtcHJldmlldy0xLnN2Z1wiOiAyMixcblx0XCIuL2FydGljbGUtcHJldmlldy0yLnN2Z1wiOiAyMyxcblx0XCIuL2JhY2tncm91bmQtaW1nLW1pbi5wbmdcIjogMjQsXG5cdFwiLi9iYWNrZ3JvdW5kLWltZy5wbmdcIjogMjUsXG5cdFwiLi9iYWctMS5zdmdcIjogMjYsXG5cdFwiLi9iYWctYmxhY2suc3ZnXCI6IDI3LFxuXHRcIi4vYmFnLnN2Z1wiOiAyOCxcblx0XCIuL2Nsb3NlLnN2Z1wiOiAyOSxcblx0XCIuL2Nsb3RoZXMtbWluLnBuZ1wiOiAzMCxcblx0XCIuL2Nsb3RoZXMucG5nXCI6IDMxLFxuXHRcIi4vY2xvdGhlcy5zdmdcIjogMzIsXG5cdFwiLi9jb2F0LTEuc3ZnXCI6IDMzLFxuXHRcIi4vZmFjZWJvb2suc3ZnXCI6IDM0LFxuXHRcIi4vZmxpcC1pbWFnZS1hcnJvdy1sZWZ0LnN2Z1wiOiAzNSxcblx0XCIuL2ZsaXAtaW1hZ2UtYXJyb3ctcmlnaHQuc3ZnXCI6IDM2LFxuXHRcIi4vaGFuZ2VyLnN2Z1wiOiAzNyxcblx0XCIuL2ljb25zLnN2Z1wiOiAzOCxcblx0XCIuL2luc3RhZ3JhbS5zdmdcIjogMzksXG5cdFwiLi9qYWNrZXQtMS5zdmdcIjogNDAsXG5cdFwiLi9sb2NhdGlvbi1ibGFjay5zdmdcIjogNDEsXG5cdFwiLi9sb2NhdGlvbi5zdmdcIjogNDIsXG5cdFwiLi9sb2dvLWJsYWNrLnN2Z1wiOiA0Myxcblx0XCIuL2xvZ28ucG5nXCI6IDQ0LFxuXHRcIi4vbG9nby5zdmdcIjogNDUsXG5cdFwiLi9sb29rYm9vay1pbWFnZS0xLW1pbi5wbmdcIjogNDYsXG5cdFwiLi9sb29rYm9vay1pbWFnZS0xLnBuZ1wiOiA0Nyxcblx0XCIuL2xvb2tib29rLWltYWdlLTItbWluLnBuZ1wiOiA0OCxcblx0XCIuL2xvb2tib29rLWltYWdlLTIucG5nXCI6IDQ5LFxuXHRcIi4vbWFzdGVyY2FyZC5zdmdcIjogNTAsXG5cdFwiLi9tZWFzdXJpbmcuc3ZnXCI6IDUxLFxuXHRcIi4vb3Blbi1tZW51LnN2Z1wiOiA1Mixcblx0XCIuL3BheXBhbC5zdmdcIjogNTMsXG5cdFwiLi9wcm9kdWN0LTEuc3ZnXCI6IDU0LFxuXHRcIi4vcHJvZHVjdC0yLnN2Z1wiOiA1NSxcblx0XCIuL3Byb2R1Y3QtMy5zdmdcIjogNTYsXG5cdFwiLi9wcm9kdWN0LTQuc3ZnXCI6IDU3LFxuXHRcIi4vcHJvZHVjdC1kZXNjLTEuanBnXCI6IDU4LFxuXHRcIi4vcHJvZHVjdC1kZXNjLTIuanBnXCI6IDU5LFxuXHRcIi4vcHJvZHVjdC1kZXNjLTMuanBnXCI6IDYwLFxuXHRcIi4vcHJvZHVjdC1kZXNjLTQuanBnXCI6IDYxLFxuXHRcIi4vc2VhcmNoLWJsYWNrLnN2Z1wiOiA2Mixcblx0XCIuL3NlYXJjaC5zdmdcIjogNjMsXG5cdFwiLi9zaGlydC0xLnN2Z1wiOiA2NCxcblx0XCIuL3NoaXJ0LTIuc3ZnXCI6IDY1LFxuXHRcIi4vc2hpcnQtMy5zdmdcIjogNjYsXG5cdFwiLi9zaG9lcy5wbmdcIjogNjcsXG5cdFwiLi90cm91c2Vycy0xLnN2Z1wiOiA2OCxcblx0XCIuL3R3aXR0ZXIuc3ZnXCI6IDY5LFxuXHRcIi4vdXNlci1ibGFjay5zdmdcIjogNzAsXG5cdFwiLi91c2VyLnN2Z1wiOiA3MSxcblx0XCIuL3Zpc2EgKDIpLnN2Z1wiOiA3Mixcblx0XCIuL3lvdXR1YmUuc3ZnXCI6IDczXG59O1xuXG5cbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0KHJlcSkge1xuXHR2YXIgaWQgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKTtcblx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oaWQpO1xufVxuZnVuY3Rpb24gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSkge1xuXHR2YXIgaWQgPSBtYXBbcmVxXTtcblx0aWYoIShpZCArIDEpKSB7IC8vIGNoZWNrIGZvciBudW1iZXIgb3Igc3RyaW5nXG5cdFx0dmFyIGUgPSBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInXCIpO1xuXHRcdGUuY29kZSA9ICdNT0RVTEVfTk9UX0ZPVU5EJztcblx0XHR0aHJvdyBlO1xuXHR9XG5cdHJldHVybiBpZDtcbn1cbndlYnBhY2tDb250ZXh0LmtleXMgPSBmdW5jdGlvbiB3ZWJwYWNrQ29udGV4dEtleXMoKSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyhtYXApO1xufTtcbndlYnBhY2tDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmU7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tDb250ZXh0O1xud2VicGFja0NvbnRleHQuaWQgPSA5OyIsIm1vZHVsZS5leHBvcnRzID0gXCJpbWFnZXMvR3JvdXAgMTUuc3ZnXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBcImltYWdlcy9hY2Nlc3Nvcmllcy1taW4ucG5nXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBcImltYWdlcy9hY2Nlc3Nvcmllcy5wbmdcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IFwiaW1hZ2VzL2FkZC1wcm9kdWN0LTEuc3ZnXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBcImltYWdlcy9hZGQtcHJvZHVjdC0yLnN2Z1wiOyIsIm1vZHVsZS5leHBvcnRzID0gXCJpbWFnZXMvYWRkLXByb2R1Y3QtMy5zdmdcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IFwiaW1hZ2VzL2FtZXJpY2FuLWV4cHJlc3Muc3ZnXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBcImltYWdlcy9hcnJvdy5zdmdcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IFwiaW1hZ2VzL2Fycm93cy5zdmdcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IFwiaW1hZ2VzL2FydGljbGUtbWFpbi1pbWFnZS1taW4ucG5nXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBcImltYWdlcy9hcnRpY2xlLW1haW4taW1hZ2UucG5nXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBcImltYWdlcy9hcnRpY2xlLXByZXZpZXctMS1taW4ucG5nXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBcImltYWdlcy9hcnRpY2xlLXByZXZpZXctMS5zdmdcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IFwiaW1hZ2VzL2FydGljbGUtcHJldmlldy0yLnN2Z1wiOyIsIm1vZHVsZS5leHBvcnRzID0gXCJpbWFnZXMvYmFja2dyb3VuZC1pbWctbWluLnBuZ1wiOyIsIm1vZHVsZS5leHBvcnRzID0gXCJpbWFnZXMvYmFja2dyb3VuZC1pbWcucG5nXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBcImltYWdlcy9iYWctMS5zdmdcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IFwiaW1hZ2VzL2JhZy1ibGFjay5zdmdcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IFwiaW1hZ2VzL2JhZy5zdmdcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IFwiaW1hZ2VzL2Nsb3NlLnN2Z1wiOyIsIm1vZHVsZS5leHBvcnRzID0gXCJpbWFnZXMvY2xvdGhlcy1taW4ucG5nXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBcImltYWdlcy9jbG90aGVzLnBuZ1wiOyIsIm1vZHVsZS5leHBvcnRzID0gXCJpbWFnZXMvY2xvdGhlcy5zdmdcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IFwiaW1hZ2VzL2NvYXQtMS5zdmdcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IFwiaW1hZ2VzL2ZhY2Vib29rLnN2Z1wiOyIsIm1vZHVsZS5leHBvcnRzID0gXCJpbWFnZXMvZmxpcC1pbWFnZS1hcnJvdy1sZWZ0LnN2Z1wiOyIsIm1vZHVsZS5leHBvcnRzID0gXCJpbWFnZXMvZmxpcC1pbWFnZS1hcnJvdy1yaWdodC5zdmdcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IFwiaW1hZ2VzL2hhbmdlci5zdmdcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IFwiaW1hZ2VzL2ljb25zLnN2Z1wiOyIsIm1vZHVsZS5leHBvcnRzID0gXCJpbWFnZXMvaW5zdGFncmFtLnN2Z1wiOyIsIm1vZHVsZS5leHBvcnRzID0gXCJpbWFnZXMvamFja2V0LTEuc3ZnXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBcImltYWdlcy9sb2NhdGlvbi1ibGFjay5zdmdcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IFwiaW1hZ2VzL2xvY2F0aW9uLnN2Z1wiOyIsIm1vZHVsZS5leHBvcnRzID0gXCJpbWFnZXMvbG9nby1ibGFjay5zdmdcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IFwiaW1hZ2VzL2xvZ28ucG5nXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBcImltYWdlcy9sb2dvLnN2Z1wiOyIsIm1vZHVsZS5leHBvcnRzID0gXCJpbWFnZXMvbG9va2Jvb2staW1hZ2UtMS1taW4ucG5nXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBcImltYWdlcy9sb29rYm9vay1pbWFnZS0xLnBuZ1wiOyIsIm1vZHVsZS5leHBvcnRzID0gXCJpbWFnZXMvbG9va2Jvb2staW1hZ2UtMi1taW4ucG5nXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBcImltYWdlcy9sb29rYm9vay1pbWFnZS0yLnBuZ1wiOyIsIm1vZHVsZS5leHBvcnRzID0gXCJpbWFnZXMvbWFzdGVyY2FyZC5zdmdcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IFwiaW1hZ2VzL21lYXN1cmluZy5zdmdcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IFwiaW1hZ2VzL29wZW4tbWVudS5zdmdcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IFwiaW1hZ2VzL3BheXBhbC5zdmdcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IFwiaW1hZ2VzL3Byb2R1Y3QtMS5zdmdcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IFwiaW1hZ2VzL3Byb2R1Y3QtMi5zdmdcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IFwiaW1hZ2VzL3Byb2R1Y3QtMy5zdmdcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IFwiaW1hZ2VzL3Byb2R1Y3QtNC5zdmdcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IFwiaW1hZ2VzL3Byb2R1Y3QtZGVzYy0xLmpwZ1wiOyIsIm1vZHVsZS5leHBvcnRzID0gXCJpbWFnZXMvcHJvZHVjdC1kZXNjLTIuanBnXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBcImltYWdlcy9wcm9kdWN0LWRlc2MtMy5qcGdcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IFwiaW1hZ2VzL3Byb2R1Y3QtZGVzYy00LmpwZ1wiOyIsIm1vZHVsZS5leHBvcnRzID0gXCJpbWFnZXMvc2VhcmNoLWJsYWNrLnN2Z1wiOyIsIm1vZHVsZS5leHBvcnRzID0gXCJpbWFnZXMvc2VhcmNoLnN2Z1wiOyIsIm1vZHVsZS5leHBvcnRzID0gXCJpbWFnZXMvc2hpcnQtMS5zdmdcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IFwiaW1hZ2VzL3NoaXJ0LTIuc3ZnXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBcImltYWdlcy9zaGlydC0zLnN2Z1wiOyIsIm1vZHVsZS5leHBvcnRzID0gXCJpbWFnZXMvc2hvZXMucG5nXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBcImltYWdlcy90cm91c2Vycy0xLnN2Z1wiOyIsIm1vZHVsZS5leHBvcnRzID0gXCJpbWFnZXMvdHdpdHRlci5zdmdcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IFwiaW1hZ2VzL3VzZXItYmxhY2suc3ZnXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBcImltYWdlcy91c2VyLnN2Z1wiOyIsIm1vZHVsZS5leHBvcnRzID0gXCJpbWFnZXMvdmlzYSAoMikuc3ZnXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBcImltYWdlcy95b3V0dWJlLnN2Z1wiOyIsImV4cG9ydCBkZWZhdWx0IFtcbiAgICB7XG4gICAgICAgIHRpdGxlOiAnU3RyZXRjaCBXb29sIENoaW5vIFRyb3VzZXJzJyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LiBEb25lYyBhdWN0b3IgbnVuYyBuaWJoLCBpbiBwb3N1ZXJlIGFyY3UgbWFsZXN1YWRhLicsXG4gICAgICAgIHByaWNlOiAxOTAsXG4gICAgICAgIGZpdDogJ2NsYXNzaWMnLFxuICAgICAgICBjb2xvcjogJ2JsYWNrJyxcbiAgICAgICAgaW1hZ2U6ICd0cm91c2Vycy0xLnN2ZycsXG4gICAgICAgIGNhdGVnb3J5OiAnVHJvdXNlcnMnLFxuICAgICAgICBzaXplOiBbMzgsIDQwLCA0MiwgNDQsIDQ2XVxuICAgIH0sXG5cbiAgICB7XG4gICAgICAgIHRpdGxlOiAnTGVhdGhlciBUcmF2ZWwgQmFnJyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LiBEb25lYyBhdWN0b3IgbnVuYyBuaWJoLCBpbiBwb3N1ZXJlIGFyY3UgbWFsZXN1YWRhLicsXG4gICAgICAgIHByaWNlOiAxMjEsXG4gICAgICAgIGNvbG9yOiAnYmxhY2snLFxuICAgICAgICBpbWFnZTogJ2JhZy0xLnN2ZycsXG4gICAgICAgIGNhdGVnb3J5OiAnQWNjZXNzb3JpZXMnLFxuICAgICAgICBzaXplOiBbXVxuICAgIH0sXG5cbiAgICB7XG4gICAgICAgIHRpdGxlOiAnWmlwcGVkIFdhdGVyLVJlcGVsbGVudCBDb2F0JyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LiBEb25lYyBhdWN0b3IgbnVuYyBuaWJoLCBpbiBwb3N1ZXJlIGFyY3UgbWFsZXN1YWRhLicsXG4gICAgICAgIHByaWNlOiA0MjQsXG4gICAgICAgIGZpdDogJ3JlZ3VsYXInLFxuICAgICAgICBjb2xvcjogJ2dyZXknLFxuICAgICAgICBpbWFnZTogJ2NvYXQtMS5zdmcnLFxuICAgICAgICBjYXRlZ29yeTogJ0NvYXRzIGFuZCBKYWNrZXRzJyxcbiAgICAgICAgc2l6ZTogWzM2LCA0MCwgNDIsIDQ2XVxuICAgIH0sXG5cbiAgICB7XG4gICAgICAgIHRpdGxlOiAnQ290dG9uIE1lbGFuZ2UgU2hpcnQnLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ0xvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQuIERvbmVjIGF1Y3RvciBudW5jIG5pYmgsIGluIHBvc3VlcmUgYXJjdSBtYWxlc3VhZGEuJyxcbiAgICAgICAgcHJpY2U6IDE4MixcbiAgICAgICAgZml0OiAnc2xpbScsXG4gICAgICAgIGNvbG9yOiAnbGlnaHRCbHVlJyxcbiAgICAgICAgaW1hZ2U6ICdzaGlydC0xLnN2ZycsXG4gICAgICAgIGNhdGVnb3J5OiAnU2hpcnRzJyxcbiAgICAgICAgc2l6ZTogWzM2LCAzOCwgNDBdXG4gICAgfSxcblxuICAgIHtcbiAgICAgICAgdGl0bGU6ICdTdWVkZSBCb21iZXIgSmFja2V0JyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LiBEb25lYyBhdWN0b3IgbnVuYyBuaWJoLCBpbiBwb3N1ZXJlIGFyY3UgbWFsZXN1YWRhLicsXG4gICAgICAgIHByaWNlOiA0MjMsXG4gICAgICAgIGZpdDogJ3RhaWxvcmVkJyxcbiAgICAgICAgY29sb3I6ICdvdGhlcicsXG4gICAgICAgIGltYWdlOiAnamFja2V0LTEuc3ZnJyxcbiAgICAgICAgY2F0ZWdvcnk6ICdDb2F0cyBhbmQgSmFja2V0cycsXG4gICAgICAgIHNpemU6IFszNiwgMzgsIDQyLCA0NF1cbiAgICB9LFxuXG4gICAge1xuICAgICAgICB0aXRsZTogJ0NoZWNrIENvdHRvbiBQb3BsaW4gU2hpcnQnLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ0xvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQuIERvbmVjIGF1Y3RvciBudW5jIG5pYmgsIGluIHBvc3VlcmUgYXJjdSBtYWxlc3VhZGEuJyxcbiAgICAgICAgcHJpY2U6IDE4MixcbiAgICAgICAgZml0OiAnc2xpbScsXG4gICAgICAgIGNvbG9yOiAnYmx1ZScsXG4gICAgICAgIGltYWdlOiAnc2hpcnQtMi5zdmcnLFxuICAgICAgICBjYXRlZ29yeTogJ1NoaXJ0cycsXG4gICAgICAgIHNpemU6IFs0MCwgNDIsIDQ0LCA0Nl1cbiAgICB9LFxuXG4gICAge1xuICAgICAgICB0aXRsZTogJ1N0cmlwZSBEZXRhaWwgQ290dG9uIFNoaXJ0JyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LiBEb25lYyBhdWN0b3IgbnVuYyBuaWJoLCBpbiBwb3N1ZXJlIGFyY3UgbWFsZXN1YWRhLicsXG4gICAgICAgIHByaWNlOiA5OSxcbiAgICAgICAgZml0OiAnc2xpbScsXG4gICAgICAgIGNvbG9yOiAnd2hpdGUnLFxuICAgICAgICBpbWFnZTogJ3NoaXJ0LTMuc3ZnJyxcbiAgICAgICAgY2F0ZWdvcnk6ICdTaGlydHMnLFxuICAgICAgICBzaXplOiBbMzYsIDM4LCA0MCwgNDIsIDQ0LCA0Nl1cbiAgICB9LFxuXG4gICAge1xuICAgICAgICB0aXRsZTogJ0xlYXRoZXIgVHJhdmVsIEJhZycsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gRG9uZWMgYXVjdG9yIG51bmMgbmliaCwgaW4gcG9zdWVyZSBhcmN1IG1hbGVzdWFkYS4nLFxuICAgICAgICBwcmljZTogMTIxLFxuICAgICAgICBjb2xvcjogJ2JsYWNrJyxcbiAgICAgICAgaW1hZ2U6ICdiYWctMS5zdmcnLFxuICAgICAgICBjYXRlZ29yeTogJ0FjY2Vzc29yaWVzJyxcbiAgICAgICAgc2l6ZTogW11cbiAgICB9LFxuXG4gICAge1xuICAgICAgICB0aXRsZTogJ1N0cmV0Y2ggV29vbCBDaGlubyBUcm91c2VycycsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gRG9uZWMgYXVjdG9yIG51bmMgbmliaCwgaW4gcG9zdWVyZSBhcmN1IG1hbGVzdWFkYS4nLFxuICAgICAgICBwcmljZTogMTkwLFxuICAgICAgICBmaXQ6ICdjbGFzc2ljJyxcbiAgICAgICAgY29sb3I6ICdibGFjaycsXG4gICAgICAgIGltYWdlOiAndHJvdXNlcnMtMS5zdmcnLFxuICAgICAgICBjYXRlZ29yeTogJ1Ryb3VzZXJzJyxcbiAgICAgICAgc2l6ZTogWzM2LCAzOCwgNDIsIDQ0LCA0Nl1cbiAgICB9XG5cblxuXSIsImltcG9ydCAnLi9tYWluLnNjc3MnXG5pbXBvcnQgbW9ja0RhdGEgZnJvbSAnLi9qcy9tb2NrRGF0YSdcbmltcG9ydCB7IERPTXN0cmluZ3MgfSBmcm9tICcuL2pzL2RvbVN0cmluZ3MnXG5pbXBvcnQgbm9VaVNsaWRlciBmcm9tICdub3Vpc2xpZGVyJ1xuaW1wb3J0ICdub3Vpc2xpZGVyL2Rpc3RyaWJ1dGUvbm91aXNsaWRlci5jc3MnXG5pbXBvcnQgeyByZWdpc3RlckFjdGl2ZUNsYXNzIH0gZnJvbSAnLi9qcy9oZWxwZXJzJ1xuaW1wb3J0IHsgaW5pdEJ1cmdlck1lbnVDbGlja0xpc3RlbmVyIH0gZnJvbSAnLi9qcy9oZWxwZXJzJ1xuXG5pbml0QnVyZ2VyTWVudUNsaWNrTGlzdGVuZXIoRE9Nc3RyaW5ncy5idXJnZXJNZW51SWNvbiwgRE9Nc3RyaW5ncy5idXJnZXJNZW51Q29udGFpbmVyKVxuXG4vL1JlbmRlcmluZyBEYXRhIFxuY29uc3QgcmVuZGVyRGF0YSA9IChhcnJheSkgPT4ge1xuICAgIGNvbnN0IHByb2R1Y3RzQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFsbC1wcm9kdWN0c19fcHJvZHVjdHMtY29udGFpbmVyJylcbiAgICBsZXQgY29udGVudCA9ICcnXG4gICAgYXJyYXkuZm9yRWFjaChjdXIgPT4ge1xuICAgICAgICBpZiAocHJvZHVjdHNDb250YWluZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSBnZXRIdG1sU3RyaW5nKGN1cilcbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50ICsgaXRlbVxuICAgICAgICB9XG4gICAgfSlcblxuICAgIHByb2R1Y3RzQ29udGFpbmVyLmlubmVySFRNTCA9IGNvbnRlbnRcbn1cblxuY29uc3QgZ2V0SHRtbFN0cmluZyA9IChwcm9kdWN0KSA9PiB7XG4gICAgcmV0dXJuIChgPGEgY2xhc3M9XCJhbGwtcHJvZHVjdHNfX3Byb2R1Y3RcIiBocmVmPVwicHJvZHVjdC1wYWdlLmh0bWxcIj5cbiAgICA8ZGl2IGNsYXNzPVwiYWxsLXByb2R1Y3RzX19wcm9kdWN0LWltYWdlXCIgc3R5bGU9J2JhY2tncm91bmQtaW1hZ2U6IHVybCgke3JlcXVpcmUoJy4vaW1hZ2VzLycgKyBwcm9kdWN0LmltYWdlKX0pJz48L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiYWxsLXByb2R1Y3RzX19wcm9kdWN0LWRlc2NyaXB0aW9uXCI+XG4gICAgICAgIDxzcGFuIGNsYXNzPVwiYWxsLXByb2R1Y3RzX19jYXRlZ29yeVwiPiR7cHJvZHVjdC5jYXRlZ29yeX08L3NwYW4+XG4gICAgICAgIDxoNCBjbGFzcz1cInByb2R1Y3QtaGVhZGluZyBhbGwtcHJvZHVjdHNfX3Byb2R1Y3QtaGVhZGluZ1wiPiR7cHJvZHVjdC50aXRsZX08L2g0PlxuICAgICAgICA8cD4ke3Byb2R1Y3QuZGVzY3JpcHRpb259PC9wPlxuICAgICAgICA8c3BhbiBjbGFzcz1cImFsbC1wcm9kdWN0c19fcHJvZHVjdC1wcmljZVwiPiQke3Byb2R1Y3QucHJpY2V9PC9zcGFuPlxuICAgIDwvZGl2PlxuPC9hPmApXG59XG5cbnJlbmRlckRhdGEobW9ja0RhdGEpO1xuXG4vL0ZpbHRlcnNcbi8vQ3JlYXRpbmcgb2JqZWN0IGZvciBhbGwgZmlsdGVycyBcbmNvbnN0IGRlZmF1bHRGaWx0ZXJzID0ge1xuICAgIGNhdGVnb3J5OiBudWxsLFxuICAgIGZpdDogbnVsbCxcbiAgICBzaXplOiBudWxsLFxuICAgIHByaWNlOiBudWxsLFxuICAgIGNvbG9yOiBudWxsXG59XG5cbmxldCBmaWx0ZXJzQ29udGFpbmVyID0geyAuLi5kZWZhdWx0RmlsdGVycyB9XG5cbi8vRmlsdGVyRGF0YSBmdW5jdGlvblxuY29uc3QgZmlsdGVyRGF0YSA9ICgpID0+IHtcbiAgICAvLyBnZXQgYWN0aXZlIGZpbHRlcnNcbiAgICBjb25zdCBhY3RpdmVGaWx0ZXJzID0gT2JqZWN0LmtleXMoZmlsdGVyc0NvbnRhaW5lcikuZmlsdGVyKGtleSA9PiBmaWx0ZXJzQ29udGFpbmVyW2tleV0pXG4gICAgLy8gZmlsdGVyIGRhdGFcbiAgICBjb25zdCBmaWx0ZXJlZERhdGEgPSBtb2NrRGF0YS5maWx0ZXIoaXRlbSA9PiB7XG5cbiAgICAgICAgbGV0IG1hdGNoZXMgPSB0cnVlXG4gICAgICAgIGFjdGl2ZUZpbHRlcnMuZm9yRWFjaChjdXIgPT4ge1xuICAgICAgICAgICAgaWYgKCFtYXRjaGVzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjdXIgPT09ICdzaXplJykge1xuICAgICAgICAgICAgICAgIG1hdGNoZXMgPSBtYXRjaGVzICYmIGl0ZW0uc2l6ZS5pbmNsdWRlcyhmaWx0ZXJzQ29udGFpbmVyW2N1cl0pXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGN1ciA9PT0gJ3ByaWNlJykge1xuICAgICAgICAgICAgICAgIG1hdGNoZXMgPSBtYXRjaGVzICYmIGl0ZW0ucHJpY2UgPj0gZmlsdGVyc0NvbnRhaW5lci5wcmljZVswXSAmJiBpdGVtLnByaWNlIDw9IGZpbHRlcnNDb250YWluZXIucHJpY2VbMV1cblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBtYXRjaGVzID0gbWF0Y2hlcyAmJiBpdGVtW2N1cl0gPT09IGZpbHRlcnNDb250YWluZXJbY3VyXVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuXG4gICAgICAgIHJldHVybiBtYXRjaGVzXG4gICAgfSlcblxuICAgIHJlbmRlckRhdGEoZmlsdGVyZWREYXRhKVxuICAgIG5vUHJvZHVjdHNGb3VuZChmaWx0ZXJlZERhdGEpXG59XG5cbmNvbnN0IGNhdGVnb3JpZXNTZWxlY3RvciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoRE9Nc3RyaW5ncy5zZWxlY3RvcilcbmlmIChjYXRlZ29yaWVzU2VsZWN0b3IpIHtcbiAgICBjYXRlZ29yaWVzU2VsZWN0b3IuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuY2xhc3NMaXN0LnRvZ2dsZShET01zdHJpbmdzLnNlbGVjdG9yQWN0aXZlKTtcbiAgICB9KTtcbn1cblxuLy9FdmVudGxpc3RlbmVycyBvbiBDYXRlZ29yeVxuY29uc3Qgc2VsZWN0Q2F0ZWdvcnlIYW5kbGVyID0gKGNhdGVnb3J5KSA9PiB7XG4gICAgLy9BZGQgZXZlbnRsaXN0ZW5lciB0byBldmVyeSBpdGVtIGluIE5vZGVMaXN0XG4gICAgY2F0ZWdvcnkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vUmVwbGFjZSB0ZXh0IGluIGRlZmF1bHQgY2F0ZWdvcnkgdG8gc2VsZWN0ZWQgb25lIFxuICAgICAgICBjb25zdCBjYXRlZ29yeU5hbWUgPSB0aGlzLnF1ZXJ5U2VsZWN0b3IoJ3AnKS50ZXh0Q29udGVudFxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKERPTXN0cmluZ3Muc2VsZWN0b3JPcHRpb25UZXh0KS50ZXh0Q29udGVudCA9IGNhdGVnb3J5TmFtZTtcblxuICAgICAgICAvL1JlbW92ZSBhY3RpdmUgY2xhc3MgZnJvbSBvdGhlcnMgXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoRE9Nc3RyaW5ncy5zZWxlY3Rvck9wdGlvbkFjdGl2ZSkuY2xhc3NMaXN0LnJlbW92ZShET01zdHJpbmdzLnNlbGVjdG9yT3B0aW9uQWN0aXZlQ2xhc3MpO1xuXG4gICAgICAgIC8vQWRkIGFjdGl2ZSBjbGFzcyB0byBzZWxlY3RlZCBjYXRlZ29yeSBpbiBsaXN0IFxuICAgICAgICB0aGlzLmNsYXNzTGlzdC5hZGQoRE9Nc3RyaW5ncy5zZWxlY3Rvck9wdGlvbkFjdGl2ZUNsYXNzKTtcbiAgICAgICAgZmlsdGVyUHJvZHVjdHNCeUNhdGVnb3J5KGNhdGVnb3J5TmFtZSlcblxuICAgIH0pO1xufVxuXG4vL0ZpbHRlciBieSBjYXRlZ29yeVxuY29uc3QgZmlsdGVyUHJvZHVjdHNCeUNhdGVnb3J5ID0gKGNhdGVnb3J5KSA9PiB7XG4gICAgaWYgKGNhdGVnb3J5ID09PSAnQWxsIHByb2R1Y3RzJykge1xuICAgICAgICBmaWx0ZXJzQ29udGFpbmVyLmNhdGVnb3J5ID0gbnVsbFxuICAgIH0gZWxzZSB7XG4gICAgICAgIGZpbHRlcnNDb250YWluZXIuY2F0ZWdvcnkgPSBjYXRlZ29yeVxuICAgIH1cbiAgICBmaWx0ZXJEYXRhKClcbn1cblxuY29uc3Qgc2VsZWN0b3JPcHRpb25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChET01zdHJpbmdzLnNlbGVjdG9yT3B0aW9uKTtcbnNlbGVjdG9yT3B0aW9ucy5mb3JFYWNoKGN1ciA9PiB7XG4gICAgc2VsZWN0Q2F0ZWdvcnlIYW5kbGVyKGN1cilcbn0pXG5cbi8vQWRkIEV2ZW50TGlzdGVuZXJzIG9uIGZpdCwgc2l6ZSBhbmQgY29sb3JcbmNvbnN0IHJlZ2lzdGVyVG9nZ2VsZUFjdGl2ZUNsYXNzTGlzdGVuZXIgPSAob3B0aW9uQ2xhc3MsIG9wdGlvbkNsYXNzQWN0aXZlLCBmaWx0ZXJCeSkgPT4ge1xuICAgIGNvbnN0IGZpbHRlck9wdGlvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKG9wdGlvbkNsYXNzKTtcbiAgICBmaWx0ZXJPcHRpb25zLmZvckVhY2goY3VyID0+IHtcbiAgICAgICAgY3VyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY29uc3QgcGFyYW1ldGVyTmFtZSA9IGN1ci50ZXh0Q29udGVudFxuICAgICAgICAgICAgY29uc3QgcGFyYW1ldGVySUQgPSBjdXIuaWRcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkRmlsdGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLicgKyBvcHRpb25DbGFzc0FjdGl2ZSlcblxuICAgICAgICAgICAgaWYgKGN1ci5jbGFzc0xpc3QuY29udGFpbnMob3B0aW9uQ2xhc3NBY3RpdmUpKSB7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLicgKyBvcHRpb25DbGFzc0FjdGl2ZSkuY2xhc3NMaXN0LnJlbW92ZShvcHRpb25DbGFzc0FjdGl2ZSk7XG4gICAgICAgICAgICAgICAgaWYgKGZpbHRlckJ5ID09PSAnc2l6ZScpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyc0NvbnRhaW5lci5zaXplID0gbnVsbFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZmlsdGVyQnkgPT09ICdmaXQnKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcnNDb250YWluZXIuZml0ID0gbnVsbFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZmlsdGVyQnkgPT09ICdjb2xvcicpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyc0NvbnRhaW5lci5jb2xvciA9IG51bGxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZmlsdGVyRGF0YSgpXG4gICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChzZWxlY3RlZEZpbHRlcikge1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy4nICsgb3B0aW9uQ2xhc3NBY3RpdmUpLmNsYXNzTGlzdC5yZW1vdmUob3B0aW9uQ2xhc3NBY3RpdmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3VyLmNsYXNzTGlzdC5hZGQob3B0aW9uQ2xhc3NBY3RpdmUpO1xuICAgICAgICAgICAgdXBkYXRlRmlsdGVyc0NvdGFpbmVyV2l0aEFjdGl2ZUZpbHRlcnMocGFyYW1ldGVyTmFtZSwgcGFyYW1ldGVySUQsIGZpbHRlckJ5KVxuICAgICAgICB9KVxuICAgIH0pXG59XG5yZWdpc3RlclRvZ2dlbGVBY3RpdmVDbGFzc0xpc3RlbmVyKERPTXN0cmluZ3MuZmlsdGVyU2l6ZSwgRE9Nc3RyaW5ncy5maWx0ZXJTaXplU2VsZWN0ZWQsICdzaXplJyk7XG5yZWdpc3RlclRvZ2dlbGVBY3RpdmVDbGFzc0xpc3RlbmVyKERPTXN0cmluZ3MuZmlsdGVyRml0LCBET01zdHJpbmdzLmZpbHRlckZpdFNlbGVjdGVkLCAnZml0Jyk7XG5yZWdpc3RlclRvZ2dlbGVBY3RpdmVDbGFzc0xpc3RlbmVyKERPTXN0cmluZ3MuZmlsdGVyQ29sb3IsIERPTXN0cmluZ3MuZmlsdGVyQ29sb3JTZWxlY3RlZCwgJ2NvbG9yJyk7XG5cbi8vRmlsdGVyIERhdGEgQnkgUGFyYW1ldGVyIChmaXQsIHNpemUsIGNvbG9yKVxuY29uc3QgdXBkYXRlRmlsdGVyc0NvdGFpbmVyV2l0aEFjdGl2ZUZpbHRlcnMgPSAocGFyYW1ldGVyTmFtZSwgcGFyYW1ldGVySUQsIGZpbHRlckJ5KSA9PiB7XG4gICAgaWYgKGZpbHRlckJ5ID09PSAnZml0Jykge1xuICAgICAgICBmaWx0ZXJzQ29udGFpbmVyLmZpdCA9IHBhcmFtZXRlck5hbWUudG9Mb3dlckNhc2UoKVxuICAgICAgICBmaWx0ZXJEYXRhKClcbiAgICB9IGVsc2UgaWYgKGZpbHRlckJ5ID09PSAnc2l6ZScpIHtcbiAgICAgICAgZmlsdGVyc0NvbnRhaW5lci5zaXplID0gcGFyc2VGbG9hdChwYXJhbWV0ZXJOYW1lKVxuICAgICAgICBmaWx0ZXJEYXRhKClcbiAgICB9IGVsc2UgaWYgKGZpbHRlckJ5ID09PSAnY29sb3InKSB7XG4gICAgICAgIGZpbHRlcnNDb250YWluZXIuY29sb3IgPSBwYXJhbWV0ZXJJRFxuICAgICAgICBmaWx0ZXJEYXRhKClcbiAgICB9XG59XG5cbi8vUHJpY2UgcmFuZ2UgZmlsdGVyXG5jb25zdCBwcmljZVJhbmdlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NsaWRlcicpO1xubm9VaVNsaWRlci5jcmVhdGUocHJpY2VSYW5nZSwge1xuICAgIHN0YXJ0OiBbOTksIDMwMF0sXG4gICAgY29ubmVjdDogdHJ1ZSxcbiAgICByYW5nZToge1xuICAgICAgICAnbWluJzogMCxcbiAgICAgICAgJ21heCc6IDEwMDBcbiAgICB9XG59KTtcblxuLy9VcGRhdGUgcHJpY2VzIGluIFVJXG5wcmljZVJhbmdlLm5vVWlTbGlkZXIub24oJ3VwZGF0ZScsICh2YWx1ZXMpID0+IHtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKERPTXN0cmluZ3MubG93ZXJQcmljZUluUmFuZ2UpLnRleHRDb250ZW50ID0gYCQke3BhcnNlSW50KHZhbHVlc1swXSl9YFxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoRE9Nc3RyaW5ncy5oaWdoZXJQcmljZUluUmFuZ2UpLnRleHRDb250ZW50ID0gYCQke3BhcnNlSW50KHZhbHVlc1sxXSl9YFxufSk7XG5cbi8vVXBkYXRlIGZpbHRlcnNDb250YWluZXIgd2l0aCBjdXJyZW50IHByaWNlIHJhbmdlIFxucHJpY2VSYW5nZS5ub1VpU2xpZGVyLm9uKCdjaGFuZ2UnLCAodmFsdWVzKSA9PiB7XG4gICAgZmlsdGVyc0NvbnRhaW5lci5wcmljZSA9IHZhbHVlc1xuICAgIGZpbHRlckRhdGEoKVxufSlcbnByaWNlUmFuZ2Uubm9VaVNsaWRlci5vbignZW5kJywgKHZhbHVlcykgPT4ge1xuICAgIGZpbHRlcnNDb250YWluZXIucHJpY2UgPSB2YWx1ZXNcbiAgICBmaWx0ZXJEYXRhKClcbn0pXG5cbi8vRnVuY3Rpb24gZm9yIHBhZ2luYXRpb24gYW5kIG5vcHJvZHVjdHMgZm91bmQgdG9nZ2xlXG5jb25zdCBub1Byb2R1Y3RzRm91bmQgPSAoZmlsdGVyZWREYXRhKSA9PiB7XG4gICAgaWYgKGZpbHRlcmVkRGF0YS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihET01zdHJpbmdzLmVtcHR5RmlsdGVyKS5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoRE9Nc3RyaW5ncy5wYWdpbmF0aW9uQ29udGFpbmVyKS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnXG4gICAgfSBlbHNlIGlmIChmaWx0ZXJlZERhdGEubGVuZ3RoID09PSBtb2NrRGF0YS5sZW5ndGgpIHtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihET01zdHJpbmdzLmVtcHR5RmlsdGVyKS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoRE9Nc3RyaW5ncy5wYWdpbmF0aW9uQ29udGFpbmVyKS5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnXG4gICAgfSBlbHNlIHtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihET01zdHJpbmdzLmVtcHR5RmlsdGVyKS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoRE9Nc3RyaW5ncy5wYWdpbmF0aW9uQ29udGFpbmVyKS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnXG4gICAgfVxufVxuXG4vL0NsZWFuIGZpbHRlcnNcbmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoRE9Nc3RyaW5ncy5jbGVhbkZpbHRlcnMpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoRE9Nc3RyaW5ncy5zZWxlY3Rvck9wdGlvblRleHQpLnRleHRDb250ZW50ID0gJ0FsbCBwcm9kdWN0cydcbiAgICBmaWx0ZXJzQ29udGFpbmVyID0geyAuLi5kZWZhdWx0RmlsdGVycyB9XG4gICAgcHJpY2VSYW5nZS5ub1VpU2xpZGVyLnJlc2V0KClcbiAgICByZW1vdmVBbGxBY3RpdmVDbGFzc2VzRnJvbUZpbHRlcnMoKVxuICAgIGZpbHRlckRhdGEoKVxufSlcblxuY29uc3QgcmVtb3ZlQWxsQWN0aXZlQ2xhc3Nlc0Zyb21GaWx0ZXJzID0gKCkgPT4ge1xuICAgIGNvbnN0IGZpbHRlckZpdEFjdGl2ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy4nICsgRE9Nc3RyaW5ncy5maWx0ZXJGaXRTZWxlY3RlZClcbiAgICBjb25zdCBmaWx0ZXJTaXplQWN0aXZlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLicgKyBET01zdHJpbmdzLmZpbHRlclNpemVTZWxlY3RlZClcbiAgICBjb25zdCBmaWx0ZXJDb2xvckFjdGl2ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy4nICsgRE9Nc3RyaW5ncy5maWx0ZXJDb2xvclNlbGVjdGVkKVxuICAgIGlmIChmaWx0ZXJGaXRBY3RpdmUpIHtcbiAgICAgICAgZmlsdGVyRml0QWN0aXZlLmNsYXNzTGlzdC5yZW1vdmUoRE9Nc3RyaW5ncy5maWx0ZXJGaXRTZWxlY3RlZClcbiAgICB9XG4gICAgaWYgKGZpbHRlclNpemVBY3RpdmUpIHtcbiAgICAgICAgZmlsdGVyU2l6ZUFjdGl2ZS5jbGFzc0xpc3QucmVtb3ZlKERPTXN0cmluZ3MuZmlsdGVyU2l6ZVNlbGVjdGVkKVxuICAgIH1cbiAgICBpZiAoZmlsdGVyQ29sb3JBY3RpdmUpIHtcbiAgICAgICAgZmlsdGVyQ29sb3JBY3RpdmUuY2xhc3NMaXN0LnJlbW92ZShET01zdHJpbmdzLmZpbHRlckNvbG9yU2VsZWN0ZWQpXG4gICAgfVxufVxuXG4vL1BhZ2luYXRpb25cbnJlZ2lzdGVyQWN0aXZlQ2xhc3MoRE9Nc3RyaW5ncy5wYWdpbmF0aW9uTGluaywgRE9Nc3RyaW5ncy5wYWdpbmF0aW9uTGlua0FjdGl2ZSlcbmNvbnN0IHBhZ2luYXRpb25QYWdlQ2hhbmdlID0gKCkgPT4ge1xuICAgIGNvbnN0IGFycm93QmFjayA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoRE9Nc3RyaW5ncy5hcnJvd0JhY2spO1xuICAgIGNvbnN0IGFycm93TmV4dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoRE9Nc3RyaW5ncy5hcnJvd05leHQpO1xuICAgIGNvbnN0IHBhZ2VzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChET01zdHJpbmdzLnBhZ2luYXRpb25MaW5rKTtcblxuXG4gICAgYXJyb3dCYWNrLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAocGFnZXNbaV0uY2xhc3NMaXN0LmNvbnRhaW5zKERPTXN0cmluZ3MucGFnaW5hdGlvbkxpbmtBY3RpdmUpICYmIGkgPiAwKSB7XG4gICAgICAgICAgICAgICAgcGFnZXNbaV0uY2xhc3NMaXN0LnJlbW92ZShET01zdHJpbmdzLnBhZ2luYXRpb25MaW5rQWN0aXZlKTtcbiAgICAgICAgICAgICAgICBwYWdlc1tpIC0gMV0uY2xhc3NMaXN0LmFkZChET01zdHJpbmdzLnBhZ2luYXRpb25MaW5rQWN0aXZlKTtcbiAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgfSk7XG5cbiAgICBhcnJvd05leHQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFnZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChwYWdlc1tpXS5jbGFzc0xpc3QuY29udGFpbnMoRE9Nc3RyaW5ncy5wYWdpbmF0aW9uTGlua0FjdGl2ZSkgJiYgaSA8IHBhZ2VzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICBwYWdlc1tpXS5jbGFzc0xpc3QucmVtb3ZlKERPTXN0cmluZ3MucGFnaW5hdGlvbkxpbmtBY3RpdmUpO1xuICAgICAgICAgICAgICAgIHBhZ2VzW2kgKyAxXS5jbGFzc0xpc3QuYWRkKERPTXN0cmluZ3MucGFnaW5hdGlvbkxpbmtBY3RpdmUpO1xuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG59O1xucGFnaW5hdGlvblBhZ2VDaGFuZ2UoKTsiXSwic291cmNlUm9vdCI6IiJ9