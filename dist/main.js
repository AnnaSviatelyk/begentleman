!function(e){var t={};function i(s){if(t[s])return t[s].exports;var r=t[s]={i:s,l:!1,exports:{}};return e[s].call(r.exports,r,r.exports,i),r.l=!0,r.exports}i.m=e,i.c=t,i.d=function(e,t,s){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(s,r,function(t){return e[t]}.bind(null,r));return s},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=11)}([function(e,t,i){"use strict";i.d(t,"b",(function(){return r})),i.d(t,"e",(function(){return n})),i.d(t,"f",(function(){return a})),i.d(t,"d",(function(){return o})),i.d(t,"c",(function(){return d})),i.d(t,"a",(function(){return c}));var s=i(1);function r(e){var t=e;Object.keys(t).forEach((function(e){try{t[e]=null}catch(e){}try{delete t[e]}catch(e){}}))}function n(e,t){return void 0===t&&(t=0),setTimeout(e,t)}function a(){return Date.now()}function o(e,t){void 0===t&&(t="x");var i,r,n,a=Object(s.b)(),o=a.getComputedStyle(e,null);return a.WebKitCSSMatrix?((r=o.transform||o.webkitTransform).split(",").length>6&&(r=r.split(", ").map((function(e){return e.replace(",",".")})).join(", ")),n=new a.WebKitCSSMatrix("none"===r?"":r)):i=(n=o.MozTransform||o.OTransform||o.MsTransform||o.msTransform||o.transform||o.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,")).toString().split(","),"x"===t&&(r=a.WebKitCSSMatrix?n.m41:16===i.length?parseFloat(i[12]):parseFloat(i[4])),"y"===t&&(r=a.WebKitCSSMatrix?n.m42:16===i.length?parseFloat(i[13]):parseFloat(i[5])),r||0}function l(e){return"object"==typeof e&&null!==e&&e.constructor&&e.constructor===Object}function d(){for(var e=Object(arguments.length<=0?void 0:arguments[0]),t=1;t<arguments.length;t+=1){var i=t<0||arguments.length<=t?void 0:arguments[t];if(null!=i)for(var s=Object.keys(Object(i)),r=0,n=s.length;r<n;r+=1){var a=s[r],o=Object.getOwnPropertyDescriptor(i,a);void 0!==o&&o.enumerable&&(l(e[a])&&l(i[a])?d(e[a],i[a]):!l(e[a])&&l(i[a])?(e[a]={},d(e[a],i[a])):e[a]=i[a])}}return e}function c(e,t){Object.keys(t).forEach((function(i){l(t[i])&&Object.keys(t[i]).forEach((function(s){"function"==typeof t[i][s]&&(t[i][s]=t[i][s].bind(e))})),e[i]=t[i]}))}},function(e,t,i){"use strict";function s(e){return null!==e&&"object"==typeof e&&"constructor"in e&&e.constructor===Object}function r(e,t){void 0===e&&(e={}),void 0===t&&(t={}),Object.keys(t).forEach((function(i){void 0===e[i]?e[i]=t[i]:s(t[i])&&s(e[i])&&Object.keys(t[i]).length>0&&r(e[i],t[i])}))}i.d(t,"a",(function(){return a})),i.d(t,"b",(function(){return l}));var n={body:{},addEventListener:function(){},removeEventListener:function(){},activeElement:{blur:function(){},nodeName:""},querySelector:function(){return null},querySelectorAll:function(){return[]},getElementById:function(){return null},createEvent:function(){return{initEvent:function(){}}},createElement:function(){return{children:[],childNodes:[],style:{},setAttribute:function(){},getElementsByTagName:function(){return[]}}},createElementNS:function(){return{}},importNode:function(){return null},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function a(){var e="undefined"!=typeof document?document:{};return r(e,n),e}var o={document:n,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState:function(){},pushState:function(){},go:function(){},back:function(){}},CustomEvent:function(){return this},addEventListener:function(){},removeEventListener:function(){},getComputedStyle:function(){return{getPropertyValue:function(){return""}}},Image:function(){},Date:function(){},screen:{},setTimeout:function(){},clearTimeout:function(){},matchMedia:function(){return{}},requestAnimationFrame:function(e){return"undefined"==typeof setTimeout?(e(),null):setTimeout(e,0)},cancelAnimationFrame:function(e){"undefined"!=typeof setTimeout&&clearTimeout(e)}};function l(){var e="undefined"!=typeof window?window:{};return r(e,o),e}},function(e,t,i){"use strict";var s=i(1);function r(e){return(r=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function n(e,t){return(n=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function a(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function o(e,t,i){return(o=a()?Reflect.construct:function(e,t,i){var s=[null];s.push.apply(s,t);var r=new(Function.bind.apply(e,s));return i&&n(r,i.prototype),r}).apply(null,arguments)}function l(e){var t="function"==typeof Map?new Map:void 0;return(l=function(e){if(null===e||(i=e,-1===Function.toString.call(i).indexOf("[native code]")))return e;var i;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,s)}function s(){return o(e,arguments,r(this).constructor)}return s.prototype=Object.create(e.prototype,{constructor:{value:s,enumerable:!1,writable:!0,configurable:!0}}),n(s,e)})(e)}var d=function(e){var t,i;function s(t){var i,s,r;return i=e.call.apply(e,[this].concat(t))||this,s=function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(i),r=s.__proto__,Object.defineProperty(s,"__proto__",{get:function(){return r},set:function(e){r.__proto__=e}}),i}return i=e,(t=s).prototype=Object.create(i.prototype),t.prototype.constructor=t,t.__proto__=i,s}(l(Array));function c(e){void 0===e&&(e=[]);var t=[];return e.forEach((function(e){Array.isArray(e)?t.push.apply(t,c(e)):t.push(e)})),t}function h(e,t){return Array.prototype.filter.call(e,t)}function u(e,t){var i=Object(s.b)(),r=Object(s.a)(),n=[];if(!t&&e instanceof d)return e;if(!e)return new d(n);if("string"==typeof e){var a=e.trim();if(a.indexOf("<")>=0&&a.indexOf(">")>=0){var o="div";0===a.indexOf("<li")&&(o="ul"),0===a.indexOf("<tr")&&(o="tbody"),0!==a.indexOf("<td")&&0!==a.indexOf("<th")||(o="tr"),0===a.indexOf("<tbody")&&(o="table"),0===a.indexOf("<option")&&(o="select");var l=r.createElement(o);l.innerHTML=a;for(var c=0;c<l.childNodes.length;c+=1)n.push(l.childNodes[c])}else n=function(e,t){if("string"!=typeof e)return[e];for(var i=[],s=t.querySelectorAll(e),r=0;r<s.length;r+=1)i.push(s[r]);return i}(e.trim(),t||r)}else if(e.nodeType||e===i||e===r)n.push(e);else if(Array.isArray(e)){if(e instanceof d)return e;n=e}return new d(function(e){for(var t=[],i=0;i<e.length;i+=1)-1===t.indexOf(e[i])&&t.push(e[i]);return t}(n))}u.fn=d.prototype;var p="resize scroll".split(" ");function f(e){return function(){for(var t=arguments.length,i=new Array(t),s=0;s<t;s++)i[s]=arguments[s];if(void 0===i[0]){for(var r=0;r<this.length;r+=1)p.indexOf(e)<0&&(e in this[r]?this[r][e]():u(this[r]).trigger(e));return this}return this.on.apply(this,[e].concat(i))}}f("click"),f("blur"),f("focus"),f("focusin"),f("focusout"),f("keyup"),f("keydown"),f("keypress"),f("submit"),f("change"),f("mousedown"),f("mousemove"),f("mouseup"),f("mouseenter"),f("mouseleave"),f("mouseout"),f("mouseover"),f("touchstart"),f("touchend"),f("touchmove"),f("resize"),f("scroll");var v={addClass:function(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];var s=c(t.map((function(e){return e.split(" ")})));return this.forEach((function(e){var t;(t=e.classList).add.apply(t,s)})),this},removeClass:function(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];var s=c(t.map((function(e){return e.split(" ")})));return this.forEach((function(e){var t;(t=e.classList).remove.apply(t,s)})),this},hasClass:function(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];var s=c(t.map((function(e){return e.split(" ")})));return h(this,(function(e){return s.filter((function(t){return e.classList.contains(t)})).length>0})).length>0},toggleClass:function(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];var s=c(t.map((function(e){return e.split(" ")})));this.forEach((function(e){s.forEach((function(t){e.classList.toggle(t)}))}))},attr:function(e,t){if(1===arguments.length&&"string"==typeof e)return this[0]?this[0].getAttribute(e):void 0;for(var i=0;i<this.length;i+=1)if(2===arguments.length)this[i].setAttribute(e,t);else for(var s in e)this[i][s]=e[s],this[i].setAttribute(s,e[s]);return this},removeAttr:function(e){for(var t=0;t<this.length;t+=1)this[t].removeAttribute(e);return this},transform:function(e){for(var t=0;t<this.length;t+=1)this[t].style.transform=e;return this},transition:function(e){for(var t=0;t<this.length;t+=1)this[t].style.transition="string"!=typeof e?e+"ms":e;return this},on:function(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];var s=t[0],r=t[1],n=t[2],a=t[3];function o(e){var t=e.target;if(t){var i=e.target.dom7EventData||[];if(i.indexOf(e)<0&&i.unshift(e),u(t).is(r))n.apply(t,i);else for(var s=u(t).parents(),a=0;a<s.length;a+=1)u(s[a]).is(r)&&n.apply(s[a],i)}}function l(e){var t=e&&e.target&&e.target.dom7EventData||[];t.indexOf(e)<0&&t.unshift(e),n.apply(this,t)}"function"==typeof t[1]&&(s=t[0],n=t[1],a=t[2],r=void 0),a||(a=!1);for(var d,c=s.split(" "),h=0;h<this.length;h+=1){var p=this[h];if(r)for(d=0;d<c.length;d+=1){var f=c[d];p.dom7LiveListeners||(p.dom7LiveListeners={}),p.dom7LiveListeners[f]||(p.dom7LiveListeners[f]=[]),p.dom7LiveListeners[f].push({listener:n,proxyListener:o}),p.addEventListener(f,o,a)}else for(d=0;d<c.length;d+=1){var v=c[d];p.dom7Listeners||(p.dom7Listeners={}),p.dom7Listeners[v]||(p.dom7Listeners[v]=[]),p.dom7Listeners[v].push({listener:n,proxyListener:l}),p.addEventListener(v,l,a)}}return this},off:function(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];var s=t[0],r=t[1],n=t[2],a=t[3];"function"==typeof t[1]&&(s=t[0],n=t[1],a=t[2],r=void 0),a||(a=!1);for(var o=s.split(" "),l=0;l<o.length;l+=1)for(var d=o[l],c=0;c<this.length;c+=1){var h=this[c],u=void 0;if(!r&&h.dom7Listeners?u=h.dom7Listeners[d]:r&&h.dom7LiveListeners&&(u=h.dom7LiveListeners[d]),u&&u.length)for(var p=u.length-1;p>=0;p-=1){var f=u[p];n&&f.listener===n||n&&f.listener&&f.listener.dom7proxy&&f.listener.dom7proxy===n?(h.removeEventListener(d,f.proxyListener,a),u.splice(p,1)):n||(h.removeEventListener(d,f.proxyListener,a),u.splice(p,1))}}return this},trigger:function(){for(var e=Object(s.b)(),t=arguments.length,i=new Array(t),r=0;r<t;r++)i[r]=arguments[r];for(var n=i[0].split(" "),a=i[1],o=0;o<n.length;o+=1)for(var l=n[o],d=0;d<this.length;d+=1){var c=this[d];if(e.CustomEvent){var h=new e.CustomEvent(l,{detail:a,bubbles:!0,cancelable:!0});c.dom7EventData=i.filter((function(e,t){return t>0})),c.dispatchEvent(h),c.dom7EventData=[],delete c.dom7EventData}}return this},transitionEnd:function(e){var t=this;return e&&t.on("transitionend",(function i(s){s.target===this&&(e.call(this,s),t.off("transitionend",i))})),this},outerWidth:function(e){if(this.length>0){if(e){var t=this.styles();return this[0].offsetWidth+parseFloat(t.getPropertyValue("margin-right"))+parseFloat(t.getPropertyValue("margin-left"))}return this[0].offsetWidth}return null},outerHeight:function(e){if(this.length>0){if(e){var t=this.styles();return this[0].offsetHeight+parseFloat(t.getPropertyValue("margin-top"))+parseFloat(t.getPropertyValue("margin-bottom"))}return this[0].offsetHeight}return null},styles:function(){var e=Object(s.b)();return this[0]?e.getComputedStyle(this[0],null):{}},offset:function(){if(this.length>0){var e=Object(s.b)(),t=Object(s.a)(),i=this[0],r=i.getBoundingClientRect(),n=t.body,a=i.clientTop||n.clientTop||0,o=i.clientLeft||n.clientLeft||0,l=i===e?e.scrollY:i.scrollTop,d=i===e?e.scrollX:i.scrollLeft;return{top:r.top+l-a,left:r.left+d-o}}return null},css:function(e,t){var i,r=Object(s.b)();if(1===arguments.length){if("string"!=typeof e){for(i=0;i<this.length;i+=1)for(var n in e)this[i].style[n]=e[n];return this}if(this[0])return r.getComputedStyle(this[0],null).getPropertyValue(e)}if(2===arguments.length&&"string"==typeof e){for(i=0;i<this.length;i+=1)this[i].style[e]=t;return this}return this},each:function(e){return e?(this.forEach((function(t,i){e.apply(t,[t,i])})),this):this},html:function(e){if(void 0===e)return this[0]?this[0].innerHTML:null;for(var t=0;t<this.length;t+=1)this[t].innerHTML=e;return this},text:function(e){if(void 0===e)return this[0]?this[0].textContent.trim():null;for(var t=0;t<this.length;t+=1)this[t].textContent=e;return this},is:function(e){var t,i,r=Object(s.b)(),n=Object(s.a)(),a=this[0];if(!a||void 0===e)return!1;if("string"==typeof e){if(a.matches)return a.matches(e);if(a.webkitMatchesSelector)return a.webkitMatchesSelector(e);if(a.msMatchesSelector)return a.msMatchesSelector(e);for(t=u(e),i=0;i<t.length;i+=1)if(t[i]===a)return!0;return!1}if(e===n)return a===n;if(e===r)return a===r;if(e.nodeType||e instanceof d){for(t=e.nodeType?[e]:e,i=0;i<t.length;i+=1)if(t[i]===a)return!0;return!1}return!1},index:function(){var e,t=this[0];if(t){for(e=0;null!==(t=t.previousSibling);)1===t.nodeType&&(e+=1);return e}},eq:function(e){if(void 0===e)return this;var t=this.length;if(e>t-1)return u([]);if(e<0){var i=t+e;return u(i<0?[]:[this[i]])}return u([this[e]])},append:function(){for(var e,t=Object(s.a)(),i=0;i<arguments.length;i+=1){e=i<0||arguments.length<=i?void 0:arguments[i];for(var r=0;r<this.length;r+=1)if("string"==typeof e){var n=t.createElement("div");for(n.innerHTML=e;n.firstChild;)this[r].appendChild(n.firstChild)}else if(e instanceof d)for(var a=0;a<e.length;a+=1)this[r].appendChild(e[a]);else this[r].appendChild(e)}return this},prepend:function(e){var t,i,r=Object(s.a)();for(t=0;t<this.length;t+=1)if("string"==typeof e){var n=r.createElement("div");for(n.innerHTML=e,i=n.childNodes.length-1;i>=0;i-=1)this[t].insertBefore(n.childNodes[i],this[t].childNodes[0])}else if(e instanceof d)for(i=0;i<e.length;i+=1)this[t].insertBefore(e[i],this[t].childNodes[0]);else this[t].insertBefore(e,this[t].childNodes[0]);return this},next:function(e){return this.length>0?e?this[0].nextElementSibling&&u(this[0].nextElementSibling).is(e)?u([this[0].nextElementSibling]):u([]):this[0].nextElementSibling?u([this[0].nextElementSibling]):u([]):u([])},nextAll:function(e){var t=[],i=this[0];if(!i)return u([]);for(;i.nextElementSibling;){var s=i.nextElementSibling;e?u(s).is(e)&&t.push(s):t.push(s),i=s}return u(t)},prev:function(e){if(this.length>0){var t=this[0];return e?t.previousElementSibling&&u(t.previousElementSibling).is(e)?u([t.previousElementSibling]):u([]):t.previousElementSibling?u([t.previousElementSibling]):u([])}return u([])},prevAll:function(e){var t=[],i=this[0];if(!i)return u([]);for(;i.previousElementSibling;){var s=i.previousElementSibling;e?u(s).is(e)&&t.push(s):t.push(s),i=s}return u(t)},parent:function(e){for(var t=[],i=0;i<this.length;i+=1)null!==this[i].parentNode&&(e?u(this[i].parentNode).is(e)&&t.push(this[i].parentNode):t.push(this[i].parentNode));return u(t)},parents:function(e){for(var t=[],i=0;i<this.length;i+=1)for(var s=this[i].parentNode;s;)e?u(s).is(e)&&t.push(s):t.push(s),s=s.parentNode;return u(t)},closest:function(e){var t=this;return void 0===e?u([]):(t.is(e)||(t=t.parents(e).eq(0)),t)},find:function(e){for(var t=[],i=0;i<this.length;i+=1)for(var s=this[i].querySelectorAll(e),r=0;r<s.length;r+=1)t.push(s[r]);return u(t)},children:function(e){for(var t=[],i=0;i<this.length;i+=1)for(var s=this[i].children,r=0;r<s.length;r+=1)e&&!u(s[r]).is(e)||t.push(s[r]);return u(t)},filter:function(e){return u(h(this,e))},remove:function(){for(var e=0;e<this.length;e+=1)this[e].parentNode&&this[e].parentNode.removeChild(this[e]);return this}};Object.keys(v).forEach((function(e){u.fn[e]=v[e]}));t.a=u},function(e,t,i){"use strict";i.d(t,"a",(function(){return s}));const s={selector:".selector",selectorActive:"selector--active",selectorOption:".selector__option",selectorOptionText:".selector__option--all p",selectorOptionActive:".selector__option--active",selectorOptionActiveClass:"selector__option--active",openFilter:".open-filter",closeFilter:".filter__close-filters",backdrop:".backdrop",filterMobile:".filter-mobile",filterSize:".filter__size",filterSizeSelected:"filter__size--selected",filterFit:".filter__fit-option",filterFitSelected:"filter__fit-option--selected",filterColor:".filter__color-option",filterColorSelected:"filter__color-option--active",lowerPriceInRange:".filter__price-number--lower",higherPriceInRange:".filter__price-number--higher",emptyFilter:".empty-filter-result",cleanFilters:".filter__button--clean",applyFilters:".filter__button--apply",paginationContainer:".pagination",paginationLink:".pagination__link",paginationLinkActive:"pagination__link--active",arrowBack:".pagination__arrow--prev",arrowNext:".pagination__arrow--next",productSize:".product-description__size",productColor:".product-description__color",productSizeSelected:"product-description__size--active",productColorSelected:"product-description__color--active",burgerMenuIcon:".navigation__burger-menu",burgerMenuContainer:".vertical-menu",productImagesOptions:".product-description__more-images-item",flippingImageArrowLeft:".product-description__arrow--left",flippingImageArrowRight:".product-description__arrow--right",imagesContainer:"#slider"}},function(e,t,i){"use strict";i.d(t,"b",(function(){return n})),i.d(t,"a",(function(){return o}));var s=i(6),r=i(7);s.a.use([r.a]);const n=(e,t)=>{document.querySelectorAll(e).forEach(e=>{e.addEventListener("click",(function(){document.querySelector("."+t)&&document.querySelector("."+t).classList.remove(t),e.classList.add(t)}))})},a=(e,t,i)=>{const s=e.target.classList;e.target===i||s.contains("vertical-menu__navigation")||s.contains("vertical-menu__navigation-link")||(t.style.display="flex",i.style.display="none",document.removeEventListener("click",a))},o=(e,t)=>{const i=document.querySelector(e),s=document.querySelector(t);i.addEventListener("click",e=>{e.stopPropagation(),i.style.display="none",s.style.display="block"}),document.addEventListener("click",e=>a(e,i,s))}},function(e,t,i){"use strict";i.d(t,"a",(function(){return a}));var s=i(6),r=i(7);s.a.use([r.a]);const n={},a=e=>{let t=!1;window.matchMedia("(max-width: 1024px)").matches?n[e]||(t=!0,n[e]=new s.a(e,{slidesPerView:3,spaceBetween:30,breakpoints:{320:{slidesPerView:1,spaceBetween:20},600:{slidesPerView:2,spaceBetween:20},750:{slidesPerView:3,spaceBetween:20}},pagination:{el:t?".swiper-pagination":null,clickable:!0}})):n[e]&&(t=!1,n[e].destroy(),n[e]=null)}},function(e,t,i){"use strict";var s,r,n,a=i(2),o=i(0),l=i(1);function d(){return s||(s=function(){var e=Object(l.b)(),t=Object(l.a)();return{touch:!!("ontouchstart"in e||e.DocumentTouch&&t instanceof e.DocumentTouch),pointerEvents:!!e.PointerEvent&&"maxTouchPoints"in e.navigator&&e.navigator.maxTouchPoints>=0,observer:"MutationObserver"in e||"WebkitMutationObserver"in e,passiveListener:function(){var t=!1;try{var i=Object.defineProperty({},"passive",{get:function(){t=!0}});e.addEventListener("testPassiveListener",null,i)}catch(e){}return t}(),gestures:"ongesturestart"in e}}()),s}function c(e){return void 0===e&&(e={}),r||(r=function(e){var t=(void 0===e?{}:e).userAgent,i=d(),s=Object(l.b)(),r=s.navigator.platform,n=t||s.navigator.userAgent,a={ios:!1,android:!1},o=s.screen.width,c=s.screen.height,h=n.match(/(Android);?[\s\/]+([\d.]+)?/),u=n.match(/(iPad).*OS\s([\d_]+)/),p=n.match(/(iPod)(.*OS\s([\d_]+))?/),f=!u&&n.match(/(iPhone\sOS|iOS)\s([\d_]+)/),v="Win32"===r,m="MacIntel"===r;return!u&&m&&i.touch&&["1024x1366","1366x1024","834x1194","1194x834","834x1112","1112x834","768x1024","1024x768"].indexOf(o+"x"+c)>=0&&((u=n.match(/(Version)\/([\d.]+)/))||(u=[0,1,"13_0_0"]),m=!1),h&&!v&&(a.os="android",a.android=!0),(u||f||p)&&(a.os="ios",a.ios=!0),a}(e)),r}function h(){return n||(n=function(){var e,t=Object(l.b)();return{isEdge:!!t.navigator.userAgent.match(/Edge/g),isSafari:(e=t.navigator.userAgent.toLowerCase(),e.indexOf("safari")>=0&&e.indexOf("chrome")<0&&e.indexOf("android")<0),isWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(t.navigator.userAgent)}}()),n}var u={name:"resize",create:function(){var e=this;Object(o.c)(e,{resize:{resizeHandler:function(){e&&!e.destroyed&&e.initialized&&(e.emit("beforeResize"),e.emit("resize"))},orientationChangeHandler:function(){e&&!e.destroyed&&e.initialized&&e.emit("orientationchange")}}})},on:{init:function(e){var t=Object(l.b)();t.addEventListener("resize",e.resize.resizeHandler),t.addEventListener("orientationchange",e.resize.orientationChangeHandler)},destroy:function(e){var t=Object(l.b)();t.removeEventListener("resize",e.resize.resizeHandler),t.removeEventListener("orientationchange",e.resize.orientationChangeHandler)}}};function p(){return(p=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var i=arguments[t];for(var s in i)Object.prototype.hasOwnProperty.call(i,s)&&(e[s]=i[s])}return e}).apply(this,arguments)}var f={attach:function(e,t){void 0===t&&(t={});var i=Object(l.b)(),s=this,r=new(i.MutationObserver||i.WebkitMutationObserver)((function(e){if(1!==e.length){var t=function(){s.emit("observerUpdate",e[0])};i.requestAnimationFrame?i.requestAnimationFrame(t):i.setTimeout(t,0)}else s.emit("observerUpdate",e[0])}));r.observe(e,{attributes:void 0===t.attributes||t.attributes,childList:void 0===t.childList||t.childList,characterData:void 0===t.characterData||t.characterData}),s.observer.observers.push(r)},init:function(){if(this.support.observer&&this.params.observer){if(this.params.observeParents)for(var e=this.$el.parents(),t=0;t<e.length;t+=1)this.observer.attach(e[t]);this.observer.attach(this.$el[0],{childList:this.params.observeSlideChildren}),this.observer.attach(this.$wrapperEl[0],{attributes:!1})}},destroy:function(){this.observer.observers.forEach((function(e){e.disconnect()})),this.observer.observers=[]}},v={name:"observer",params:{observer:!1,observeParents:!1,observeSlideChildren:!1},create:function(){Object(o.a)(this,{observer:p(p({},f),{},{observers:[]})})},on:{init:function(e){e.observer.init()},destroy:function(e){e.observer.destroy()}}};function m(e){var t=Object(l.a)(),i=Object(l.b)(),s=this.touchEventsData,r=this.params,n=this.touches;if(!this.animating||!r.preventInteractionOnTransition){var d=e;d.originalEvent&&(d=d.originalEvent);var c=Object(a.a)(d.target);if(("wrapper"!==r.touchEventsTarget||c.closest(this.wrapperEl).length)&&(s.isTouchEvent="touchstart"===d.type,(s.isTouchEvent||!("which"in d)||3!==d.which)&&!(!s.isTouchEvent&&"button"in d&&d.button>0||s.isTouched&&s.isMoved)))if(r.noSwiping&&c.closest(r.noSwipingSelector?r.noSwipingSelector:"."+r.noSwipingClass)[0])this.allowClick=!0;else if(!r.swipeHandler||c.closest(r.swipeHandler)[0]){n.currentX="touchstart"===d.type?d.targetTouches[0].pageX:d.pageX,n.currentY="touchstart"===d.type?d.targetTouches[0].pageY:d.pageY;var h=n.currentX,u=n.currentY,p=r.edgeSwipeDetection||r.iOSEdgeSwipeDetection,f=r.edgeSwipeThreshold||r.iOSEdgeSwipeThreshold;if(!p||!(h<=f||h>=i.screen.width-f)){if(Object(o.c)(s,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),n.startX=h,n.startY=u,s.touchStartTime=Object(o.f)(),this.allowClick=!0,this.updateSize(),this.swipeDirection=void 0,r.threshold>0&&(s.allowThresholdMove=!1),"touchstart"!==d.type){var v=!0;c.is(s.formElements)&&(v=!1),t.activeElement&&Object(a.a)(t.activeElement).is(s.formElements)&&t.activeElement!==c[0]&&t.activeElement.blur();var m=v&&this.allowTouchMove&&r.touchStartPreventDefault;(r.touchStartForcePreventDefault||m)&&d.preventDefault()}this.emit("touchStart",d)}}}}function g(e){var t=Object(l.a)(),i=this.touchEventsData,s=this.params,r=this.touches,n=this.rtlTranslate,d=e;if(d.originalEvent&&(d=d.originalEvent),i.isTouched){if(!i.isTouchEvent||"touchmove"===d.type){var c="touchmove"===d.type&&d.targetTouches&&(d.targetTouches[0]||d.changedTouches[0]),h="touchmove"===d.type?c.pageX:d.pageX,u="touchmove"===d.type?c.pageY:d.pageY;if(d.preventedByNestedSwiper)return r.startX=h,void(r.startY=u);if(!this.allowTouchMove)return this.allowClick=!1,void(i.isTouched&&(Object(o.c)(r,{startX:h,startY:u,currentX:h,currentY:u}),i.touchStartTime=Object(o.f)()));if(i.isTouchEvent&&s.touchReleaseOnEdges&&!s.loop)if(this.isVertical()){if(u<r.startY&&this.translate<=this.maxTranslate()||u>r.startY&&this.translate>=this.minTranslate())return i.isTouched=!1,void(i.isMoved=!1)}else if(h<r.startX&&this.translate<=this.maxTranslate()||h>r.startX&&this.translate>=this.minTranslate())return;if(i.isTouchEvent&&t.activeElement&&d.target===t.activeElement&&Object(a.a)(d.target).is(i.formElements))return i.isMoved=!0,void(this.allowClick=!1);if(i.allowTouchCallbacks&&this.emit("touchMove",d),!(d.targetTouches&&d.targetTouches.length>1)){r.currentX=h,r.currentY=u;var p=r.currentX-r.startX,f=r.currentY-r.startY;if(!(this.params.threshold&&Math.sqrt(Math.pow(p,2)+Math.pow(f,2))<this.params.threshold)){var v;if(void 0===i.isScrolling)this.isHorizontal()&&r.currentY===r.startY||this.isVertical()&&r.currentX===r.startX?i.isScrolling=!1:p*p+f*f>=25&&(v=180*Math.atan2(Math.abs(f),Math.abs(p))/Math.PI,i.isScrolling=this.isHorizontal()?v>s.touchAngle:90-v>s.touchAngle);if(i.isScrolling&&this.emit("touchMoveOpposite",d),void 0===i.startMoving&&(r.currentX===r.startX&&r.currentY===r.startY||(i.startMoving=!0)),i.isScrolling)i.isTouched=!1;else if(i.startMoving){this.allowClick=!1,!s.cssMode&&d.cancelable&&d.preventDefault(),s.touchMoveStopPropagation&&!s.nested&&d.stopPropagation(),i.isMoved||(s.loop&&this.loopFix(),i.startTranslate=this.getTranslate(),this.setTransition(0),this.animating&&this.$wrapperEl.trigger("webkitTransitionEnd transitionend"),i.allowMomentumBounce=!1,!s.grabCursor||!0!==this.allowSlideNext&&!0!==this.allowSlidePrev||this.setGrabCursor(!0),this.emit("sliderFirstMove",d)),this.emit("sliderMove",d),i.isMoved=!0;var m=this.isHorizontal()?p:f;r.diff=m,m*=s.touchRatio,n&&(m=-m),this.swipeDirection=m>0?"prev":"next",i.currentTranslate=m+i.startTranslate;var g=!0,b=s.resistanceRatio;if(s.touchReleaseOnEdges&&(b=0),m>0&&i.currentTranslate>this.minTranslate()?(g=!1,s.resistance&&(i.currentTranslate=this.minTranslate()-1+Math.pow(-this.minTranslate()+i.startTranslate+m,b))):m<0&&i.currentTranslate<this.maxTranslate()&&(g=!1,s.resistance&&(i.currentTranslate=this.maxTranslate()+1-Math.pow(this.maxTranslate()-i.startTranslate-m,b))),g&&(d.preventedByNestedSwiper=!0),!this.allowSlideNext&&"next"===this.swipeDirection&&i.currentTranslate<i.startTranslate&&(i.currentTranslate=i.startTranslate),!this.allowSlidePrev&&"prev"===this.swipeDirection&&i.currentTranslate>i.startTranslate&&(i.currentTranslate=i.startTranslate),s.threshold>0){if(!(Math.abs(m)>s.threshold||i.allowThresholdMove))return void(i.currentTranslate=i.startTranslate);if(!i.allowThresholdMove)return i.allowThresholdMove=!0,r.startX=r.currentX,r.startY=r.currentY,i.currentTranslate=i.startTranslate,void(r.diff=this.isHorizontal()?r.currentX-r.startX:r.currentY-r.startY)}s.followFinger&&!s.cssMode&&((s.freeMode||s.watchSlidesProgress||s.watchSlidesVisibility)&&(this.updateActiveIndex(),this.updateSlidesClasses()),s.freeMode&&(0===i.velocities.length&&i.velocities.push({position:r[this.isHorizontal()?"startX":"startY"],time:i.touchStartTime}),i.velocities.push({position:r[this.isHorizontal()?"currentX":"currentY"],time:Object(o.f)()})),this.updateProgress(i.currentTranslate),this.setTranslate(i.currentTranslate))}}}}}else i.startMoving&&i.isScrolling&&this.emit("touchMoveOpposite",d)}function b(e){var t=this,i=t.touchEventsData,s=t.params,r=t.touches,n=t.rtlTranslate,a=t.$wrapperEl,l=t.slidesGrid,d=t.snapGrid,c=e;if(c.originalEvent&&(c=c.originalEvent),i.allowTouchCallbacks&&t.emit("touchEnd",c),i.allowTouchCallbacks=!1,!i.isTouched)return i.isMoved&&s.grabCursor&&t.setGrabCursor(!1),i.isMoved=!1,void(i.startMoving=!1);s.grabCursor&&i.isMoved&&i.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);var h,u=Object(o.f)(),p=u-i.touchStartTime;if(t.allowClick&&(t.updateClickedSlide(c),t.emit("tap click",c),p<300&&u-i.lastClickTime<300&&t.emit("doubleTap doubleClick",c)),i.lastClickTime=Object(o.f)(),Object(o.e)((function(){t.destroyed||(t.allowClick=!0)})),!i.isTouched||!i.isMoved||!t.swipeDirection||0===r.diff||i.currentTranslate===i.startTranslate)return i.isTouched=!1,i.isMoved=!1,void(i.startMoving=!1);if(i.isTouched=!1,i.isMoved=!1,i.startMoving=!1,h=s.followFinger?n?t.translate:-t.translate:-i.currentTranslate,!s.cssMode)if(s.freeMode){if(h<-t.minTranslate())return void t.slideTo(t.activeIndex);if(h>-t.maxTranslate())return void(t.slides.length<d.length?t.slideTo(d.length-1):t.slideTo(t.slides.length-1));if(s.freeModeMomentum){if(i.velocities.length>1){var f=i.velocities.pop(),v=i.velocities.pop(),m=f.position-v.position,g=f.time-v.time;t.velocity=m/g,t.velocity/=2,Math.abs(t.velocity)<s.freeModeMinimumVelocity&&(t.velocity=0),(g>150||Object(o.f)()-f.time>300)&&(t.velocity=0)}else t.velocity=0;t.velocity*=s.freeModeMomentumVelocityRatio,i.velocities.length=0;var b=1e3*s.freeModeMomentumRatio,w=t.velocity*b,C=t.translate+w;n&&(C=-C);var T,y,S=!1,x=20*Math.abs(t.velocity)*s.freeModeMomentumBounceRatio;if(C<t.maxTranslate())s.freeModeMomentumBounce?(C+t.maxTranslate()<-x&&(C=t.maxTranslate()-x),T=t.maxTranslate(),S=!0,i.allowMomentumBounce=!0):C=t.maxTranslate(),s.loop&&s.centeredSlides&&(y=!0);else if(C>t.minTranslate())s.freeModeMomentumBounce?(C-t.minTranslate()>x&&(C=t.minTranslate()+x),T=t.minTranslate(),S=!0,i.allowMomentumBounce=!0):C=t.minTranslate(),s.loop&&s.centeredSlides&&(y=!0);else if(s.freeModeSticky){for(var E,M=0;M<d.length;M+=1)if(d[M]>-C){E=M;break}C=-(C=Math.abs(d[E]-C)<Math.abs(d[E-1]-C)||"next"===t.swipeDirection?d[E]:d[E-1])}if(y&&t.once("transitionEnd",(function(){t.loopFix()})),0!==t.velocity){if(b=n?Math.abs((-C-t.translate)/t.velocity):Math.abs((C-t.translate)/t.velocity),s.freeModeSticky){var O=Math.abs((n?-C:C)-t.translate),P=t.slidesSizesGrid[t.activeIndex];b=O<P?s.speed:O<2*P?1.5*s.speed:2.5*s.speed}}else if(s.freeModeSticky)return void t.slideToClosest();s.freeModeMomentumBounce&&S?(t.updateProgress(T),t.setTransition(b),t.setTranslate(C),t.transitionStart(!0,t.swipeDirection),t.animating=!0,a.transitionEnd((function(){t&&!t.destroyed&&i.allowMomentumBounce&&(t.emit("momentumBounce"),t.setTransition(s.speed),setTimeout((function(){t.setTranslate(T),a.transitionEnd((function(){t&&!t.destroyed&&t.transitionEnd()}))}),0))}))):t.velocity?(t.updateProgress(C),t.setTransition(b),t.setTranslate(C),t.transitionStart(!0,t.swipeDirection),t.animating||(t.animating=!0,a.transitionEnd((function(){t&&!t.destroyed&&t.transitionEnd()})))):t.updateProgress(C),t.updateActiveIndex(),t.updateSlidesClasses()}else if(s.freeModeSticky)return void t.slideToClosest();(!s.freeModeMomentum||p>=s.longSwipesMs)&&(t.updateProgress(),t.updateActiveIndex(),t.updateSlidesClasses())}else{for(var k=0,L=t.slidesSizesGrid[0],j=0;j<l.length;j+=j<s.slidesPerGroupSkip?1:s.slidesPerGroup){var z=j<s.slidesPerGroupSkip-1?1:s.slidesPerGroup;void 0!==l[j+z]?h>=l[j]&&h<l[j+z]&&(k=j,L=l[j+z]-l[j]):h>=l[j]&&(k=j,L=l[l.length-1]-l[l.length-2])}var A=(h-l[k])/L,I=k<s.slidesPerGroupSkip-1?1:s.slidesPerGroup;if(p>s.longSwipesMs){if(!s.longSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&(A>=s.longSwipesRatio?t.slideTo(k+I):t.slideTo(k)),"prev"===t.swipeDirection&&(A>1-s.longSwipesRatio?t.slideTo(k+I):t.slideTo(k))}else{if(!s.shortSwipes)return void t.slideTo(t.activeIndex);t.navigation&&(c.target===t.navigation.nextEl||c.target===t.navigation.prevEl)?c.target===t.navigation.nextEl?t.slideTo(k+I):t.slideTo(k):("next"===t.swipeDirection&&t.slideTo(k+I),"prev"===t.swipeDirection&&t.slideTo(k))}}}function w(){var e=this.params,t=this.el;if(!t||0!==t.offsetWidth){e.breakpoints&&this.setBreakpoint();var i=this.allowSlideNext,s=this.allowSlidePrev,r=this.snapGrid;this.allowSlideNext=!0,this.allowSlidePrev=!0,this.updateSize(),this.updateSlides(),this.updateSlidesClasses(),("auto"===e.slidesPerView||e.slidesPerView>1)&&this.isEnd&&!this.isBeginning&&!this.params.centeredSlides?this.slideTo(this.slides.length-1,0,!1,!0):this.slideTo(this.activeIndex,0,!1,!0),this.autoplay&&this.autoplay.running&&this.autoplay.paused&&this.autoplay.run(),this.allowSlidePrev=s,this.allowSlideNext=i,this.params.watchOverflow&&r!==this.snapGrid&&this.checkOverflow()}}function C(e){this.allowClick||(this.params.preventClicks&&e.preventDefault(),this.params.preventClicksPropagation&&this.animating&&(e.stopPropagation(),e.stopImmediatePropagation()))}function T(){var e=this.wrapperEl,t=this.rtlTranslate;this.previousTranslate=this.translate,this.isHorizontal()?this.translate=t?e.scrollWidth-e.offsetWidth-e.scrollLeft:-e.scrollLeft:this.translate=-e.scrollTop,-0===this.translate&&(this.translate=0),this.updateActiveIndex(),this.updateSlidesClasses();var i=this.maxTranslate()-this.minTranslate();(0===i?0:(this.translate-this.minTranslate())/i)!==this.progress&&this.updateProgress(t?-this.translate:this.translate),this.emit("setTranslate",this.translate,!1)}var y=!1;function S(){}var x={init:!0,direction:"horizontal",touchEventsTarget:"container",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,freeMode:!1,freeModeMomentum:!0,freeModeMomentumRatio:1,freeModeMomentumBounce:!0,freeModeMomentumBounceRatio:1,freeModeMomentumVelocityRatio:1,freeModeSticky:!1,freeModeMinimumVelocity:.02,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,spaceBetween:0,slidesPerView:1,slidesPerColumn:1,slidesPerColumnFill:"column",slidesPerGroup:1,slidesPerGroupSkip:0,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!1,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:0,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,watchSlidesVisibility:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,preloadImages:!0,updateOnImagesReady:!0,loop:!1,loopAdditionalSlides:0,loopedSlides:null,loopFillGroupWithBlank:!1,loopPreventsSlide:!0,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,containerModifierClass:"swiper-container-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-invisible-blank",slideActiveClass:"swiper-slide-active",slideDuplicateActiveClass:"swiper-slide-duplicate-active",slideVisibleClass:"swiper-slide-visible",slideDuplicateClass:"swiper-slide-duplicate",slideNextClass:"swiper-slide-next",slideDuplicateNextClass:"swiper-slide-duplicate-next",slidePrevClass:"swiper-slide-prev",slideDuplicatePrevClass:"swiper-slide-duplicate-prev",wrapperClass:"swiper-wrapper",runCallbacksOnInit:!0,_emitClasses:!1};function E(e,t){for(var i=0;i<t.length;i++){var s=t[i];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(e,s.key,s)}}var M={modular:{useParams:function(e){var t=this;t.modules&&Object.keys(t.modules).forEach((function(i){var s=t.modules[i];s.params&&Object(o.c)(e,s.params)}))},useModules:function(e){void 0===e&&(e={});var t=this;t.modules&&Object.keys(t.modules).forEach((function(i){var s=t.modules[i],r=e[i]||{};s.on&&t.on&&Object.keys(s.on).forEach((function(e){t.on(e,s.on[e])})),s.create&&s.create.bind(t)(r)}))}},eventsEmitter:{on:function(e,t,i){var s=this;if("function"!=typeof t)return s;var r=i?"unshift":"push";return e.split(" ").forEach((function(e){s.eventsListeners[e]||(s.eventsListeners[e]=[]),s.eventsListeners[e][r](t)})),s},once:function(e,t,i){var s=this;if("function"!=typeof t)return s;function r(){s.off(e,r),r.__emitterProxy&&delete r.__emitterProxy;for(var i=arguments.length,n=new Array(i),a=0;a<i;a++)n[a]=arguments[a];t.apply(s,n)}return r.__emitterProxy=t,s.on(e,r,i)},onAny:function(e,t){if("function"!=typeof e)return this;var i=t?"unshift":"push";return this.eventsAnyListeners.indexOf(e)<0&&this.eventsAnyListeners[i](e),this},offAny:function(e){if(!this.eventsAnyListeners)return this;var t=this.eventsAnyListeners.indexOf(e);return t>=0&&this.eventsAnyListeners.splice(t,1),this},off:function(e,t){var i=this;return i.eventsListeners?(e.split(" ").forEach((function(e){void 0===t?i.eventsListeners[e]=[]:i.eventsListeners[e]&&i.eventsListeners[e].forEach((function(s,r){(s===t||s.__emitterProxy&&s.__emitterProxy===t)&&i.eventsListeners[e].splice(r,1)}))})),i):i},emit:function(){var e,t,i,s=this;if(!s.eventsListeners)return s;for(var r=arguments.length,n=new Array(r),a=0;a<r;a++)n[a]=arguments[a];"string"==typeof n[0]||Array.isArray(n[0])?(e=n[0],t=n.slice(1,n.length),i=s):(e=n[0].events,t=n[0].data,i=n[0].context||s),t.unshift(i);var o=Array.isArray(e)?e:e.split(" ");return o.forEach((function(e){if(s.eventsListeners&&s.eventsListeners[e]){var r=[];s.eventsListeners[e].forEach((function(e){r.push(e)})),r.forEach((function(e){e.apply(i,t)}))}})),s}},update:{updateSize:function(){var e,t,i=this.$el;e=void 0!==this.params.width&&null!==this.params.width?this.params.width:i[0].clientWidth,t=void 0!==this.params.height&&null!==this.params.width?this.params.height:i[0].clientHeight,0===e&&this.isHorizontal()||0===t&&this.isVertical()||(e=e-parseInt(i.css("padding-left")||0,10)-parseInt(i.css("padding-right")||0,10),t=t-parseInt(i.css("padding-top")||0,10)-parseInt(i.css("padding-bottom")||0,10),Number.isNaN(e)&&(e=0),Number.isNaN(t)&&(t=0),Object(o.c)(this,{width:e,height:t,size:this.isHorizontal()?e:t}))},updateSlides:function(){var e=Object(l.b)(),t=this.params,i=this.$wrapperEl,s=this.size,r=this.rtlTranslate,n=this.wrongRTL,a=this.virtual&&t.virtual.enabled,d=a?this.virtual.slides.length:this.slides.length,c=i.children("."+this.params.slideClass),h=a?this.virtual.slides.length:c.length,u=[],p=[],f=[];function v(e,i){return!t.cssMode||i!==c.length-1}var m=t.slidesOffsetBefore;"function"==typeof m&&(m=t.slidesOffsetBefore.call(this));var g=t.slidesOffsetAfter;"function"==typeof g&&(g=t.slidesOffsetAfter.call(this));var b=this.snapGrid.length,w=this.snapGrid.length,C=t.spaceBetween,T=-m,y=0,S=0;if(void 0!==s){var x,E;"string"==typeof C&&C.indexOf("%")>=0&&(C=parseFloat(C.replace("%",""))/100*s),this.virtualSize=-C,r?c.css({marginLeft:"",marginTop:""}):c.css({marginRight:"",marginBottom:""}),t.slidesPerColumn>1&&(x=Math.floor(h/t.slidesPerColumn)===h/this.params.slidesPerColumn?h:Math.ceil(h/t.slidesPerColumn)*t.slidesPerColumn,"auto"!==t.slidesPerView&&"row"===t.slidesPerColumnFill&&(x=Math.max(x,t.slidesPerView*t.slidesPerColumn)));for(var M,O=t.slidesPerColumn,P=x/O,k=Math.floor(h/t.slidesPerColumn),L=0;L<h;L+=1){E=0;var j=c.eq(L);if(t.slidesPerColumn>1){var z=void 0,A=void 0,I=void 0;if("row"===t.slidesPerColumnFill&&t.slidesPerGroup>1){var _=Math.floor(L/(t.slidesPerGroup*t.slidesPerColumn)),B=L-t.slidesPerColumn*t.slidesPerGroup*_,D=0===_?t.slidesPerGroup:Math.min(Math.ceil((h-_*O*t.slidesPerGroup)/O),t.slidesPerGroup);z=(A=B-(I=Math.floor(B/D))*D+_*t.slidesPerGroup)+I*x/O,j.css({"-webkit-box-ordinal-group":z,"-moz-box-ordinal-group":z,"-ms-flex-order":z,"-webkit-order":z,order:z})}else"column"===t.slidesPerColumnFill?(I=L-(A=Math.floor(L/O))*O,(A>k||A===k&&I===O-1)&&(I+=1)>=O&&(I=0,A+=1)):A=L-(I=Math.floor(L/P))*P;j.css("margin-"+(this.isHorizontal()?"top":"left"),0!==I&&t.spaceBetween&&t.spaceBetween+"px")}if("none"!==j.css("display")){if("auto"===t.slidesPerView){var G=e.getComputedStyle(j[0],null),F=j[0].style.transform,N=j[0].style.webkitTransform;if(F&&(j[0].style.transform="none"),N&&(j[0].style.webkitTransform="none"),t.roundLengths)E=this.isHorizontal()?j.outerWidth(!0):j.outerHeight(!0);else if(this.isHorizontal()){var V=parseFloat(G.getPropertyValue("width")||0),H=parseFloat(G.getPropertyValue("padding-left")||0),$=parseFloat(G.getPropertyValue("padding-right")||0),R=parseFloat(G.getPropertyValue("margin-left")||0),W=parseFloat(G.getPropertyValue("margin-right")||0),q=G.getPropertyValue("box-sizing");E=q&&"border-box"===q?V+R+W:V+H+$+R+W}else{var X=parseFloat(G.getPropertyValue("height")||0),Y=parseFloat(G.getPropertyValue("padding-top")||0),U=parseFloat(G.getPropertyValue("padding-bottom")||0),K=parseFloat(G.getPropertyValue("margin-top")||0),J=parseFloat(G.getPropertyValue("margin-bottom")||0),Q=G.getPropertyValue("box-sizing");E=Q&&"border-box"===Q?X+K+J:X+Y+U+K+J}F&&(j[0].style.transform=F),N&&(j[0].style.webkitTransform=N),t.roundLengths&&(E=Math.floor(E))}else E=(s-(t.slidesPerView-1)*C)/t.slidesPerView,t.roundLengths&&(E=Math.floor(E)),c[L]&&(this.isHorizontal()?c[L].style.width=E+"px":c[L].style.height=E+"px");c[L]&&(c[L].swiperSlideSize=E),f.push(E),t.centeredSlides?(T=T+E/2+y/2+C,0===y&&0!==L&&(T=T-s/2-C),0===L&&(T=T-s/2-C),Math.abs(T)<.001&&(T=0),t.roundLengths&&(T=Math.floor(T)),S%t.slidesPerGroup==0&&u.push(T),p.push(T)):(t.roundLengths&&(T=Math.floor(T)),(S-Math.min(this.params.slidesPerGroupSkip,S))%this.params.slidesPerGroup==0&&u.push(T),p.push(T),T=T+E+C),this.virtualSize+=E+C,y=E,S+=1}}if(this.virtualSize=Math.max(this.virtualSize,s)+g,r&&n&&("slide"===t.effect||"coverflow"===t.effect)&&i.css({width:this.virtualSize+t.spaceBetween+"px"}),t.setWrapperSize&&(this.isHorizontal()?i.css({width:this.virtualSize+t.spaceBetween+"px"}):i.css({height:this.virtualSize+t.spaceBetween+"px"})),t.slidesPerColumn>1&&(this.virtualSize=(E+t.spaceBetween)*x,this.virtualSize=Math.ceil(this.virtualSize/t.slidesPerColumn)-t.spaceBetween,this.isHorizontal()?i.css({width:this.virtualSize+t.spaceBetween+"px"}):i.css({height:this.virtualSize+t.spaceBetween+"px"}),t.centeredSlides)){M=[];for(var Z=0;Z<u.length;Z+=1){var ee=u[Z];t.roundLengths&&(ee=Math.floor(ee)),u[Z]<this.virtualSize+u[0]&&M.push(ee)}u=M}if(!t.centeredSlides){M=[];for(var te=0;te<u.length;te+=1){var ie=u[te];t.roundLengths&&(ie=Math.floor(ie)),u[te]<=this.virtualSize-s&&M.push(ie)}u=M,Math.floor(this.virtualSize-s)-Math.floor(u[u.length-1])>1&&u.push(this.virtualSize-s)}if(0===u.length&&(u=[0]),0!==t.spaceBetween&&(this.isHorizontal()?r?c.filter(v).css({marginLeft:C+"px"}):c.filter(v).css({marginRight:C+"px"}):c.filter(v).css({marginBottom:C+"px"})),t.centeredSlides&&t.centeredSlidesBounds){var se=0;f.forEach((function(e){se+=e+(t.spaceBetween?t.spaceBetween:0)}));var re=(se-=t.spaceBetween)-s;u=u.map((function(e){return e<0?-m:e>re?re+g:e}))}if(t.centerInsufficientSlides){var ne=0;if(f.forEach((function(e){ne+=e+(t.spaceBetween?t.spaceBetween:0)})),(ne-=t.spaceBetween)<s){var ae=(s-ne)/2;u.forEach((function(e,t){u[t]=e-ae})),p.forEach((function(e,t){p[t]=e+ae}))}}Object(o.c)(this,{slides:c,snapGrid:u,slidesGrid:p,slidesSizesGrid:f}),h!==d&&this.emit("slidesLengthChange"),u.length!==b&&(this.params.watchOverflow&&this.checkOverflow(),this.emit("snapGridLengthChange")),p.length!==w&&this.emit("slidesGridLengthChange"),(t.watchSlidesProgress||t.watchSlidesVisibility)&&this.updateSlidesOffset()}},updateAutoHeight:function(e){var t,i=[],s=0;if("number"==typeof e?this.setTransition(e):!0===e&&this.setTransition(this.params.speed),"auto"!==this.params.slidesPerView&&this.params.slidesPerView>1)if(this.params.centeredSlides)this.visibleSlides.each((function(e){i.push(e)}));else for(t=0;t<Math.ceil(this.params.slidesPerView);t+=1){var r=this.activeIndex+t;if(r>this.slides.length)break;i.push(this.slides.eq(r)[0])}else i.push(this.slides.eq(this.activeIndex)[0]);for(t=0;t<i.length;t+=1)if(void 0!==i[t]){var n=i[t].offsetHeight;s=n>s?n:s}s&&this.$wrapperEl.css("height",s+"px")},updateSlidesOffset:function(){for(var e=this.slides,t=0;t<e.length;t+=1)e[t].swiperSlideOffset=this.isHorizontal()?e[t].offsetLeft:e[t].offsetTop},updateSlidesProgress:function(e){void 0===e&&(e=this&&this.translate||0);var t=this.params,i=this.slides,s=this.rtlTranslate;if(0!==i.length){void 0===i[0].swiperSlideOffset&&this.updateSlidesOffset();var r=-e;s&&(r=e),i.removeClass(t.slideVisibleClass),this.visibleSlidesIndexes=[],this.visibleSlides=[];for(var n=0;n<i.length;n+=1){var o=i[n],l=(r+(t.centeredSlides?this.minTranslate():0)-o.swiperSlideOffset)/(o.swiperSlideSize+t.spaceBetween);if(t.watchSlidesVisibility||t.centeredSlides&&t.autoHeight){var d=-(r-o.swiperSlideOffset),c=d+this.slidesSizesGrid[n];(d>=0&&d<this.size-1||c>1&&c<=this.size||d<=0&&c>=this.size)&&(this.visibleSlides.push(o),this.visibleSlidesIndexes.push(n),i.eq(n).addClass(t.slideVisibleClass))}o.progress=s?-l:l}this.visibleSlides=Object(a.a)(this.visibleSlides)}},updateProgress:function(e){if(void 0===e){var t=this.rtlTranslate?-1:1;e=this&&this.translate&&this.translate*t||0}var i=this.params,s=this.maxTranslate()-this.minTranslate(),r=this.progress,n=this.isBeginning,a=this.isEnd,l=n,d=a;0===s?(r=0,n=!0,a=!0):(n=(r=(e-this.minTranslate())/s)<=0,a=r>=1),Object(o.c)(this,{progress:r,isBeginning:n,isEnd:a}),(i.watchSlidesProgress||i.watchSlidesVisibility||i.centeredSlides&&i.autoHeight)&&this.updateSlidesProgress(e),n&&!l&&this.emit("reachBeginning toEdge"),a&&!d&&this.emit("reachEnd toEdge"),(l&&!n||d&&!a)&&this.emit("fromEdge"),this.emit("progress",r)},updateSlidesClasses:function(){var e,t=this.slides,i=this.params,s=this.$wrapperEl,r=this.activeIndex,n=this.realIndex,a=this.virtual&&i.virtual.enabled;t.removeClass(i.slideActiveClass+" "+i.slideNextClass+" "+i.slidePrevClass+" "+i.slideDuplicateActiveClass+" "+i.slideDuplicateNextClass+" "+i.slideDuplicatePrevClass),(e=a?this.$wrapperEl.find("."+i.slideClass+'[data-swiper-slide-index="'+r+'"]'):t.eq(r)).addClass(i.slideActiveClass),i.loop&&(e.hasClass(i.slideDuplicateClass)?s.children("."+i.slideClass+":not(."+i.slideDuplicateClass+')[data-swiper-slide-index="'+n+'"]').addClass(i.slideDuplicateActiveClass):s.children("."+i.slideClass+"."+i.slideDuplicateClass+'[data-swiper-slide-index="'+n+'"]').addClass(i.slideDuplicateActiveClass));var o=e.nextAll("."+i.slideClass).eq(0).addClass(i.slideNextClass);i.loop&&0===o.length&&(o=t.eq(0)).addClass(i.slideNextClass);var l=e.prevAll("."+i.slideClass).eq(0).addClass(i.slidePrevClass);i.loop&&0===l.length&&(l=t.eq(-1)).addClass(i.slidePrevClass),i.loop&&(o.hasClass(i.slideDuplicateClass)?s.children("."+i.slideClass+":not(."+i.slideDuplicateClass+')[data-swiper-slide-index="'+o.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicateNextClass):s.children("."+i.slideClass+"."+i.slideDuplicateClass+'[data-swiper-slide-index="'+o.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicateNextClass),l.hasClass(i.slideDuplicateClass)?s.children("."+i.slideClass+":not(."+i.slideDuplicateClass+')[data-swiper-slide-index="'+l.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicatePrevClass):s.children("."+i.slideClass+"."+i.slideDuplicateClass+'[data-swiper-slide-index="'+l.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicatePrevClass)),this.emitSlidesClasses()},updateActiveIndex:function(e){var t,i=this.rtlTranslate?this.translate:-this.translate,s=this.slidesGrid,r=this.snapGrid,n=this.params,a=this.activeIndex,l=this.realIndex,d=this.snapIndex,c=e;if(void 0===c){for(var h=0;h<s.length;h+=1)void 0!==s[h+1]?i>=s[h]&&i<s[h+1]-(s[h+1]-s[h])/2?c=h:i>=s[h]&&i<s[h+1]&&(c=h+1):i>=s[h]&&(c=h);n.normalizeSlideIndex&&(c<0||void 0===c)&&(c=0)}if(r.indexOf(i)>=0)t=r.indexOf(i);else{var u=Math.min(n.slidesPerGroupSkip,c);t=u+Math.floor((c-u)/n.slidesPerGroup)}if(t>=r.length&&(t=r.length-1),c!==a){var p=parseInt(this.slides.eq(c).attr("data-swiper-slide-index")||c,10);Object(o.c)(this,{snapIndex:t,realIndex:p,previousIndex:a,activeIndex:c}),this.emit("activeIndexChange"),this.emit("snapIndexChange"),l!==p&&this.emit("realIndexChange"),(this.initialized||this.params.runCallbacksOnInit)&&this.emit("slideChange")}else t!==d&&(this.snapIndex=t,this.emit("snapIndexChange"))},updateClickedSlide:function(e){var t=this.params,i=Object(a.a)(e.target).closest("."+t.slideClass)[0],s=!1;if(i)for(var r=0;r<this.slides.length;r+=1)this.slides[r]===i&&(s=!0);if(!i||!s)return this.clickedSlide=void 0,void(this.clickedIndex=void 0);this.clickedSlide=i,this.virtual&&this.params.virtual.enabled?this.clickedIndex=parseInt(Object(a.a)(i).attr("data-swiper-slide-index"),10):this.clickedIndex=Object(a.a)(i).index(),t.slideToClickedSlide&&void 0!==this.clickedIndex&&this.clickedIndex!==this.activeIndex&&this.slideToClickedSlide()}},translate:{getTranslate:function(e){void 0===e&&(e=this.isHorizontal()?"x":"y");var t=this.params,i=this.rtlTranslate,s=this.translate,r=this.$wrapperEl;if(t.virtualTranslate)return i?-s:s;if(t.cssMode)return s;var n=Object(o.d)(r[0],e);return i&&(n=-n),n||0},setTranslate:function(e,t){var i=this.rtlTranslate,s=this.params,r=this.$wrapperEl,n=this.wrapperEl,a=this.progress,o=0,l=0;this.isHorizontal()?o=i?-e:e:l=e,s.roundLengths&&(o=Math.floor(o),l=Math.floor(l)),s.cssMode?n[this.isHorizontal()?"scrollLeft":"scrollTop"]=this.isHorizontal()?-o:-l:s.virtualTranslate||r.transform("translate3d("+o+"px, "+l+"px, 0px)"),this.previousTranslate=this.translate,this.translate=this.isHorizontal()?o:l;var d=this.maxTranslate()-this.minTranslate();(0===d?0:(e-this.minTranslate())/d)!==a&&this.updateProgress(e),this.emit("setTranslate",this.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(e,t,i,s,r){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===i&&(i=!0),void 0===s&&(s=!0);var n=this,a=n.params,o=n.wrapperEl;if(n.animating&&a.preventInteractionOnTransition)return!1;var l,d=n.minTranslate(),c=n.maxTranslate();if(l=s&&e>d?d:s&&e<c?c:e,n.updateProgress(l),a.cssMode){var h,u=n.isHorizontal();if(0===t)o[u?"scrollLeft":"scrollTop"]=-l;else if(o.scrollTo)o.scrollTo(((h={})[u?"left":"top"]=-l,h.behavior="smooth",h));else o[u?"scrollLeft":"scrollTop"]=-l;return!0}return 0===t?(n.setTransition(0),n.setTranslate(l),i&&(n.emit("beforeTransitionStart",t,r),n.emit("transitionEnd"))):(n.setTransition(t),n.setTranslate(l),i&&(n.emit("beforeTransitionStart",t,r),n.emit("transitionStart")),n.animating||(n.animating=!0,n.onTranslateToWrapperTransitionEnd||(n.onTranslateToWrapperTransitionEnd=function(e){n&&!n.destroyed&&e.target===this&&(n.$wrapperEl[0].removeEventListener("transitionend",n.onTranslateToWrapperTransitionEnd),n.$wrapperEl[0].removeEventListener("webkitTransitionEnd",n.onTranslateToWrapperTransitionEnd),n.onTranslateToWrapperTransitionEnd=null,delete n.onTranslateToWrapperTransitionEnd,i&&n.emit("transitionEnd"))}),n.$wrapperEl[0].addEventListener("transitionend",n.onTranslateToWrapperTransitionEnd),n.$wrapperEl[0].addEventListener("webkitTransitionEnd",n.onTranslateToWrapperTransitionEnd))),!0}},transition:{setTransition:function(e,t){this.params.cssMode||this.$wrapperEl.transition(e),this.emit("setTransition",e,t)},transitionStart:function(e,t){void 0===e&&(e=!0);var i=this.activeIndex,s=this.params,r=this.previousIndex;if(!s.cssMode){s.autoHeight&&this.updateAutoHeight();var n=t;if(n||(n=i>r?"next":i<r?"prev":"reset"),this.emit("transitionStart"),e&&i!==r){if("reset"===n)return void this.emit("slideResetTransitionStart");this.emit("slideChangeTransitionStart"),"next"===n?this.emit("slideNextTransitionStart"):this.emit("slidePrevTransitionStart")}}},transitionEnd:function(e,t){void 0===e&&(e=!0);var i=this.activeIndex,s=this.previousIndex,r=this.params;if(this.animating=!1,!r.cssMode){this.setTransition(0);var n=t;if(n||(n=i>s?"next":i<s?"prev":"reset"),this.emit("transitionEnd"),e&&i!==s){if("reset"===n)return void this.emit("slideResetTransitionEnd");this.emit("slideChangeTransitionEnd"),"next"===n?this.emit("slideNextTransitionEnd"):this.emit("slidePrevTransitionEnd")}}}},slide:{slideTo:function(e,t,i,s){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===i&&(i=!0);var r=this,n=e;n<0&&(n=0);var a=r.params,o=r.snapGrid,l=r.slidesGrid,d=r.previousIndex,c=r.activeIndex,h=r.rtlTranslate,u=r.wrapperEl;if(r.animating&&a.preventInteractionOnTransition)return!1;var p=Math.min(r.params.slidesPerGroupSkip,n),f=p+Math.floor((n-p)/r.params.slidesPerGroup);f>=o.length&&(f=o.length-1),(c||a.initialSlide||0)===(d||0)&&i&&r.emit("beforeSlideChangeStart");var v,m=-o[f];if(r.updateProgress(m),a.normalizeSlideIndex)for(var g=0;g<l.length;g+=1)-Math.floor(100*m)>=Math.floor(100*l[g])&&(n=g);if(r.initialized&&n!==c){if(!r.allowSlideNext&&m<r.translate&&m<r.minTranslate())return!1;if(!r.allowSlidePrev&&m>r.translate&&m>r.maxTranslate()&&(c||0)!==n)return!1}if(v=n>c?"next":n<c?"prev":"reset",h&&-m===r.translate||!h&&m===r.translate)return r.updateActiveIndex(n),a.autoHeight&&r.updateAutoHeight(),r.updateSlidesClasses(),"slide"!==a.effect&&r.setTranslate(m),"reset"!==v&&(r.transitionStart(i,v),r.transitionEnd(i,v)),!1;if(a.cssMode){var b,w=r.isHorizontal(),C=-m;if(h&&(C=u.scrollWidth-u.offsetWidth-C),0===t)u[w?"scrollLeft":"scrollTop"]=C;else if(u.scrollTo)u.scrollTo(((b={})[w?"left":"top"]=C,b.behavior="smooth",b));else u[w?"scrollLeft":"scrollTop"]=C;return!0}return 0===t?(r.setTransition(0),r.setTranslate(m),r.updateActiveIndex(n),r.updateSlidesClasses(),r.emit("beforeTransitionStart",t,s),r.transitionStart(i,v),r.transitionEnd(i,v)):(r.setTransition(t),r.setTranslate(m),r.updateActiveIndex(n),r.updateSlidesClasses(),r.emit("beforeTransitionStart",t,s),r.transitionStart(i,v),r.animating||(r.animating=!0,r.onSlideToWrapperTransitionEnd||(r.onSlideToWrapperTransitionEnd=function(e){r&&!r.destroyed&&e.target===this&&(r.$wrapperEl[0].removeEventListener("transitionend",r.onSlideToWrapperTransitionEnd),r.$wrapperEl[0].removeEventListener("webkitTransitionEnd",r.onSlideToWrapperTransitionEnd),r.onSlideToWrapperTransitionEnd=null,delete r.onSlideToWrapperTransitionEnd,r.transitionEnd(i,v))}),r.$wrapperEl[0].addEventListener("transitionend",r.onSlideToWrapperTransitionEnd),r.$wrapperEl[0].addEventListener("webkitTransitionEnd",r.onSlideToWrapperTransitionEnd))),!0},slideToLoop:function(e,t,i,s){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===i&&(i=!0);var r=e;return this.params.loop&&(r+=this.loopedSlides),this.slideTo(r,t,i,s)},slideNext:function(e,t,i){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var s=this.params,r=this.animating,n=this.activeIndex<s.slidesPerGroupSkip?1:s.slidesPerGroup;if(s.loop){if(r&&s.loopPreventsSlide)return!1;this.loopFix(),this._clientLeft=this.$wrapperEl[0].clientLeft}return this.slideTo(this.activeIndex+n,e,t,i)},slidePrev:function(e,t,i){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var s=this.params,r=this.animating,n=this.snapGrid,a=this.slidesGrid,o=this.rtlTranslate;if(s.loop){if(r&&s.loopPreventsSlide)return!1;this.loopFix(),this._clientLeft=this.$wrapperEl[0].clientLeft}function l(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}var d,c=l(o?this.translate:-this.translate),h=n.map((function(e){return l(e)})),u=(n[h.indexOf(c)],n[h.indexOf(c)-1]);return void 0===u&&s.cssMode&&n.forEach((function(e){!u&&c>=e&&(u=e)})),void 0!==u&&(d=a.indexOf(u))<0&&(d=this.activeIndex-1),this.slideTo(d,e,t,i)},slideReset:function(e,t,i){return void 0===e&&(e=this.params.speed),void 0===t&&(t=!0),this.slideTo(this.activeIndex,e,t,i)},slideToClosest:function(e,t,i,s){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0),void 0===s&&(s=.5);var r=this.activeIndex,n=Math.min(this.params.slidesPerGroupSkip,r),a=n+Math.floor((r-n)/this.params.slidesPerGroup),o=this.rtlTranslate?this.translate:-this.translate;if(o>=this.snapGrid[a]){var l=this.snapGrid[a];o-l>(this.snapGrid[a+1]-l)*s&&(r+=this.params.slidesPerGroup)}else{var d=this.snapGrid[a-1];o-d<=(this.snapGrid[a]-d)*s&&(r-=this.params.slidesPerGroup)}return r=Math.max(r,0),r=Math.min(r,this.slidesGrid.length-1),this.slideTo(r,e,t,i)},slideToClickedSlide:function(){var e,t=this,i=t.params,s=t.$wrapperEl,r="auto"===i.slidesPerView?t.slidesPerViewDynamic():i.slidesPerView,n=t.clickedIndex;if(i.loop){if(t.animating)return;e=parseInt(Object(a.a)(t.clickedSlide).attr("data-swiper-slide-index"),10),i.centeredSlides?n<t.loopedSlides-r/2||n>t.slides.length-t.loopedSlides+r/2?(t.loopFix(),n=s.children("."+i.slideClass+'[data-swiper-slide-index="'+e+'"]:not(.'+i.slideDuplicateClass+")").eq(0).index(),Object(o.e)((function(){t.slideTo(n)}))):t.slideTo(n):n>t.slides.length-r?(t.loopFix(),n=s.children("."+i.slideClass+'[data-swiper-slide-index="'+e+'"]:not(.'+i.slideDuplicateClass+")").eq(0).index(),Object(o.e)((function(){t.slideTo(n)}))):t.slideTo(n)}else t.slideTo(n)}},loop:{loopCreate:function(){var e=this,t=Object(l.a)(),i=e.params,s=e.$wrapperEl;s.children("."+i.slideClass+"."+i.slideDuplicateClass).remove();var r=s.children("."+i.slideClass);if(i.loopFillGroupWithBlank){var n=i.slidesPerGroup-r.length%i.slidesPerGroup;if(n!==i.slidesPerGroup){for(var o=0;o<n;o+=1){var d=Object(a.a)(t.createElement("div")).addClass(i.slideClass+" "+i.slideBlankClass);s.append(d)}r=s.children("."+i.slideClass)}}"auto"!==i.slidesPerView||i.loopedSlides||(i.loopedSlides=r.length),e.loopedSlides=Math.ceil(parseFloat(i.loopedSlides||i.slidesPerView,10)),e.loopedSlides+=i.loopAdditionalSlides,e.loopedSlides>r.length&&(e.loopedSlides=r.length);var c=[],h=[];r.each((function(t,i){var s=Object(a.a)(t);i<e.loopedSlides&&h.push(t),i<r.length&&i>=r.length-e.loopedSlides&&c.push(t),s.attr("data-swiper-slide-index",i)}));for(var u=0;u<h.length;u+=1)s.append(Object(a.a)(h[u].cloneNode(!0)).addClass(i.slideDuplicateClass));for(var p=c.length-1;p>=0;p-=1)s.prepend(Object(a.a)(c[p].cloneNode(!0)).addClass(i.slideDuplicateClass))},loopFix:function(){this.emit("beforeLoopFix");var e,t=this.activeIndex,i=this.slides,s=this.loopedSlides,r=this.allowSlidePrev,n=this.allowSlideNext,a=this.snapGrid,o=this.rtlTranslate;this.allowSlidePrev=!0,this.allowSlideNext=!0;var l=-a[t]-this.getTranslate();if(t<s)e=i.length-3*s+t,e+=s,this.slideTo(e,0,!1,!0)&&0!==l&&this.setTranslate((o?-this.translate:this.translate)-l);else if(t>=i.length-s){e=-i.length+t+s,e+=s,this.slideTo(e,0,!1,!0)&&0!==l&&this.setTranslate((o?-this.translate:this.translate)-l)}this.allowSlidePrev=r,this.allowSlideNext=n,this.emit("loopFix")},loopDestroy:function(){var e=this.$wrapperEl,t=this.params,i=this.slides;e.children("."+t.slideClass+"."+t.slideDuplicateClass+",."+t.slideClass+"."+t.slideBlankClass).remove(),i.removeAttr("data-swiper-slide-index")}},grabCursor:{setGrabCursor:function(e){if(!(this.support.touch||!this.params.simulateTouch||this.params.watchOverflow&&this.isLocked||this.params.cssMode)){var t=this.el;t.style.cursor="move",t.style.cursor=e?"-webkit-grabbing":"-webkit-grab",t.style.cursor=e?"-moz-grabbin":"-moz-grab",t.style.cursor=e?"grabbing":"grab"}},unsetGrabCursor:function(){this.support.touch||this.params.watchOverflow&&this.isLocked||this.params.cssMode||(this.el.style.cursor="")}},manipulation:{appendSlide:function(e){var t=this.$wrapperEl,i=this.params;if(i.loop&&this.loopDestroy(),"object"==typeof e&&"length"in e)for(var s=0;s<e.length;s+=1)e[s]&&t.append(e[s]);else t.append(e);i.loop&&this.loopCreate(),i.observer&&this.support.observer||this.update()},prependSlide:function(e){var t=this.params,i=this.$wrapperEl,s=this.activeIndex;t.loop&&this.loopDestroy();var r=s+1;if("object"==typeof e&&"length"in e){for(var n=0;n<e.length;n+=1)e[n]&&i.prepend(e[n]);r=s+e.length}else i.prepend(e);t.loop&&this.loopCreate(),t.observer&&this.support.observer||this.update(),this.slideTo(r,0,!1)},addSlide:function(e,t){var i=this.$wrapperEl,s=this.params,r=this.activeIndex;s.loop&&(r-=this.loopedSlides,this.loopDestroy(),this.slides=i.children("."+s.slideClass));var n=this.slides.length;if(e<=0)this.prependSlide(t);else if(e>=n)this.appendSlide(t);else{for(var a=r>e?r+1:r,o=[],l=n-1;l>=e;l-=1){var d=this.slides.eq(l);d.remove(),o.unshift(d)}if("object"==typeof t&&"length"in t){for(var c=0;c<t.length;c+=1)t[c]&&i.append(t[c]);a=r>e?r+t.length:r}else i.append(t);for(var h=0;h<o.length;h+=1)i.append(o[h]);s.loop&&this.loopCreate(),s.observer&&this.support.observer||this.update(),s.loop?this.slideTo(a+this.loopedSlides,0,!1):this.slideTo(a,0,!1)}},removeSlide:function(e){var t=this.params,i=this.$wrapperEl,s=this.activeIndex;t.loop&&(s-=this.loopedSlides,this.loopDestroy(),this.slides=i.children("."+t.slideClass));var r,n=s;if("object"==typeof e&&"length"in e){for(var a=0;a<e.length;a+=1)r=e[a],this.slides[r]&&this.slides.eq(r).remove(),r<n&&(n-=1);n=Math.max(n,0)}else r=e,this.slides[r]&&this.slides.eq(r).remove(),r<n&&(n-=1),n=Math.max(n,0);t.loop&&this.loopCreate(),t.observer&&this.support.observer||this.update(),t.loop?this.slideTo(n+this.loopedSlides,0,!1):this.slideTo(n,0,!1)},removeAllSlides:function(){for(var e=[],t=0;t<this.slides.length;t+=1)e.push(t);this.removeSlide(e)}},events:{attachEvents:function(){var e=Object(l.a)(),t=this.params,i=this.touchEvents,s=this.el,r=this.wrapperEl,n=this.device,a=this.support;this.onTouchStart=m.bind(this),this.onTouchMove=g.bind(this),this.onTouchEnd=b.bind(this),t.cssMode&&(this.onScroll=T.bind(this)),this.onClick=C.bind(this);var o=!!t.nested;if(!a.touch&&a.pointerEvents)s.addEventListener(i.start,this.onTouchStart,!1),e.addEventListener(i.move,this.onTouchMove,o),e.addEventListener(i.end,this.onTouchEnd,!1);else{if(a.touch){var d=!("touchstart"!==i.start||!a.passiveListener||!t.passiveListeners)&&{passive:!0,capture:!1};s.addEventListener(i.start,this.onTouchStart,d),s.addEventListener(i.move,this.onTouchMove,a.passiveListener?{passive:!1,capture:o}:o),s.addEventListener(i.end,this.onTouchEnd,d),i.cancel&&s.addEventListener(i.cancel,this.onTouchEnd,d),y||(e.addEventListener("touchstart",S),y=!0)}(t.simulateTouch&&!n.ios&&!n.android||t.simulateTouch&&!a.touch&&n.ios)&&(s.addEventListener("mousedown",this.onTouchStart,!1),e.addEventListener("mousemove",this.onTouchMove,o),e.addEventListener("mouseup",this.onTouchEnd,!1))}(t.preventClicks||t.preventClicksPropagation)&&s.addEventListener("click",this.onClick,!0),t.cssMode&&r.addEventListener("scroll",this.onScroll),t.updateOnWindowResize?this.on(n.ios||n.android?"resize orientationchange observerUpdate":"resize observerUpdate",w,!0):this.on("observerUpdate",w,!0)},detachEvents:function(){var e=Object(l.a)(),t=this.params,i=this.touchEvents,s=this.el,r=this.wrapperEl,n=this.device,a=this.support,o=!!t.nested;if(!a.touch&&a.pointerEvents)s.removeEventListener(i.start,this.onTouchStart,!1),e.removeEventListener(i.move,this.onTouchMove,o),e.removeEventListener(i.end,this.onTouchEnd,!1);else{if(a.touch){var d=!("onTouchStart"!==i.start||!a.passiveListener||!t.passiveListeners)&&{passive:!0,capture:!1};s.removeEventListener(i.start,this.onTouchStart,d),s.removeEventListener(i.move,this.onTouchMove,o),s.removeEventListener(i.end,this.onTouchEnd,d),i.cancel&&s.removeEventListener(i.cancel,this.onTouchEnd,d)}(t.simulateTouch&&!n.ios&&!n.android||t.simulateTouch&&!a.touch&&n.ios)&&(s.removeEventListener("mousedown",this.onTouchStart,!1),e.removeEventListener("mousemove",this.onTouchMove,o),e.removeEventListener("mouseup",this.onTouchEnd,!1))}(t.preventClicks||t.preventClicksPropagation)&&s.removeEventListener("click",this.onClick,!0),t.cssMode&&r.removeEventListener("scroll",this.onScroll),this.off(n.ios||n.android?"resize orientationchange observerUpdate":"resize observerUpdate",w)}},breakpoints:{setBreakpoint:function(){var e=this.activeIndex,t=this.initialized,i=this.loopedSlides,s=void 0===i?0:i,r=this.params,n=this.$el,a=r.breakpoints;if(a&&(!a||0!==Object.keys(a).length)){var l=this.getBreakpoint(a);if(l&&this.currentBreakpoint!==l){var d=l in a?a[l]:void 0;d&&["slidesPerView","spaceBetween","slidesPerGroup","slidesPerGroupSkip","slidesPerColumn"].forEach((function(e){var t=d[e];void 0!==t&&(d[e]="slidesPerView"!==e||"AUTO"!==t&&"auto"!==t?"slidesPerView"===e?parseFloat(t):parseInt(t,10):"auto")}));var c=d||this.originalParams,h=r.slidesPerColumn>1,u=c.slidesPerColumn>1;h&&!u?(n.removeClass(r.containerModifierClass+"multirow "+r.containerModifierClass+"multirow-column"),this.emitContainerClasses()):!h&&u&&(n.addClass(r.containerModifierClass+"multirow"),"column"===c.slidesPerColumnFill&&n.addClass(r.containerModifierClass+"multirow-column"),this.emitContainerClasses());var p=c.direction&&c.direction!==r.direction,f=r.loop&&(c.slidesPerView!==r.slidesPerView||p);p&&t&&this.changeDirection(),Object(o.c)(this.params,c),Object(o.c)(this,{allowTouchMove:this.params.allowTouchMove,allowSlideNext:this.params.allowSlideNext,allowSlidePrev:this.params.allowSlidePrev}),this.currentBreakpoint=l,f&&t&&(this.loopDestroy(),this.loopCreate(),this.updateSlides(),this.slideTo(e-s+this.loopedSlides,0,!1)),this.emit("breakpoint",c)}}},getBreakpoint:function(e){var t=Object(l.b)();if(e){var i=!1,s=Object.keys(e).map((function(e){if("string"==typeof e&&0===e.indexOf("@")){var i=parseFloat(e.substr(1));return{value:t.innerHeight*i,point:e}}return{value:e,point:e}}));s.sort((function(e,t){return parseInt(e.value,10)-parseInt(t.value,10)}));for(var r=0;r<s.length;r+=1){var n=s[r],a=n.point;n.value<=t.innerWidth&&(i=a)}return i||"max"}}},checkOverflow:{checkOverflow:function(){var e=this.params,t=this.isLocked,i=this.slides.length>0&&e.slidesOffsetBefore+e.spaceBetween*(this.slides.length-1)+this.slides[0].offsetWidth*this.slides.length;e.slidesOffsetBefore&&e.slidesOffsetAfter&&i?this.isLocked=i<=this.size:this.isLocked=1===this.snapGrid.length,this.allowSlideNext=!this.isLocked,this.allowSlidePrev=!this.isLocked,t!==this.isLocked&&this.emit(this.isLocked?"lock":"unlock"),t&&t!==this.isLocked&&(this.isEnd=!1,this.navigation&&this.navigation.update())}},classes:{addClasses:function(){var e=this.classNames,t=this.params,i=this.rtl,s=this.$el,r=this.device,n=[];n.push("initialized"),n.push(t.direction),t.freeMode&&n.push("free-mode"),t.autoHeight&&n.push("autoheight"),i&&n.push("rtl"),t.slidesPerColumn>1&&(n.push("multirow"),"column"===t.slidesPerColumnFill&&n.push("multirow-column")),r.android&&n.push("android"),r.ios&&n.push("ios"),t.cssMode&&n.push("css-mode"),n.forEach((function(i){e.push(t.containerModifierClass+i)})),s.addClass(e.join(" ")),this.emitContainerClasses()},removeClasses:function(){var e=this.$el,t=this.classNames;e.removeClass(t.join(" ")),this.emitContainerClasses()}},images:{loadImage:function(e,t,i,s,r,n){var o,d=Object(l.b)();function c(){n&&n()}Object(a.a)(e).parent("picture")[0]||e.complete&&r?c():t?((o=new d.Image).onload=c,o.onerror=c,s&&(o.sizes=s),i&&(o.srcset=i),t&&(o.src=t)):c()},preloadImages:function(){var e=this;function t(){null!=e&&e&&!e.destroyed&&(void 0!==e.imagesLoaded&&(e.imagesLoaded+=1),e.imagesLoaded===e.imagesToLoad.length&&(e.params.updateOnImagesReady&&e.update(),e.emit("imagesReady")))}e.imagesToLoad=e.$el.find("img");for(var i=0;i<e.imagesToLoad.length;i+=1){var s=e.imagesToLoad[i];e.loadImage(s,s.currentSrc||s.getAttribute("src"),s.srcset||s.getAttribute("srcset"),s.sizes||s.getAttribute("sizes"),!0,t)}}}},O={},P=function(){function e(){for(var t,i,s=arguments.length,r=new Array(s),n=0;n<s;n++)r[n]=arguments[n];1===r.length&&r[0].constructor&&r[0].constructor===Object?i=r[0]:(t=r[0],i=r[1]),i||(i={}),i=Object(o.c)({},i),t&&!i.el&&(i.el=t);var l=this;l.support=d(),l.device=c({userAgent:i.userAgent}),l.browser=h(),l.eventsListeners={},l.eventsAnyListeners=[],Object.keys(M).forEach((function(t){Object.keys(M[t]).forEach((function(i){e.prototype[i]||(e.prototype[i]=M[t][i])}))})),void 0===l.modules&&(l.modules={}),Object.keys(l.modules).forEach((function(e){var t=l.modules[e];if(t.params){var s=Object.keys(t.params)[0],r=t.params[s];if("object"!=typeof r||null===r)return;if(!(s in i)||!("enabled"in r))return;!0===i[s]&&(i[s]={enabled:!0}),"object"!=typeof i[s]||"enabled"in i[s]||(i[s].enabled=!0),i[s]||(i[s]={enabled:!1})}}));var u=Object(o.c)({},x);l.useParams(u),l.params=Object(o.c)({},u,O,i),l.originalParams=Object(o.c)({},l.params),l.passedParams=Object(o.c)({},i),l.params&&l.params.on&&Object.keys(l.params.on).forEach((function(e){l.on(e,l.params.on[e])})),l.$=a.a;var p=Object(a.a)(l.params.el);if(t=p[0]){if(p.length>1){var f=[];return p.each((function(t){var s=Object(o.c)({},i,{el:t});f.push(new e(s))})),f}var v,m,g;return t.swiper=l,t&&t.shadowRoot&&t.shadowRoot.querySelector?(v=Object(a.a)(t.shadowRoot.querySelector("."+l.params.wrapperClass))).children=function(e){return p.children(e)}:v=p.children("."+l.params.wrapperClass),Object(o.c)(l,{$el:p,el:t,$wrapperEl:v,wrapperEl:v[0],classNames:[],slides:Object(a.a)(),slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:function(){return"horizontal"===l.params.direction},isVertical:function(){return"vertical"===l.params.direction},rtl:"rtl"===t.dir.toLowerCase()||"rtl"===p.css("direction"),rtlTranslate:"horizontal"===l.params.direction&&("rtl"===t.dir.toLowerCase()||"rtl"===p.css("direction")),wrongRTL:"-webkit-box"===v.css("display"),activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,allowSlideNext:l.params.allowSlideNext,allowSlidePrev:l.params.allowSlidePrev,touchEvents:(m=["touchstart","touchmove","touchend","touchcancel"],g=["mousedown","mousemove","mouseup"],l.support.pointerEvents&&(g=["pointerdown","pointermove","pointerup"]),l.touchEventsTouch={start:m[0],move:m[1],end:m[2],cancel:m[3]},l.touchEventsDesktop={start:g[0],move:g[1],end:g[2]},l.support.touch||!l.params.simulateTouch?l.touchEventsTouch:l.touchEventsDesktop),touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,formElements:"input, select, option, textarea, button, video, label",lastClickTime:Object(o.f)(),clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,isTouchEvent:void 0,startMoving:void 0},allowClick:!0,allowTouchMove:l.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),l.useModules(),l.emit("_swiper"),l.params.init&&l.init(),l}}var t,i,s,r=e.prototype;return r.emitContainerClasses=function(){var e=this;if(e.params._emitClasses&&e.el){var t=e.el.className.split(" ").filter((function(t){return 0===t.indexOf("swiper-container")||0===t.indexOf(e.params.containerModifierClass)}));e.emit("_containerClasses",t.join(" "))}},r.emitSlidesClasses=function(){var e=this;e.params._emitClasses&&e.el&&e.slides.each((function(t){var i=t.className.split(" ").filter((function(t){return 0===t.indexOf("swiper-slide")||0===t.indexOf(e.params.slideClass)}));e.emit("_slideClass",t,i.join(" "))}))},r.slidesPerViewDynamic=function(){var e=this.params,t=this.slides,i=this.slidesGrid,s=this.size,r=this.activeIndex,n=1;if(e.centeredSlides){for(var a,o=t[r].swiperSlideSize,l=r+1;l<t.length;l+=1)t[l]&&!a&&(n+=1,(o+=t[l].swiperSlideSize)>s&&(a=!0));for(var d=r-1;d>=0;d-=1)t[d]&&!a&&(n+=1,(o+=t[d].swiperSlideSize)>s&&(a=!0))}else for(var c=r+1;c<t.length;c+=1)i[c]-i[r]<s&&(n+=1);return n},r.update=function(){var e=this;if(e&&!e.destroyed){var t=e.snapGrid,i=e.params;i.breakpoints&&e.setBreakpoint(),e.updateSize(),e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),e.params.freeMode?(s(),e.params.autoHeight&&e.updateAutoHeight()):(("auto"===e.params.slidesPerView||e.params.slidesPerView>1)&&e.isEnd&&!e.params.centeredSlides?e.slideTo(e.slides.length-1,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0))||s(),i.watchOverflow&&t!==e.snapGrid&&e.checkOverflow(),e.emit("update")}function s(){var t=e.rtlTranslate?-1*e.translate:e.translate,i=Math.min(Math.max(t,e.maxTranslate()),e.minTranslate());e.setTranslate(i),e.updateActiveIndex(),e.updateSlidesClasses()}},r.changeDirection=function(e,t){void 0===t&&(t=!0);var i=this.params.direction;return e||(e="horizontal"===i?"vertical":"horizontal"),e===i||"horizontal"!==e&&"vertical"!==e||(this.$el.removeClass(""+this.params.containerModifierClass+i).addClass(""+this.params.containerModifierClass+e),this.emitContainerClasses(),this.params.direction=e,this.slides.each((function(t){"vertical"===e?t.style.width="":t.style.height=""})),this.emit("changeDirection"),t&&this.update()),this},r.init=function(){this.initialized||(this.emit("beforeInit"),this.params.breakpoints&&this.setBreakpoint(),this.addClasses(),this.params.loop&&this.loopCreate(),this.updateSize(),this.updateSlides(),this.params.watchOverflow&&this.checkOverflow(),this.params.grabCursor&&this.setGrabCursor(),this.params.preloadImages&&this.preloadImages(),this.params.loop?this.slideTo(this.params.initialSlide+this.loopedSlides,0,this.params.runCallbacksOnInit):this.slideTo(this.params.initialSlide,0,this.params.runCallbacksOnInit),this.attachEvents(),this.initialized=!0,this.emit("init"))},r.destroy=function(e,t){void 0===e&&(e=!0),void 0===t&&(t=!0);var i=this,s=i.params,r=i.$el,n=i.$wrapperEl,a=i.slides;return void 0===i.params||i.destroyed||(i.emit("beforeDestroy"),i.initialized=!1,i.detachEvents(),s.loop&&i.loopDestroy(),t&&(i.removeClasses(),r.removeAttr("style"),n.removeAttr("style"),a&&a.length&&a.removeClass([s.slideVisibleClass,s.slideActiveClass,s.slideNextClass,s.slidePrevClass].join(" ")).removeAttr("style").removeAttr("data-swiper-slide-index")),i.emit("destroy"),Object.keys(i.eventsListeners).forEach((function(e){i.off(e)})),!1!==e&&(i.$el[0].swiper=null,Object(o.b)(i)),i.destroyed=!0),null},e.extendDefaults=function(e){Object(o.c)(O,e)},e.installModule=function(t){e.prototype.modules||(e.prototype.modules={});var i=t.name||Object.keys(e.prototype.modules).length+"_"+Object(o.f)();e.prototype.modules[i]=t},e.use=function(t){return Array.isArray(t)?(t.forEach((function(t){return e.installModule(t)})),e):(e.installModule(t),e)},t=e,s=[{key:"extendedDefaults",get:function(){return O}},{key:"defaults",get:function(){return x}}],(i=null)&&E(t.prototype,i),s&&E(t,s),e}();P.use([u,v]);t.a=P},function(e,t,i){"use strict";var s=i(2),r=i(0);function n(){return(n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var i=arguments[t];for(var s in i)Object.prototype.hasOwnProperty.call(i,s)&&(e[s]=i[s])}return e}).apply(this,arguments)}var a={update:function(){var e=this.rtl,t=this.params.pagination;if(t.el&&this.pagination.el&&this.pagination.$el&&0!==this.pagination.$el.length){var i,r=this.virtual&&this.params.virtual.enabled?this.virtual.slides.length:this.slides.length,n=this.pagination.$el,a=this.params.loop?Math.ceil((r-2*this.loopedSlides)/this.params.slidesPerGroup):this.snapGrid.length;if(this.params.loop?((i=Math.ceil((this.activeIndex-this.loopedSlides)/this.params.slidesPerGroup))>r-1-2*this.loopedSlides&&(i-=r-2*this.loopedSlides),i>a-1&&(i-=a),i<0&&"bullets"!==this.params.paginationType&&(i=a+i)):i=void 0!==this.snapIndex?this.snapIndex:this.activeIndex||0,"bullets"===t.type&&this.pagination.bullets&&this.pagination.bullets.length>0){var o,l,d,c=this.pagination.bullets;if(t.dynamicBullets&&(this.pagination.bulletSize=c.eq(0)[this.isHorizontal()?"outerWidth":"outerHeight"](!0),n.css(this.isHorizontal()?"width":"height",this.pagination.bulletSize*(t.dynamicMainBullets+4)+"px"),t.dynamicMainBullets>1&&void 0!==this.previousIndex&&(this.pagination.dynamicBulletIndex+=i-this.previousIndex,this.pagination.dynamicBulletIndex>t.dynamicMainBullets-1?this.pagination.dynamicBulletIndex=t.dynamicMainBullets-1:this.pagination.dynamicBulletIndex<0&&(this.pagination.dynamicBulletIndex=0)),o=i-this.pagination.dynamicBulletIndex,d=((l=o+(Math.min(c.length,t.dynamicMainBullets)-1))+o)/2),c.removeClass(t.bulletActiveClass+" "+t.bulletActiveClass+"-next "+t.bulletActiveClass+"-next-next "+t.bulletActiveClass+"-prev "+t.bulletActiveClass+"-prev-prev "+t.bulletActiveClass+"-main"),n.length>1)c.each((function(e){var r=Object(s.a)(e),n=r.index();n===i&&r.addClass(t.bulletActiveClass),t.dynamicBullets&&(n>=o&&n<=l&&r.addClass(t.bulletActiveClass+"-main"),n===o&&r.prev().addClass(t.bulletActiveClass+"-prev").prev().addClass(t.bulletActiveClass+"-prev-prev"),n===l&&r.next().addClass(t.bulletActiveClass+"-next").next().addClass(t.bulletActiveClass+"-next-next"))}));else{var h=c.eq(i),u=h.index();if(h.addClass(t.bulletActiveClass),t.dynamicBullets){for(var p=c.eq(o),f=c.eq(l),v=o;v<=l;v+=1)c.eq(v).addClass(t.bulletActiveClass+"-main");if(this.params.loop)if(u>=c.length-t.dynamicMainBullets){for(var m=t.dynamicMainBullets;m>=0;m-=1)c.eq(c.length-m).addClass(t.bulletActiveClass+"-main");c.eq(c.length-t.dynamicMainBullets-1).addClass(t.bulletActiveClass+"-prev")}else p.prev().addClass(t.bulletActiveClass+"-prev").prev().addClass(t.bulletActiveClass+"-prev-prev"),f.next().addClass(t.bulletActiveClass+"-next").next().addClass(t.bulletActiveClass+"-next-next");else p.prev().addClass(t.bulletActiveClass+"-prev").prev().addClass(t.bulletActiveClass+"-prev-prev"),f.next().addClass(t.bulletActiveClass+"-next").next().addClass(t.bulletActiveClass+"-next-next")}}if(t.dynamicBullets){var g=Math.min(c.length,t.dynamicMainBullets+4),b=(this.pagination.bulletSize*g-this.pagination.bulletSize)/2-d*this.pagination.bulletSize,w=e?"right":"left";c.css(this.isHorizontal()?w:"top",b+"px")}}if("fraction"===t.type&&(n.find("."+t.currentClass).text(t.formatFractionCurrent(i+1)),n.find("."+t.totalClass).text(t.formatFractionTotal(a))),"progressbar"===t.type){var C;C=t.progressbarOpposite?this.isHorizontal()?"vertical":"horizontal":this.isHorizontal()?"horizontal":"vertical";var T=(i+1)/a,y=1,S=1;"horizontal"===C?y=T:S=T,n.find("."+t.progressbarFillClass).transform("translate3d(0,0,0) scaleX("+y+") scaleY("+S+")").transition(this.params.speed)}"custom"===t.type&&t.renderCustom?(n.html(t.renderCustom(this,i+1,a)),this.emit("paginationRender",n[0])):this.emit("paginationUpdate",n[0]),n[this.params.watchOverflow&&this.isLocked?"addClass":"removeClass"](t.lockClass)}},render:function(){var e=this.params.pagination;if(e.el&&this.pagination.el&&this.pagination.$el&&0!==this.pagination.$el.length){var t=this.virtual&&this.params.virtual.enabled?this.virtual.slides.length:this.slides.length,i=this.pagination.$el,s="";if("bullets"===e.type){for(var r=this.params.loop?Math.ceil((t-2*this.loopedSlides)/this.params.slidesPerGroup):this.snapGrid.length,n=0;n<r;n+=1)e.renderBullet?s+=e.renderBullet.call(this,n,e.bulletClass):s+="<"+e.bulletElement+' class="'+e.bulletClass+'"></'+e.bulletElement+">";i.html(s),this.pagination.bullets=i.find("."+e.bulletClass)}"fraction"===e.type&&(s=e.renderFraction?e.renderFraction.call(this,e.currentClass,e.totalClass):'<span class="'+e.currentClass+'"></span> / <span class="'+e.totalClass+'"></span>',i.html(s)),"progressbar"===e.type&&(s=e.renderProgressbar?e.renderProgressbar.call(this,e.progressbarFillClass):'<span class="'+e.progressbarFillClass+'"></span>',i.html(s)),"custom"!==e.type&&this.emit("paginationRender",this.pagination.$el[0])}},init:function(){var e=this,t=e.params.pagination;if(t.el){var i=Object(s.a)(t.el);0!==i.length&&(e.params.uniqueNavElements&&"string"==typeof t.el&&i.length>1&&(i=e.$el.find(t.el)),"bullets"===t.type&&t.clickable&&i.addClass(t.clickableClass),i.addClass(t.modifierClass+t.type),"bullets"===t.type&&t.dynamicBullets&&(i.addClass(""+t.modifierClass+t.type+"-dynamic"),e.pagination.dynamicBulletIndex=0,t.dynamicMainBullets<1&&(t.dynamicMainBullets=1)),"progressbar"===t.type&&t.progressbarOpposite&&i.addClass(t.progressbarOppositeClass),t.clickable&&i.on("click","."+t.bulletClass,(function(t){t.preventDefault();var i=Object(s.a)(this).index()*e.params.slidesPerGroup;e.params.loop&&(i+=e.loopedSlides),e.slideTo(i)})),Object(r.c)(e.pagination,{$el:i,el:i[0]}))}},destroy:function(){var e=this.params.pagination;if(e.el&&this.pagination.el&&this.pagination.$el&&0!==this.pagination.$el.length){var t=this.pagination.$el;t.removeClass(e.hiddenClass),t.removeClass(e.modifierClass+e.type),this.pagination.bullets&&this.pagination.bullets.removeClass(e.bulletActiveClass),e.clickable&&t.off("click","."+e.bulletClass)}}};t.a={name:"pagination",params:{pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:function(e){return e},formatFractionTotal:function(e){return e},bulletClass:"swiper-pagination-bullet",bulletActiveClass:"swiper-pagination-bullet-active",modifierClass:"swiper-pagination-",currentClass:"swiper-pagination-current",totalClass:"swiper-pagination-total",hiddenClass:"swiper-pagination-hidden",progressbarFillClass:"swiper-pagination-progressbar-fill",progressbarOppositeClass:"swiper-pagination-progressbar-opposite",clickableClass:"swiper-pagination-clickable",lockClass:"swiper-pagination-lock"}},create:function(){Object(r.a)(this,{pagination:n({dynamicBulletIndex:0},a)})},on:{init:function(e){e.pagination.init(),e.pagination.render(),e.pagination.update()},activeIndexChange:function(e){(e.params.loop||void 0===e.snapIndex)&&e.pagination.update()},snapIndexChange:function(e){e.params.loop||e.pagination.update()},slidesLengthChange:function(e){e.params.loop&&(e.pagination.render(),e.pagination.update())},snapGridLengthChange:function(e){e.params.loop||(e.pagination.render(),e.pagination.update())},destroy:function(e){e.pagination.destroy()},click:function(e,t){e.params.pagination.el&&e.params.pagination.hideOnClick&&e.pagination.$el.length>0&&!Object(s.a)(t.target).hasClass(e.params.pagination.bulletClass)&&(!0===e.pagination.$el.hasClass(e.params.pagination.hiddenClass)?e.emit("paginationShow"):e.emit("paginationHide"),e.pagination.$el.toggleClass(e.params.pagination.hiddenClass))}}}},function(e,t,i){},,,function(e,t,i){"use strict";i.r(t);i(8);var s=i(3),r=i(4),n=i(5);window.addEventListener("load",()=>Object(n.a)(".swiper-main")),window.addEventListener("resize",()=>Object(n.a)(".swiper-main")),Object(r.a)(s.a.burgerMenuIcon,s.a.burgerMenuContainer)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vdXRpbHMvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Nzci13aW5kb3cvc3NyLXdpbmRvdy5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbTcvZG9tNy5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vdXRpbHMvZG9tLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9kb21TdHJpbmdzLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9oZWxwZXJzLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9zd2lwZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vdXRpbHMvZ2V0LXN1cHBvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vdXRpbHMvZ2V0LWRldmljZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS91dGlscy9nZXQtYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9tb2R1bGVzL3Jlc2l6ZS9yZXNpemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vbW9kdWxlcy9vYnNlcnZlci9vYnNlcnZlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvZXZlbnRzL29uVG91Y2hTdGFydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvZXZlbnRzL29uVG91Y2hNb3ZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9ldmVudHMvb25Ub3VjaEVuZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvZXZlbnRzL29uUmVzaXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9ldmVudHMvb25DbGljay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvZXZlbnRzL29uU2Nyb2xsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9ldmVudHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL2NoZWNrLW92ZXJmbG93L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9kZWZhdWx0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvY29yZS1jbGFzcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvbW9kdWxhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvZXZlbnRzLWVtaXR0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL3VwZGF0ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvdXBkYXRlL3VwZGF0ZVNpemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL3VwZGF0ZS91cGRhdGVTbGlkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL3VwZGF0ZS91cGRhdGVBdXRvSGVpZ2h0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS91cGRhdGUvdXBkYXRlU2xpZGVzT2Zmc2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS91cGRhdGUvdXBkYXRlU2xpZGVzUHJvZ3Jlc3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL3VwZGF0ZS91cGRhdGVQcm9ncmVzcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvdXBkYXRlL3VwZGF0ZVNsaWRlc0NsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL3VwZGF0ZS91cGRhdGVBY3RpdmVJbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvdXBkYXRlL3VwZGF0ZUNsaWNrZWRTbGlkZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvdHJhbnNsYXRlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS90cmFuc2xhdGUvZ2V0VHJhbnNsYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS90cmFuc2xhdGUvc2V0VHJhbnNsYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS90cmFuc2xhdGUvbWluVHJhbnNsYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS90cmFuc2xhdGUvbWF4VHJhbnNsYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS90cmFuc2xhdGUvdHJhbnNsYXRlVG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL3RyYW5zaXRpb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL3RyYW5zaXRpb24vc2V0VHJhbnNpdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvdHJhbnNpdGlvbi90cmFuc2l0aW9uU3RhcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL3RyYW5zaXRpb24vdHJhbnNpdGlvbkVuZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvc2xpZGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL3NsaWRlL3NsaWRlVG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL3NsaWRlL3NsaWRlVG9Mb29wLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9zbGlkZS9zbGlkZU5leHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL3NsaWRlL3NsaWRlUHJldi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvc2xpZGUvc2xpZGVSZXNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvc2xpZGUvc2xpZGVUb0Nsb3Nlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL3NsaWRlL3NsaWRlVG9DbGlja2VkU2xpZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL2xvb3AvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL2xvb3AvbG9vcENyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvbG9vcC9sb29wRml4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9sb29wL2xvb3BEZXN0cm95LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9ncmFiLWN1cnNvci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvZ3JhYi1jdXJzb3Ivc2V0R3JhYkN1cnNvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvZ3JhYi1jdXJzb3IvdW5zZXRHcmFiQ3Vyc29yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9tYW5pcHVsYXRpb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL21hbmlwdWxhdGlvbi9hcHBlbmRTbGlkZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvbWFuaXB1bGF0aW9uL3ByZXBlbmRTbGlkZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvbWFuaXB1bGF0aW9uL2FkZFNsaWRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9tYW5pcHVsYXRpb24vcmVtb3ZlU2xpZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL21hbmlwdWxhdGlvbi9yZW1vdmVBbGxTbGlkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL2JyZWFrcG9pbnRzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9icmVha3BvaW50cy9zZXRCcmVha3BvaW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9icmVha3BvaW50cy9nZXRCcmVha3BvaW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9jbGFzc2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9jbGFzc2VzL2FkZENsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL2NsYXNzZXMvcmVtb3ZlQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvaW1hZ2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9pbWFnZXMvbG9hZEltYWdlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9pbWFnZXMvcHJlbG9hZEltYWdlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL3BhZ2luYXRpb24vcGFnaW5hdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImRlbGV0ZVByb3BzIiwib2JqIiwia2V5cyIsImZvckVhY2giLCJlIiwibmV4dFRpY2siLCJjYWxsYmFjayIsImRlbGF5Iiwic2V0VGltZW91dCIsIm5vdyIsIkRhdGUiLCJnZXRUcmFuc2xhdGUiLCJlbCIsImF4aXMiLCJtYXRyaXgiLCJjdXJUcmFuc2Zvcm0iLCJ0cmFuc2Zvcm1NYXRyaXgiLCJ3aW5kb3ciLCJjdXJTdHlsZSIsImdldENvbXB1dGVkU3R5bGUiLCJXZWJLaXRDU1NNYXRyaXgiLCJ0cmFuc2Zvcm0iLCJ3ZWJraXRUcmFuc2Zvcm0iLCJzcGxpdCIsImxlbmd0aCIsIm1hcCIsImEiLCJyZXBsYWNlIiwiam9pbiIsIk1velRyYW5zZm9ybSIsIk9UcmFuc2Zvcm0iLCJNc1RyYW5zZm9ybSIsIm1zVHJhbnNmb3JtIiwiZ2V0UHJvcGVydHlWYWx1ZSIsInRvU3RyaW5nIiwibTQxIiwicGFyc2VGbG9hdCIsIm00MiIsImlzT2JqZWN0IiwiY29uc3RydWN0b3IiLCJleHRlbmQiLCJ0byIsImFyZ3VtZW50cyIsInVuZGVmaW5lZCIsIm5leHRTb3VyY2UiLCJrZXlzQXJyYXkiLCJuZXh0SW5kZXgiLCJsZW4iLCJuZXh0S2V5IiwiZGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImJpbmRNb2R1bGVNZXRob2RzIiwiaW5zdGFuY2UiLCJzdWJLZXkiLCJ0YXJnZXQiLCJzcmMiLCJzc3JEb2N1bWVudCIsImJvZHkiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImFjdGl2ZUVsZW1lbnQiLCJibHVyIiwibm9kZU5hbWUiLCJxdWVyeVNlbGVjdG9yIiwicXVlcnlTZWxlY3RvckFsbCIsImdldEVsZW1lbnRCeUlkIiwiY3JlYXRlRXZlbnQiLCJpbml0RXZlbnQiLCJjcmVhdGVFbGVtZW50IiwiY2hpbGRyZW4iLCJjaGlsZE5vZGVzIiwic3R5bGUiLCJzZXRBdHRyaWJ1dGUiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImNyZWF0ZUVsZW1lbnROUyIsImltcG9ydE5vZGUiLCJsb2NhdGlvbiIsImhhc2giLCJob3N0IiwiaG9zdG5hbWUiLCJocmVmIiwib3JpZ2luIiwicGF0aG5hbWUiLCJwcm90b2NvbCIsInNlYXJjaCIsImdldERvY3VtZW50IiwiZG9jIiwiZG9jdW1lbnQiLCJzc3JXaW5kb3ciLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJoaXN0b3J5IiwicmVwbGFjZVN0YXRlIiwicHVzaFN0YXRlIiwiZ28iLCJiYWNrIiwiQ3VzdG9tRXZlbnQiLCJ0aGlzIiwiSW1hZ2UiLCJzY3JlZW4iLCJjbGVhclRpbWVvdXQiLCJtYXRjaE1lZGlhIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJpZCIsImdldFdpbmRvdyIsIndpbiIsIl9nZXRQcm90b3R5cGVPZiIsInNldFByb3RvdHlwZU9mIiwiZ2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJfc2V0UHJvdG90eXBlT2YiLCJfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsInNoYW0iLCJQcm94eSIsIl9jb25zdHJ1Y3QiLCJQYXJlbnQiLCJhcmdzIiwiQ2xhc3MiLCJwdXNoIiwiYXBwbHkiLCJGdW5jdGlvbiIsIl93cmFwTmF0aXZlU3VwZXIiLCJfY2FjaGUiLCJNYXAiLCJmbiIsImluZGV4T2YiLCJUeXBlRXJyb3IiLCJoYXMiLCJzZXQiLCJXcmFwcGVyIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJEb203IiwiX0FycmF5Iiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiaXRlbXMiLCJfdGhpcyIsInByb3RvIiwiY29uY2F0Iiwic2VsZiIsIlJlZmVyZW5jZUVycm9yIiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsIkFycmF5IiwiYXJyYXlGbGF0IiwiYXJyIiwicmVzIiwiaXNBcnJheSIsImFycmF5RmlsdGVyIiwiZmlsdGVyIiwiJCIsInNlbGVjdG9yIiwiY29udGV4dCIsImh0bWwiLCJ0cmltIiwidG9DcmVhdGUiLCJ0ZW1wUGFyZW50IiwiaW5uZXJIVE1MIiwicXNhIiwibm9kZVR5cGUiLCJ1bmlxdWVBcnJheSIsImFycmF5VW5pcXVlIiwibm9UcmlnZ2VyIiwic2hvcnRjdXQiLCJfbGVuIiwiX2tleSIsInRyaWdnZXIiLCJvbiIsIk1ldGhvZHMiLCJhZGRDbGFzcyIsImNsYXNzZXMiLCJjbGFzc05hbWVzIiwiX2VsJGNsYXNzTGlzdCIsImNsYXNzTGlzdCIsImFkZCIsInJlbW92ZUNsYXNzIiwiX2xlbjIiLCJfa2V5MiIsIl9lbCRjbGFzc0xpc3QyIiwicmVtb3ZlIiwiaGFzQ2xhc3MiLCJfbGVuNCIsIl9rZXk0IiwiY2xhc3NOYW1lIiwiY29udGFpbnMiLCJ0b2dnbGVDbGFzcyIsIl9sZW4zIiwiX2tleTMiLCJ0b2dnbGUiLCJhdHRyIiwiYXR0cnMiLCJnZXRBdHRyaWJ1dGUiLCJhdHRyTmFtZSIsInJlbW92ZUF0dHIiLCJyZW1vdmVBdHRyaWJ1dGUiLCJ0cmFuc2l0aW9uIiwiZHVyYXRpb24iLCJfbGVuNSIsIl9rZXk1IiwiZXZlbnRUeXBlIiwidGFyZ2V0U2VsZWN0b3IiLCJsaXN0ZW5lciIsImNhcHR1cmUiLCJoYW5kbGVMaXZlRXZlbnQiLCJldmVudERhdGEiLCJkb203RXZlbnREYXRhIiwidW5zaGlmdCIsImlzIiwiX3BhcmVudHMiLCJwYXJlbnRzIiwiayIsImhhbmRsZUV2ZW50IiwiaiIsImV2ZW50cyIsIl9ldmVudCIsImRvbTdMaXZlTGlzdGVuZXJzIiwicHJveHlMaXN0ZW5lciIsImV2ZW50IiwiZG9tN0xpc3RlbmVycyIsIm9mZiIsIl9sZW42IiwiX2tleTYiLCJoYW5kbGVycyIsImhhbmRsZXIiLCJkb203cHJveHkiLCJzcGxpY2UiLCJfbGVuOSIsIl9rZXk5IiwiZXZ0IiwiZGV0YWlsIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJkYXRhIiwiZGF0YUluZGV4IiwiZGlzcGF0Y2hFdmVudCIsInRyYW5zaXRpb25FbmQiLCJkb20iLCJmaXJlQ2FsbEJhY2siLCJvdXRlcldpZHRoIiwiaW5jbHVkZU1hcmdpbnMiLCJfc3R5bGVzIiwic3R5bGVzIiwib2Zmc2V0V2lkdGgiLCJvdXRlckhlaWdodCIsIl9zdHlsZXMyIiwib2Zmc2V0SGVpZ2h0Iiwib2Zmc2V0IiwiYm94IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiY2xpZW50VG9wIiwiY2xpZW50TGVmdCIsInNjcm9sbFRvcCIsInNjcm9sbFkiLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsWCIsInRvcCIsImxlZnQiLCJjc3MiLCJwcm9wcyIsIl9wcm9wIiwiZWFjaCIsImluZGV4IiwidGV4dCIsInRleHRDb250ZW50IiwiY29tcGFyZVdpdGgiLCJtYXRjaGVzIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJjaGlsZCIsInByZXZpb3VzU2libGluZyIsImVxIiwicmV0dXJuSW5kZXgiLCJhcHBlbmQiLCJuZXdDaGlsZCIsInRlbXBEaXYiLCJmaXJzdENoaWxkIiwiYXBwZW5kQ2hpbGQiLCJwcmVwZW5kIiwiaW5zZXJ0QmVmb3JlIiwibmV4dCIsIm5leHRFbGVtZW50U2libGluZyIsIm5leHRBbGwiLCJuZXh0RWxzIiwiX25leHQiLCJwcmV2IiwicHJldmlvdXNFbGVtZW50U2libGluZyIsInByZXZBbGwiLCJwcmV2RWxzIiwiX3ByZXYiLCJwYXJlbnQiLCJwYXJlbnROb2RlIiwiX3BhcmVudCIsImNsb3Nlc3QiLCJmaW5kIiwiZm91bmRFbGVtZW50cyIsImZvdW5kIiwicmVtb3ZlQ2hpbGQiLCJtZXRob2ROYW1lIiwiRE9Nc3RyaW5ncyIsInNlbGVjdG9yQWN0aXZlIiwic2VsZWN0b3JPcHRpb24iLCJzZWxlY3Rvck9wdGlvblRleHQiLCJzZWxlY3Rvck9wdGlvbkFjdGl2ZSIsInNlbGVjdG9yT3B0aW9uQWN0aXZlQ2xhc3MiLCJvcGVuRmlsdGVyIiwiY2xvc2VGaWx0ZXIiLCJiYWNrZHJvcCIsImZpbHRlck1vYmlsZSIsImZpbHRlclNpemUiLCJmaWx0ZXJTaXplU2VsZWN0ZWQiLCJmaWx0ZXJGaXQiLCJmaWx0ZXJGaXRTZWxlY3RlZCIsImZpbHRlckNvbG9yIiwiZmlsdGVyQ29sb3JTZWxlY3RlZCIsImxvd2VyUHJpY2VJblJhbmdlIiwiaGlnaGVyUHJpY2VJblJhbmdlIiwiZW1wdHlGaWx0ZXIiLCJjbGVhbkZpbHRlcnMiLCJhcHBseUZpbHRlcnMiLCJwYWdpbmF0aW9uQ29udGFpbmVyIiwicGFnaW5hdGlvbkxpbmsiLCJwYWdpbmF0aW9uTGlua0FjdGl2ZSIsImFycm93QmFjayIsImFycm93TmV4dCIsInByb2R1Y3RTaXplIiwicHJvZHVjdENvbG9yIiwicHJvZHVjdFNpemVTZWxlY3RlZCIsInByb2R1Y3RDb2xvclNlbGVjdGVkIiwiYnVyZ2VyTWVudUljb24iLCJidXJnZXJNZW51Q29udGFpbmVyIiwicHJvZHVjdEltYWdlc09wdGlvbnMiLCJmbGlwcGluZ0ltYWdlQXJyb3dMZWZ0IiwiZmxpcHBpbmdJbWFnZUFycm93UmlnaHQiLCJpbWFnZXNDb250YWluZXIiLCJ1c2UiLCJyZWdpc3RlckFjdGl2ZUNsYXNzIiwib3B0aW9uQ2xhc3MiLCJvcHRpb25DbGFzc0FjdGl2ZSIsImN1ciIsImNsb3NlTWVudSIsImljb24iLCJtZW51IiwiZGlzcGxheSIsImluaXRCdXJnZXJNZW51Q2xpY2tMaXN0ZW5lciIsIm1lbnVJY29uIiwibWVudUNvbnRhaW5lciIsInN0b3BQcm9wYWdhdGlvbiIsInN3aXBlckluc3RhbmNlcyIsImNyZWF0ZVN3aXBlciIsImNvbnRhaW5lciIsImlzU2hvd25QYWdpbmF0aW9uIiwic2xpZGVzUGVyVmlldyIsInNwYWNlQmV0d2VlbiIsImJyZWFrcG9pbnRzIiwiMzIwIiwiNjAwIiwiNzUwIiwicGFnaW5hdGlvbiIsImNsaWNrYWJsZSIsImRlc3Ryb3kiLCJicm93c2VyIiwiZ2V0U3VwcG9ydCIsInRvdWNoIiwiRG9jdW1lbnRUb3VjaCIsInBvaW50ZXJFdmVudHMiLCJQb2ludGVyRXZlbnQiLCJtYXhUb3VjaFBvaW50cyIsIm9ic2VydmVyIiwicGFzc2l2ZUxpc3RlbmVyIiwic3VwcG9ydHNQYXNzaXZlIiwib3B0cyIsImdlc3R1cmVzIiwiY2FsY1N1cHBvcnQiLCJnZXREZXZpY2UiLCJvdmVycmlkZXMiLCJfdGVtcCIsInN1cHBvcnQiLCJwbGF0Zm9ybSIsInVhIiwiZGV2aWNlIiwiaW9zIiwiYW5kcm9pZCIsInNjcmVlbldpZHRoIiwid2lkdGgiLCJzY3JlZW5IZWlnaHQiLCJoZWlnaHQiLCJtYXRjaCIsImlwYWQiLCJpcG9kIiwiaXBob25lIiwid2luZG93cyIsIm1hY29zIiwib3MiLCJjYWxjRGV2aWNlIiwiZ2V0QnJvd3NlciIsImlzRWRnZSIsImlzU2FmYXJpIiwidG9Mb3dlckNhc2UiLCJpc1dlYlZpZXciLCJ0ZXN0IiwiY2FsY0Jyb3dzZXIiLCJzd2lwZXIiLCJyZXNpemUiLCJyZXNpemVIYW5kbGVyIiwiZGVzdHJveWVkIiwiaW5pdGlhbGl6ZWQiLCJlbWl0Iiwib3JpZW50YXRpb25DaGFuZ2VIYW5kbGVyIiwiaW5pdCIsIl9leHRlbmRzIiwiYXNzaWduIiwic291cmNlIiwiT2JzZXJ2ZXIiLCJhdHRhY2giLCJvcHRpb25zIiwiTXV0YXRpb25PYnNlcnZlciIsIldlYmtpdE11dGF0aW9uT2JzZXJ2ZXIiLCJtdXRhdGlvbnMiLCJvYnNlcnZlclVwZGF0ZSIsIm9ic2VydmUiLCJhdHRyaWJ1dGVzIiwiY2hpbGRMaXN0IiwiY2hhcmFjdGVyRGF0YSIsIm9ic2VydmVycyIsInBhcmFtcyIsIm9ic2VydmVQYXJlbnRzIiwiY29udGFpbmVyUGFyZW50cyIsIiRlbCIsIm9ic2VydmVTbGlkZUNoaWxkcmVuIiwiJHdyYXBwZXJFbCIsImRpc2Nvbm5lY3QiLCJvblRvdWNoU3RhcnQiLCJ0b3VjaEV2ZW50c0RhdGEiLCJ0b3VjaGVzIiwiYW5pbWF0aW5nIiwicHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uIiwib3JpZ2luYWxFdmVudCIsIiR0YXJnZXRFbCIsInRvdWNoRXZlbnRzVGFyZ2V0Iiwid3JhcHBlckVsIiwiaXNUb3VjaEV2ZW50IiwidHlwZSIsIndoaWNoIiwiYnV0dG9uIiwiaXNUb3VjaGVkIiwiaXNNb3ZlZCIsIm5vU3dpcGluZyIsIm5vU3dpcGluZ1NlbGVjdG9yIiwibm9Td2lwaW5nQ2xhc3MiLCJhbGxvd0NsaWNrIiwic3dpcGVIYW5kbGVyIiwiY3VycmVudFgiLCJ0YXJnZXRUb3VjaGVzIiwicGFnZVgiLCJjdXJyZW50WSIsInBhZ2VZIiwic3RhcnRYIiwic3RhcnRZIiwiZWRnZVN3aXBlRGV0ZWN0aW9uIiwiaU9TRWRnZVN3aXBlRGV0ZWN0aW9uIiwiZWRnZVN3aXBlVGhyZXNob2xkIiwiaU9TRWRnZVN3aXBlVGhyZXNob2xkIiwiYWxsb3dUb3VjaENhbGxiYWNrcyIsImlzU2Nyb2xsaW5nIiwic3RhcnRNb3ZpbmciLCJ0b3VjaFN0YXJ0VGltZSIsInVwZGF0ZVNpemUiLCJzd2lwZURpcmVjdGlvbiIsInRocmVzaG9sZCIsImFsbG93VGhyZXNob2xkTW92ZSIsInByZXZlbnREZWZhdWx0IiwiZm9ybUVsZW1lbnRzIiwic2hvdWxkUHJldmVudERlZmF1bHQiLCJhbGxvd1RvdWNoTW92ZSIsInRvdWNoU3RhcnRQcmV2ZW50RGVmYXVsdCIsInRvdWNoU3RhcnRGb3JjZVByZXZlbnREZWZhdWx0Iiwib25Ub3VjaE1vdmUiLCJydGwiLCJydGxUcmFuc2xhdGUiLCJ0YXJnZXRUb3VjaCIsImNoYW5nZWRUb3VjaGVzIiwicHJldmVudGVkQnlOZXN0ZWRTd2lwZXIiLCJ0b3VjaFJlbGVhc2VPbkVkZ2VzIiwibG9vcCIsImlzVmVydGljYWwiLCJ0cmFuc2xhdGUiLCJtYXhUcmFuc2xhdGUiLCJtaW5UcmFuc2xhdGUiLCJkaWZmWCIsImRpZmZZIiwiTWF0aCIsInNxcnQiLCJwb3ciLCJ0b3VjaEFuZ2xlIiwiaXNIb3Jpem9udGFsIiwiYXRhbjIiLCJhYnMiLCJQSSIsImNzc01vZGUiLCJ0b3VjaE1vdmVTdG9wUHJvcGFnYXRpb24iLCJuZXN0ZWQiLCJsb29wRml4Iiwic3RhcnRUcmFuc2xhdGUiLCJzZXRUcmFuc2l0aW9uIiwiYWxsb3dNb21lbnR1bUJvdW5jZSIsImdyYWJDdXJzb3IiLCJhbGxvd1NsaWRlTmV4dCIsImFsbG93U2xpZGVQcmV2Iiwic2V0R3JhYkN1cnNvciIsImRpZmYiLCJ0b3VjaFJhdGlvIiwiY3VycmVudFRyYW5zbGF0ZSIsImRpc2FibGVQYXJlbnRTd2lwZXIiLCJyZXNpc3RhbmNlUmF0aW8iLCJyZXNpc3RhbmNlIiwiZm9sbG93RmluZ2VyIiwiZnJlZU1vZGUiLCJ3YXRjaFNsaWRlc1Byb2dyZXNzIiwid2F0Y2hTbGlkZXNWaXNpYmlsaXR5IiwidXBkYXRlQWN0aXZlSW5kZXgiLCJ1cGRhdGVTbGlkZXNDbGFzc2VzIiwidmVsb2NpdGllcyIsInBvc2l0aW9uIiwidGltZSIsInVwZGF0ZVByb2dyZXNzIiwic2V0VHJhbnNsYXRlIiwib25Ub3VjaEVuZCIsInNsaWRlc0dyaWQiLCJzbmFwR3JpZCIsImN1cnJlbnRQb3MiLCJ0b3VjaEVuZFRpbWUiLCJ0aW1lRGlmZiIsInVwZGF0ZUNsaWNrZWRTbGlkZSIsImxhc3RDbGlja1RpbWUiLCJzbGlkZVRvIiwiYWN0aXZlSW5kZXgiLCJzbGlkZXMiLCJmcmVlTW9kZU1vbWVudHVtIiwibGFzdE1vdmVFdmVudCIsInBvcCIsInZlbG9jaXR5RXZlbnQiLCJkaXN0YW5jZSIsInZlbG9jaXR5IiwiZnJlZU1vZGVNaW5pbXVtVmVsb2NpdHkiLCJmcmVlTW9kZU1vbWVudHVtVmVsb2NpdHlSYXRpbyIsIm1vbWVudHVtRHVyYXRpb24iLCJmcmVlTW9kZU1vbWVudHVtUmF0aW8iLCJtb21lbnR1bURpc3RhbmNlIiwibmV3UG9zaXRpb24iLCJhZnRlckJvdW5jZVBvc2l0aW9uIiwibmVlZHNMb29wRml4IiwiZG9Cb3VuY2UiLCJib3VuY2VBbW91bnQiLCJmcmVlTW9kZU1vbWVudHVtQm91bmNlUmF0aW8iLCJmcmVlTW9kZU1vbWVudHVtQm91bmNlIiwiY2VudGVyZWRTbGlkZXMiLCJmcmVlTW9kZVN0aWNreSIsIm5leHRTbGlkZSIsIm9uY2UiLCJtb3ZlRGlzdGFuY2UiLCJjdXJyZW50U2xpZGVTaXplIiwic2xpZGVzU2l6ZXNHcmlkIiwic3BlZWQiLCJzbGlkZVRvQ2xvc2VzdCIsInRyYW5zaXRpb25TdGFydCIsImxvbmdTd2lwZXNNcyIsInN0b3BJbmRleCIsImdyb3VwU2l6ZSIsInNsaWRlc1Blckdyb3VwU2tpcCIsInNsaWRlc1Blckdyb3VwIiwiX2luY3JlbWVudCIsInJhdGlvIiwiaW5jcmVtZW50IiwibG9uZ1N3aXBlcyIsImxvbmdTd2lwZXNSYXRpbyIsInNob3J0U3dpcGVzIiwibmF2aWdhdGlvbiIsIm5leHRFbCIsInByZXZFbCIsIm9uUmVzaXplIiwic2V0QnJlYWtwb2ludCIsInVwZGF0ZVNsaWRlcyIsImlzRW5kIiwiaXNCZWdpbm5pbmciLCJhdXRvcGxheSIsInJ1bm5pbmciLCJwYXVzZWQiLCJydW4iLCJ3YXRjaE92ZXJmbG93IiwiY2hlY2tPdmVyZmxvdyIsIm9uQ2xpY2siLCJwcmV2ZW50Q2xpY2tzIiwicHJldmVudENsaWNrc1Byb3BhZ2F0aW9uIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwib25TY3JvbGwiLCJwcmV2aW91c1RyYW5zbGF0ZSIsInNjcm9sbFdpZHRoIiwidHJhbnNsYXRlc0RpZmYiLCJwcm9ncmVzcyIsImR1bW15RXZlbnRBdHRhY2hlZCIsImR1bW15RXZlbnRMaXN0ZW5lciIsImRpcmVjdGlvbiIsImluaXRpYWxTbGlkZSIsInVwZGF0ZU9uV2luZG93UmVzaXplIiwidXJsIiwiYXV0b0hlaWdodCIsInNldFdyYXBwZXJTaXplIiwidmlydHVhbFRyYW5zbGF0ZSIsImVmZmVjdCIsInNsaWRlc1BlckNvbHVtbiIsInNsaWRlc1BlckNvbHVtbkZpbGwiLCJjZW50ZXJlZFNsaWRlc0JvdW5kcyIsInNsaWRlc09mZnNldEJlZm9yZSIsInNsaWRlc09mZnNldEFmdGVyIiwibm9ybWFsaXplU2xpZGVJbmRleCIsImNlbnRlckluc3VmZmljaWVudFNsaWRlcyIsInJvdW5kTGVuZ3RocyIsInNpbXVsYXRlVG91Y2giLCJ1bmlxdWVOYXZFbGVtZW50cyIsInNsaWRlVG9DbGlja2VkU2xpZGUiLCJwcmVsb2FkSW1hZ2VzIiwidXBkYXRlT25JbWFnZXNSZWFkeSIsImxvb3BBZGRpdGlvbmFsU2xpZGVzIiwibG9vcGVkU2xpZGVzIiwibG9vcEZpbGxHcm91cFdpdGhCbGFuayIsImxvb3BQcmV2ZW50c1NsaWRlIiwicGFzc2l2ZUxpc3RlbmVycyIsImNvbnRhaW5lck1vZGlmaWVyQ2xhc3MiLCJzbGlkZUNsYXNzIiwic2xpZGVCbGFua0NsYXNzIiwic2xpZGVBY3RpdmVDbGFzcyIsInNsaWRlRHVwbGljYXRlQWN0aXZlQ2xhc3MiLCJzbGlkZVZpc2libGVDbGFzcyIsInNsaWRlRHVwbGljYXRlQ2xhc3MiLCJzbGlkZU5leHRDbGFzcyIsInNsaWRlRHVwbGljYXRlTmV4dENsYXNzIiwic2xpZGVQcmV2Q2xhc3MiLCJzbGlkZUR1cGxpY2F0ZVByZXZDbGFzcyIsIndyYXBwZXJDbGFzcyIsInJ1bkNhbGxiYWNrc09uSW5pdCIsIl9lbWl0Q2xhc3NlcyIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwiZGVzY3JpcHRvciIsInByb3RvdHlwZXMiLCJtb2R1bGFyIiwidXNlUGFyYW1zIiwiaW5zdGFuY2VQYXJhbXMiLCJtb2R1bGVOYW1lIiwidXNlTW9kdWxlcyIsIm1vZHVsZXNQYXJhbXMiLCJtb2R1bGVQYXJhbXMiLCJtb2R1bGVFdmVudE5hbWUiLCJldmVudHNFbWl0dGVyIiwicHJpb3JpdHkiLCJtZXRob2QiLCJldmVudHNMaXN0ZW5lcnMiLCJvbmNlSGFuZGxlciIsIl9fZW1pdHRlclByb3h5Iiwib25BbnkiLCJldmVudHNBbnlMaXN0ZW5lcnMiLCJvZmZBbnkiLCJldmVudEhhbmRsZXIiLCJzbGljZSIsImV2ZW50c0FycmF5IiwidXBkYXRlIiwiY2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJwYXJzZUludCIsIk51bWJlciIsImlzTmFOIiwic2l6ZSIsInN3aXBlclNpemUiLCJ3cm9uZ1JUTCIsImlzVmlydHVhbCIsInZpcnR1YWwiLCJlbmFibGVkIiwicHJldmlvdXNTbGlkZXNMZW5ndGgiLCJzbGlkZXNMZW5ndGgiLCJzbGlkZXNGb3JNYXJnaW4iLCJzbGlkZUVsIiwic2xpZGVJbmRleCIsIm9mZnNldEJlZm9yZSIsIm9mZnNldEFmdGVyIiwicHJldmlvdXNTbmFwR3JpZExlbmd0aCIsInByZXZpb3VzU2xpZGVzR3JpZExlbmd0aCIsInNsaWRlUG9zaXRpb24iLCJwcmV2U2xpZGVTaXplIiwic2xpZGVzTnVtYmVyRXZlblRvUm93cyIsInNsaWRlU2l6ZSIsInZpcnR1YWxTaXplIiwibWFyZ2luTGVmdCIsIm1hcmdpblRvcCIsIm1hcmdpblJpZ2h0IiwibWFyZ2luQm90dG9tIiwiZmxvb3IiLCJjZWlsIiwibWF4IiwibmV3U2xpZGVzR3JpZCIsInNsaWRlc1BlclJvdyIsIm51bUZ1bGxDb2x1bW5zIiwic2xpZGUiLCJuZXdTbGlkZU9yZGVySW5kZXgiLCJjb2x1bW4iLCJyb3ciLCJncm91cEluZGV4Iiwic2xpZGVJbmRleEluR3JvdXAiLCJjb2x1bW5zSW5Hcm91cCIsIm1pbiIsIm9yZGVyIiwic2xpZGVTdHlsZXMiLCJjdXJyZW50VHJhbnNmb3JtIiwiY3VycmVudFdlYktpdFRyYW5zZm9ybSIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0IiwiYm94U2l6aW5nIiwicGFkZGluZ1RvcCIsInBhZGRpbmdCb3R0b20iLCJfYm94U2l6aW5nIiwic3dpcGVyU2xpZGVTaXplIiwiX2kiLCJzbGlkZXNHcmlkSXRlbSIsIl9pMiIsIl9zbGlkZXNHcmlkSXRlbSIsImFsbFNsaWRlc1NpemUiLCJzbGlkZVNpemVWYWx1ZSIsIm1heFNuYXAiLCJzbmFwIiwiX2FsbFNsaWRlc1NpemUiLCJhbGxTbGlkZXNPZmZzZXQiLCJzbmFwSW5kZXgiLCJ1cGRhdGVTbGlkZXNPZmZzZXQiLCJ1cGRhdGVBdXRvSGVpZ2h0IiwiYWN0aXZlU2xpZGVzIiwibmV3SGVpZ2h0IiwidmlzaWJsZVNsaWRlcyIsInN3aXBlclNsaWRlT2Zmc2V0Iiwib2Zmc2V0TGVmdCIsIm9mZnNldFRvcCIsInVwZGF0ZVNsaWRlc1Byb2dyZXNzIiwib2Zmc2V0Q2VudGVyIiwidmlzaWJsZVNsaWRlc0luZGV4ZXMiLCJzbGlkZVByb2dyZXNzIiwic2xpZGVCZWZvcmUiLCJzbGlkZUFmdGVyIiwibXVsdGlwbGllciIsIndhc0JlZ2lubmluZyIsIndhc0VuZCIsImFjdGl2ZVNsaWRlIiwicmVhbEluZGV4IiwicHJldlNsaWRlIiwiZW1pdFNsaWRlc0NsYXNzZXMiLCJuZXdBY3RpdmVJbmRleCIsInByZXZpb3VzSW5kZXgiLCJwcmV2aW91c1JlYWxJbmRleCIsInByZXZpb3VzU25hcEluZGV4Iiwic2tpcCIsInNsaWRlRm91bmQiLCJjbGlja2VkU2xpZGUiLCJjbGlja2VkSW5kZXgiLCJieUNvbnRyb2xsZXIiLCJ4IiwieSIsInRyYW5zbGF0ZVRvIiwicnVuQ2FsbGJhY2tzIiwidHJhbnNsYXRlQm91bmRzIiwiaW50ZXJuYWwiLCJuZXdUcmFuc2xhdGUiLCJfd3JhcHBlckVsJHNjcm9sbFRvIiwiaXNIIiwic2Nyb2xsVG8iLCJiZWhhdmlvciIsIm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCIsImRpciIsIm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kIiwic2xpZGVUb0xvb3AiLCJuZXdJbmRleCIsInNsaWRlTmV4dCIsIl9jbGllbnRMZWZ0Iiwic2xpZGVQcmV2Iiwibm9ybWFsaXplIiwidmFsIiwicHJldkluZGV4Iiwibm9ybWFsaXplZFRyYW5zbGF0ZSIsIm5vcm1hbGl6ZWRTbmFwR3JpZCIsInByZXZTbmFwIiwic2xpZGVSZXNldCIsImN1cnJlbnRTbmFwIiwic2xpZGVzUGVyVmlld0R5bmFtaWMiLCJzbGlkZVRvSW5kZXgiLCJsb29wQ3JlYXRlIiwiYmxhbmtTbGlkZXNOdW0iLCJibGFua05vZGUiLCJwcmVwZW5kU2xpZGVzIiwiYXBwZW5kU2xpZGVzIiwiY2xvbmVOb2RlIiwibG9vcERlc3Ryb3kiLCJtb3ZpbmciLCJpc0xvY2tlZCIsImN1cnNvciIsInVuc2V0R3JhYkN1cnNvciIsIm1hbmlwdWxhdGlvbiIsImFwcGVuZFNsaWRlIiwicHJlcGVuZFNsaWRlIiwiYWRkU2xpZGUiLCJhY3RpdmVJbmRleEJ1ZmZlciIsImJhc2VMZW5ndGgiLCJzbGlkZXNCdWZmZXIiLCJjdXJyZW50U2xpZGUiLCJyZW1vdmVTbGlkZSIsInNsaWRlc0luZGV4ZXMiLCJpbmRleFRvUmVtb3ZlIiwicmVtb3ZlQWxsU2xpZGVzIiwiYXR0YWNoRXZlbnRzIiwidG91Y2hFdmVudHMiLCJzdGFydCIsIm1vdmUiLCJlbmQiLCJwYXNzaXZlIiwiY2FuY2VsIiwiZGV0YWNoRXZlbnRzIiwiX3N3aXBlciRsb29wZWRTbGlkZXMiLCJicmVha3BvaW50IiwiZ2V0QnJlYWtwb2ludCIsImN1cnJlbnRCcmVha3BvaW50IiwiYnJlYWtwb2ludE9ubHlQYXJhbXMiLCJwYXJhbSIsInBhcmFtVmFsdWUiLCJicmVha3BvaW50UGFyYW1zIiwib3JpZ2luYWxQYXJhbXMiLCJ3YXNNdWx0aVJvdyIsImlzTXVsdGlSb3ciLCJlbWl0Q29udGFpbmVyQ2xhc3NlcyIsImRpcmVjdGlvbkNoYW5nZWQiLCJuZWVkc1JlTG9vcCIsImNoYW5nZURpcmVjdGlvbiIsInBvaW50cyIsInBvaW50IiwibWluUmF0aW8iLCJzdWJzdHIiLCJpbm5lckhlaWdodCIsInNvcnQiLCJiIiwiX3BvaW50cyRpIiwiaW5uZXJXaWR0aCIsIndhc0xvY2tlZCIsImxhc3RTbGlkZVBvc2l0aW9uIiwiYWRkQ2xhc3NlcyIsInN1ZmZpeGVzIiwic3VmZml4IiwicmVtb3ZlQ2xhc3NlcyIsImltYWdlcyIsImxvYWRJbWFnZSIsImltYWdlRWwiLCJzcmNzZXQiLCJzaXplcyIsImNoZWNrRm9yQ29tcGxldGUiLCJpbWFnZSIsIm9uUmVhZHkiLCJjb21wbGV0ZSIsIm9ubG9hZCIsIm9uZXJyb3IiLCJpbWFnZXNMb2FkZWQiLCJpbWFnZXNUb0xvYWQiLCJjdXJyZW50U3JjIiwiZXh0ZW5kZWREZWZhdWx0cyIsIlN3aXBlciIsInByb3RvdHlwZUdyb3VwIiwicHJvdG9NZXRob2QiLCJtb2R1bGVQYXJhbU5hbWUiLCJzd2lwZXJQYXJhbXMiLCJkZWZhdWx0cyIsInBhc3NlZFBhcmFtcyIsImV2ZW50TmFtZSIsInN3aXBlcnMiLCJjb250YWluZXJFbCIsIm5ld1BhcmFtcyIsImRlc2t0b3AiLCJzaGFkb3dSb290IiwidG91Y2hFdmVudHNUb3VjaCIsInRvdWNoRXZlbnRzRGVza3RvcCIsImNsaWNrVGltZW91dCIsIkNvbnN0cnVjdG9yIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiX3Byb3RvIiwic3B2IiwiYnJlYWtMb29wIiwidHJhbnNsYXRlVmFsdWUiLCJuZXdEaXJlY3Rpb24iLCJuZWVkVXBkYXRlIiwiY3VycmVudERpcmVjdGlvbiIsImRlbGV0ZUluc3RhbmNlIiwiY2xlYW5TdHlsZXMiLCJleHRlbmREZWZhdWx0cyIsIm5ld0RlZmF1bHRzIiwiaW5zdGFsbE1vZHVsZSIsIlBhZ2luYXRpb24iLCJjdXJyZW50IiwidG90YWwiLCJwYWdpbmF0aW9uVHlwZSIsImJ1bGxldHMiLCJmaXJzdEluZGV4IiwibGFzdEluZGV4IiwibWlkSW5kZXgiLCJkeW5hbWljQnVsbGV0cyIsImJ1bGxldFNpemUiLCJkeW5hbWljTWFpbkJ1bGxldHMiLCJkeW5hbWljQnVsbGV0SW5kZXgiLCJidWxsZXRBY3RpdmVDbGFzcyIsImJ1bGxldCIsIiRidWxsZXQiLCJidWxsZXRJbmRleCIsIiRmaXJzdERpc3BsYXllZEJ1bGxldCIsIiRsYXN0RGlzcGxheWVkQnVsbGV0IiwiZHluYW1pY0J1bGxldHNMZW5ndGgiLCJidWxsZXRzT2Zmc2V0Iiwib2Zmc2V0UHJvcCIsImN1cnJlbnRDbGFzcyIsImZvcm1hdEZyYWN0aW9uQ3VycmVudCIsInRvdGFsQ2xhc3MiLCJmb3JtYXRGcmFjdGlvblRvdGFsIiwicHJvZ3Jlc3NiYXJEaXJlY3Rpb24iLCJwcm9ncmVzc2Jhck9wcG9zaXRlIiwic2NhbGUiLCJzY2FsZVgiLCJzY2FsZVkiLCJwcm9ncmVzc2JhckZpbGxDbGFzcyIsInJlbmRlckN1c3RvbSIsImxvY2tDbGFzcyIsInJlbmRlciIsInBhZ2luYXRpb25IVE1MIiwibnVtYmVyT2ZCdWxsZXRzIiwicmVuZGVyQnVsbGV0IiwiYnVsbGV0Q2xhc3MiLCJidWxsZXRFbGVtZW50IiwicmVuZGVyRnJhY3Rpb24iLCJyZW5kZXJQcm9ncmVzc2JhciIsImNsaWNrYWJsZUNsYXNzIiwibW9kaWZpZXJDbGFzcyIsInByb2dyZXNzYmFyT3Bwb3NpdGVDbGFzcyIsImhpZGRlbkNsYXNzIiwiaGlkZU9uQ2xpY2siLCJudW1iZXIiLCJhY3RpdmVJbmRleENoYW5nZSIsInNuYXBJbmRleENoYW5nZSIsInNsaWRlc0xlbmd0aENoYW5nZSIsInNuYXBHcmlkTGVuZ3RoQ2hhbmdlIiwiY2xpY2siXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FB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aEIsRUFBTzVDLFdBQVdtVCxXQUd0QmpULFFBQVMsU0FBaUIwQyxHQUN4QkEsRUFBTzVDLFdBQVdFLFdBRXBCNGtCLE1BQU8sU0FBZWxpQixFQUFRaFosR0FDeEJnWixFQUFPdUIsT0FBT25FLFdBQVc1VixJQUFNd1ksRUFBT3VCLE9BQU9uRSxXQUFXd2tCLGFBQWU1aEIsRUFBTzVDLFdBQVdzRSxJQUFJdFosT0FBUyxJQUFNLFlBQUVwQixFQUFFa0QsUUFBUWlJLFNBQVM2TixFQUFPdUIsT0FBT25FLFdBQVdna0IsZ0JBRzNJLElBRkZwaEIsRUFBTzVDLFdBQVdzRSxJQUFJdlAsU0FBUzZOLEVBQU91QixPQUFPbkUsV0FBV3VrQixhQUdyRTNoQixFQUFPSyxLQUFLLGtCQUVaTCxFQUFPSyxLQUFLLGtCQUdkTCxFQUFPNUMsV0FBV3NFLElBQUlsUCxZQUFZd04sRUFBT3VCLE9BQU9uRSxXQUFXdWtCLGtCLGlEQ2hXbkUscUNBTUE5NUIsT0FBT3lDLGlCQUFpQixPQUFRLElBQU0sWUFBYSxpQkFDbkR6QyxPQUFPeUMsaUJBQWlCLFNBQVUsSUFBTSxZQUFhLGlCQUVyRCxZQUE0QixJQUFXaVIsZUFBZ0IsSUFBV0MiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxMSk7XG4iLCJpbXBvcnQgeyBnZXRXaW5kb3cgfSBmcm9tICdzc3Itd2luZG93JztcblxuZnVuY3Rpb24gZGVsZXRlUHJvcHMob2JqKSB7XG4gIHZhciBvYmplY3QgPSBvYmo7XG4gIE9iamVjdC5rZXlzKG9iamVjdCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdHJ5IHtcbiAgICAgIG9iamVjdFtrZXldID0gbnVsbDtcbiAgICB9IGNhdGNoIChlKSB7Ly8gbm8gZ2V0dGVyIGZvciBvYmplY3RcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgZGVsZXRlIG9iamVjdFtrZXldO1xuICAgIH0gY2F0Y2ggKGUpIHsvLyBzb21ldGhpbmcgZ290IHdyb25nXG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gbmV4dFRpY2soY2FsbGJhY2ssIGRlbGF5KSB7XG4gIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7XG4gICAgZGVsYXkgPSAwO1xuICB9XG5cbiAgcmV0dXJuIHNldFRpbWVvdXQoY2FsbGJhY2ssIGRlbGF5KTtcbn1cblxuZnVuY3Rpb24gbm93KCkge1xuICByZXR1cm4gRGF0ZS5ub3coKTtcbn1cblxuZnVuY3Rpb24gZ2V0VHJhbnNsYXRlKGVsLCBheGlzKSB7XG4gIGlmIChheGlzID09PSB2b2lkIDApIHtcbiAgICBheGlzID0gJ3gnO1xuICB9XG5cbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICB2YXIgbWF0cml4O1xuICB2YXIgY3VyVHJhbnNmb3JtO1xuICB2YXIgdHJhbnNmb3JtTWF0cml4O1xuICB2YXIgY3VyU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCwgbnVsbCk7XG5cbiAgaWYgKHdpbmRvdy5XZWJLaXRDU1NNYXRyaXgpIHtcbiAgICBjdXJUcmFuc2Zvcm0gPSBjdXJTdHlsZS50cmFuc2Zvcm0gfHwgY3VyU3R5bGUud2Via2l0VHJhbnNmb3JtO1xuXG4gICAgaWYgKGN1clRyYW5zZm9ybS5zcGxpdCgnLCcpLmxlbmd0aCA+IDYpIHtcbiAgICAgIGN1clRyYW5zZm9ybSA9IGN1clRyYW5zZm9ybS5zcGxpdCgnLCAnKS5tYXAoZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgcmV0dXJuIGEucmVwbGFjZSgnLCcsICcuJyk7XG4gICAgICB9KS5qb2luKCcsICcpO1xuICAgIH0gLy8gU29tZSBvbGQgdmVyc2lvbnMgb2YgV2Via2l0IGNob2tlIHdoZW4gJ25vbmUnIGlzIHBhc3NlZDsgcGFzc1xuICAgIC8vIGVtcHR5IHN0cmluZyBpbnN0ZWFkIGluIHRoaXMgY2FzZVxuXG5cbiAgICB0cmFuc2Zvcm1NYXRyaXggPSBuZXcgd2luZG93LldlYktpdENTU01hdHJpeChjdXJUcmFuc2Zvcm0gPT09ICdub25lJyA/ICcnIDogY3VyVHJhbnNmb3JtKTtcbiAgfSBlbHNlIHtcbiAgICB0cmFuc2Zvcm1NYXRyaXggPSBjdXJTdHlsZS5Nb3pUcmFuc2Zvcm0gfHwgY3VyU3R5bGUuT1RyYW5zZm9ybSB8fCBjdXJTdHlsZS5Nc1RyYW5zZm9ybSB8fCBjdXJTdHlsZS5tc1RyYW5zZm9ybSB8fCBjdXJTdHlsZS50cmFuc2Zvcm0gfHwgY3VyU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgndHJhbnNmb3JtJykucmVwbGFjZSgndHJhbnNsYXRlKCcsICdtYXRyaXgoMSwgMCwgMCwgMSwnKTtcbiAgICBtYXRyaXggPSB0cmFuc2Zvcm1NYXRyaXgudG9TdHJpbmcoKS5zcGxpdCgnLCcpO1xuICB9XG5cbiAgaWYgKGF4aXMgPT09ICd4Jykge1xuICAgIC8vIExhdGVzdCBDaHJvbWUgYW5kIHdlYmtpdHMgRml4XG4gICAgaWYgKHdpbmRvdy5XZWJLaXRDU1NNYXRyaXgpIGN1clRyYW5zZm9ybSA9IHRyYW5zZm9ybU1hdHJpeC5tNDE7IC8vIENyYXp5IElFMTAgTWF0cml4XG4gICAgZWxzZSBpZiAobWF0cml4Lmxlbmd0aCA9PT0gMTYpIGN1clRyYW5zZm9ybSA9IHBhcnNlRmxvYXQobWF0cml4WzEyXSk7IC8vIE5vcm1hbCBCcm93c2Vyc1xuICAgICAgZWxzZSBjdXJUcmFuc2Zvcm0gPSBwYXJzZUZsb2F0KG1hdHJpeFs0XSk7XG4gIH1cblxuICBpZiAoYXhpcyA9PT0gJ3knKSB7XG4gICAgLy8gTGF0ZXN0IENocm9tZSBhbmQgd2Via2l0cyBGaXhcbiAgICBpZiAod2luZG93LldlYktpdENTU01hdHJpeCkgY3VyVHJhbnNmb3JtID0gdHJhbnNmb3JtTWF0cml4Lm00MjsgLy8gQ3JhenkgSUUxMCBNYXRyaXhcbiAgICBlbHNlIGlmIChtYXRyaXgubGVuZ3RoID09PSAxNikgY3VyVHJhbnNmb3JtID0gcGFyc2VGbG9hdChtYXRyaXhbMTNdKTsgLy8gTm9ybWFsIEJyb3dzZXJzXG4gICAgICBlbHNlIGN1clRyYW5zZm9ybSA9IHBhcnNlRmxvYXQobWF0cml4WzVdKTtcbiAgfVxuXG4gIHJldHVybiBjdXJUcmFuc2Zvcm0gfHwgMDtcbn1cblxuZnVuY3Rpb24gaXNPYmplY3Qobykge1xuICByZXR1cm4gdHlwZW9mIG8gPT09ICdvYmplY3QnICYmIG8gIT09IG51bGwgJiYgby5jb25zdHJ1Y3RvciAmJiBvLmNvbnN0cnVjdG9yID09PSBPYmplY3Q7XG59XG5cbmZ1bmN0aW9uIGV4dGVuZCgpIHtcbiAgdmFyIHRvID0gT2JqZWN0KGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXSk7XG5cbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB2YXIgbmV4dFNvdXJjZSA9IGkgPCAwIHx8IGFyZ3VtZW50cy5sZW5ndGggPD0gaSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1tpXTtcblxuICAgIGlmIChuZXh0U291cmNlICE9PSB1bmRlZmluZWQgJiYgbmV4dFNvdXJjZSAhPT0gbnVsbCkge1xuICAgICAgdmFyIGtleXNBcnJheSA9IE9iamVjdC5rZXlzKE9iamVjdChuZXh0U291cmNlKSk7XG5cbiAgICAgIGZvciAodmFyIG5leHRJbmRleCA9IDAsIGxlbiA9IGtleXNBcnJheS5sZW5ndGg7IG5leHRJbmRleCA8IGxlbjsgbmV4dEluZGV4ICs9IDEpIHtcbiAgICAgICAgdmFyIG5leHRLZXkgPSBrZXlzQXJyYXlbbmV4dEluZGV4XTtcbiAgICAgICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG5leHRTb3VyY2UsIG5leHRLZXkpO1xuXG4gICAgICAgIGlmIChkZXNjICE9PSB1bmRlZmluZWQgJiYgZGVzYy5lbnVtZXJhYmxlKSB7XG4gICAgICAgICAgaWYgKGlzT2JqZWN0KHRvW25leHRLZXldKSAmJiBpc09iamVjdChuZXh0U291cmNlW25leHRLZXldKSkge1xuICAgICAgICAgICAgZXh0ZW5kKHRvW25leHRLZXldLCBuZXh0U291cmNlW25leHRLZXldKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCFpc09iamVjdCh0b1tuZXh0S2V5XSkgJiYgaXNPYmplY3QobmV4dFNvdXJjZVtuZXh0S2V5XSkpIHtcbiAgICAgICAgICAgIHRvW25leHRLZXldID0ge307XG4gICAgICAgICAgICBleHRlbmQodG9bbmV4dEtleV0sIG5leHRTb3VyY2VbbmV4dEtleV0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0b1tuZXh0S2V5XSA9IG5leHRTb3VyY2VbbmV4dEtleV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRvO1xufVxuXG5mdW5jdGlvbiBiaW5kTW9kdWxlTWV0aG9kcyhpbnN0YW5jZSwgb2JqKSB7XG4gIE9iamVjdC5rZXlzKG9iaikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKGlzT2JqZWN0KG9ialtrZXldKSkge1xuICAgICAgT2JqZWN0LmtleXMob2JqW2tleV0pLmZvckVhY2goZnVuY3Rpb24gKHN1YktleSkge1xuICAgICAgICBpZiAodHlwZW9mIG9ialtrZXldW3N1YktleV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBvYmpba2V5XVtzdWJLZXldID0gb2JqW2tleV1bc3ViS2V5XS5iaW5kKGluc3RhbmNlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaW5zdGFuY2Vba2V5XSA9IG9ialtrZXldO1xuICB9KTtcbn1cblxuZXhwb3J0IHsgZGVsZXRlUHJvcHMsIG5leHRUaWNrLCBub3csIGdldFRyYW5zbGF0ZSwgaXNPYmplY3QsIGV4dGVuZCwgYmluZE1vZHVsZU1ldGhvZHMgfTsiLCIvKipcbiAqIFNTUiBXaW5kb3cgMy4wLjAtYWxwaGEuNFxuICogQmV0dGVyIGhhbmRsaW5nIGZvciB3aW5kb3cgb2JqZWN0IGluIFNTUiBlbnZpcm9ubWVudFxuICogaHR0cHM6Ly9naXRodWIuY29tL25vbGltaXRzNHdlYi9zc3Itd2luZG93XG4gKlxuICogQ29weXJpZ2h0IDIwMjAsIFZsYWRpbWlyIEtoYXJsYW1waWRpXG4gKlxuICogTGljZW5zZWQgdW5kZXIgTUlUXG4gKlxuICogUmVsZWFzZWQgb246IE1heSAyMCwgMjAyMFxuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wYXJhbS1yZWFzc2lnbiAqL1xuZnVuY3Rpb24gaXNPYmplY3Qob2JqKSB7XG4gICAgcmV0dXJuIChvYmogIT09IG51bGwgJiZcbiAgICAgICAgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgJ2NvbnN0cnVjdG9yJyBpbiBvYmogJiZcbiAgICAgICAgb2JqLmNvbnN0cnVjdG9yID09PSBPYmplY3QpO1xufVxuZnVuY3Rpb24gZXh0ZW5kKHRhcmdldCwgc3JjKSB7XG4gICAgaWYgKHRhcmdldCA9PT0gdm9pZCAwKSB7IHRhcmdldCA9IHt9OyB9XG4gICAgaWYgKHNyYyA9PT0gdm9pZCAwKSB7IHNyYyA9IHt9OyB9XG4gICAgT2JqZWN0LmtleXMoc3JjKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXRba2V5XSA9PT0gJ3VuZGVmaW5lZCcpXG4gICAgICAgICAgICB0YXJnZXRba2V5XSA9IHNyY1trZXldO1xuICAgICAgICBlbHNlIGlmIChpc09iamVjdChzcmNba2V5XSkgJiZcbiAgICAgICAgICAgIGlzT2JqZWN0KHRhcmdldFtrZXldKSAmJlxuICAgICAgICAgICAgT2JqZWN0LmtleXMoc3JjW2tleV0pLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGV4dGVuZCh0YXJnZXRba2V5XSwgc3JjW2tleV0pO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5cbnZhciBzc3JEb2N1bWVudCA9IHtcbiAgICBib2R5OiB7fSxcbiAgICBhZGRFdmVudExpc3RlbmVyOiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gKCkgeyB9LFxuICAgIGFjdGl2ZUVsZW1lbnQ6IHtcbiAgICAgICAgYmx1cjogZnVuY3Rpb24gKCkgeyB9LFxuICAgICAgICBub2RlTmFtZTogJycsXG4gICAgfSxcbiAgICBxdWVyeVNlbGVjdG9yOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0sXG4gICAgcXVlcnlTZWxlY3RvckFsbDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfSxcbiAgICBnZXRFbGVtZW50QnlJZDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuICAgIGNyZWF0ZUV2ZW50OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpbml0RXZlbnQ6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIGNyZWF0ZUVsZW1lbnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNoaWxkcmVuOiBbXSxcbiAgICAgICAgICAgIGNoaWxkTm9kZXM6IFtdLFxuICAgICAgICAgICAgc3R5bGU6IHt9LFxuICAgICAgICAgICAgc2V0QXR0cmlidXRlOiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgICAgICAgICBnZXRFbGVtZW50c0J5VGFnTmFtZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBjcmVhdGVFbGVtZW50TlM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgIH0sXG4gICAgaW1wb3J0Tm9kZTogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuICAgIGxvY2F0aW9uOiB7XG4gICAgICAgIGhhc2g6ICcnLFxuICAgICAgICBob3N0OiAnJyxcbiAgICAgICAgaG9zdG5hbWU6ICcnLFxuICAgICAgICBocmVmOiAnJyxcbiAgICAgICAgb3JpZ2luOiAnJyxcbiAgICAgICAgcGF0aG5hbWU6ICcnLFxuICAgICAgICBwcm90b2NvbDogJycsXG4gICAgICAgIHNlYXJjaDogJycsXG4gICAgfSxcbn07XG5mdW5jdGlvbiBnZXREb2N1bWVudCgpIHtcbiAgICB2YXIgZG9jID0gdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyA/IGRvY3VtZW50IDoge307XG4gICAgZXh0ZW5kKGRvYywgc3NyRG9jdW1lbnQpO1xuICAgIHJldHVybiBkb2M7XG59XG5cbnZhciBzc3JXaW5kb3cgPSB7XG4gICAgZG9jdW1lbnQ6IHNzckRvY3VtZW50LFxuICAgIG5hdmlnYXRvcjoge1xuICAgICAgICB1c2VyQWdlbnQ6ICcnLFxuICAgIH0sXG4gICAgbG9jYXRpb246IHtcbiAgICAgICAgaGFzaDogJycsXG4gICAgICAgIGhvc3Q6ICcnLFxuICAgICAgICBob3N0bmFtZTogJycsXG4gICAgICAgIGhyZWY6ICcnLFxuICAgICAgICBvcmlnaW46ICcnLFxuICAgICAgICBwYXRobmFtZTogJycsXG4gICAgICAgIHByb3RvY29sOiAnJyxcbiAgICAgICAgc2VhcmNoOiAnJyxcbiAgICB9LFxuICAgIGhpc3Rvcnk6IHtcbiAgICAgICAgcmVwbGFjZVN0YXRlOiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgICAgIHB1c2hTdGF0ZTogZnVuY3Rpb24gKCkgeyB9LFxuICAgICAgICBnbzogZnVuY3Rpb24gKCkgeyB9LFxuICAgICAgICBiYWNrOiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgfSxcbiAgICBDdXN0b21FdmVudDogZnVuY3Rpb24gQ3VzdG9tRXZlbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgYWRkRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gKCkgeyB9LFxuICAgIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICBnZXRDb21wdXRlZFN0eWxlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBnZXRQcm9wZXJ0eVZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIEltYWdlOiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgRGF0ZTogZnVuY3Rpb24gKCkgeyB9LFxuICAgIHNjcmVlbjoge30sXG4gICAgc2V0VGltZW91dDogZnVuY3Rpb24gKCkgeyB9LFxuICAgIGNsZWFyVGltZW91dDogZnVuY3Rpb24gKCkgeyB9LFxuICAgIG1hdGNoTWVkaWE6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgIH0sXG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGNhbGxiYWNrLCAwKTtcbiAgICB9LFxuICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lOiBmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNsZWFyVGltZW91dChpZCk7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBnZXRXaW5kb3coKSB7XG4gICAgdmFyIHdpbiA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDoge307XG4gICAgZXh0ZW5kKHdpbiwgc3NyV2luZG93KTtcbiAgICByZXR1cm4gd2luO1xufVxuXG5leHBvcnQgeyBleHRlbmQsIGdldERvY3VtZW50LCBnZXRXaW5kb3csIHNzckRvY3VtZW50LCBzc3JXaW5kb3cgfTtcbiIsIi8qKlxuICogRG9tNyAzLjAuMC1hbHBoYS43XG4gKiBNaW5pbWFsaXN0aWMgSmF2YVNjcmlwdCBsaWJyYXJ5IGZvciBET00gbWFuaXB1bGF0aW9uLCB3aXRoIGEgalF1ZXJ5LWNvbXBhdGlibGUgQVBJXG4gKiBodHRwczovL2ZyYW1ld29yazcuaW8vZG9jcy9kb203Lmh0bWxcbiAqXG4gKiBDb3B5cmlnaHQgMjAyMCwgVmxhZGltaXIgS2hhcmxhbXBpZGlcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciBNSVRcbiAqXG4gKiBSZWxlYXNlZCBvbjogSnVseSAxNCwgMjAyMFxuICovXG5pbXBvcnQgeyBnZXRXaW5kb3csIGdldERvY3VtZW50IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG5cbmZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpO1xuICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcbiAgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgICByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pO1xuICB9O1xuICByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pO1xufVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgICBvLl9fcHJvdG9fXyA9IHA7XG4gICAgcmV0dXJuIG87XG4gIH07XG5cbiAgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTtcbn1cblxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHtcbiAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlO1xuICBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlO1xuICBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlO1xuXG4gIHRyeSB7XG4gICAgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfY29uc3RydWN0KFBhcmVudCwgYXJncywgQ2xhc3MpIHtcbiAgaWYgKF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSkge1xuICAgIF9jb25zdHJ1Y3QgPSBSZWZsZWN0LmNvbnN0cnVjdDtcbiAgfSBlbHNlIHtcbiAgICBfY29uc3RydWN0ID0gZnVuY3Rpb24gX2NvbnN0cnVjdChQYXJlbnQsIGFyZ3MsIENsYXNzKSB7XG4gICAgICB2YXIgYSA9IFtudWxsXTtcbiAgICAgIGEucHVzaC5hcHBseShhLCBhcmdzKTtcbiAgICAgIHZhciBDb25zdHJ1Y3RvciA9IEZ1bmN0aW9uLmJpbmQuYXBwbHkoUGFyZW50LCBhKTtcbiAgICAgIHZhciBpbnN0YW5jZSA9IG5ldyBDb25zdHJ1Y3RvcigpO1xuICAgICAgaWYgKENsYXNzKSBfc2V0UHJvdG90eXBlT2YoaW5zdGFuY2UsIENsYXNzLnByb3RvdHlwZSk7XG4gICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBfY29uc3RydWN0LmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIF9pc05hdGl2ZUZ1bmN0aW9uKGZuKSB7XG4gIHJldHVybiBGdW5jdGlvbi50b1N0cmluZy5jYWxsKGZuKS5pbmRleE9mKFwiW25hdGl2ZSBjb2RlXVwiKSAhPT0gLTE7XG59XG5cbmZ1bmN0aW9uIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpIHtcbiAgdmFyIF9jYWNoZSA9IHR5cGVvZiBNYXAgPT09IFwiZnVuY3Rpb25cIiA/IG5ldyBNYXAoKSA6IHVuZGVmaW5lZDtcblxuICBfd3JhcE5hdGl2ZVN1cGVyID0gZnVuY3Rpb24gX3dyYXBOYXRpdmVTdXBlcihDbGFzcykge1xuICAgIGlmIChDbGFzcyA9PT0gbnVsbCB8fCAhX2lzTmF0aXZlRnVuY3Rpb24oQ2xhc3MpKSByZXR1cm4gQ2xhc3M7XG5cbiAgICBpZiAodHlwZW9mIENsYXNzICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIF9jYWNoZSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgaWYgKF9jYWNoZS5oYXMoQ2xhc3MpKSByZXR1cm4gX2NhY2hlLmdldChDbGFzcyk7XG5cbiAgICAgIF9jYWNoZS5zZXQoQ2xhc3MsIFdyYXBwZXIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIFdyYXBwZXIoKSB7XG4gICAgICByZXR1cm4gX2NvbnN0cnVjdChDbGFzcywgYXJndW1lbnRzLCBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3IpO1xuICAgIH1cblxuICAgIFdyYXBwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShDbGFzcy5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBXcmFwcGVyLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBfc2V0UHJvdG90eXBlT2YoV3JhcHBlciwgQ2xhc3MpO1xuICB9O1xuXG4gIHJldHVybiBfd3JhcE5hdGl2ZVN1cGVyKENsYXNzKTtcbn1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gc2VsZjtcbn1cblxuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbmZ1bmN0aW9uIG1ha2VSZWFjdGl2ZShvYmopIHtcbiAgdmFyIHByb3RvID0gb2JqLl9fcHJvdG9fXztcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgJ19fcHJvdG9fXycsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBwcm90bztcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICBwcm90by5fX3Byb3RvX18gPSB2YWx1ZTtcbiAgICB9XG4gIH0pO1xufVxuXG52YXIgRG9tNyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0FycmF5KSB7XG4gIF9pbmhlcml0c0xvb3NlKERvbTcsIF9BcnJheSk7XG5cbiAgZnVuY3Rpb24gRG9tNyhpdGVtcykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX0FycmF5LmNhbGwuYXBwbHkoX0FycmF5LCBbdGhpc10uY29uY2F0KGl0ZW1zKSkgfHwgdGhpcztcbiAgICBtYWtlUmVhY3RpdmUoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHJldHVybiBEb203O1xufSggLyojX19QVVJFX18qL193cmFwTmF0aXZlU3VwZXIoQXJyYXkpKTtcblxuZnVuY3Rpb24gYXJyYXlGbGF0KGFycikge1xuICBpZiAoYXJyID09PSB2b2lkIDApIHtcbiAgICBhcnIgPSBbXTtcbiAgfVxuXG4gIHZhciByZXMgPSBbXTtcbiAgYXJyLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZWwpKSB7XG4gICAgICByZXMucHVzaC5hcHBseShyZXMsIGFycmF5RmxhdChlbCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXMucHVzaChlbCk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlcztcbn1cbmZ1bmN0aW9uIGFycmF5RmlsdGVyKGFyciwgY2FsbGJhY2spIHtcbiAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5maWx0ZXIuY2FsbChhcnIsIGNhbGxiYWNrKTtcbn1cbmZ1bmN0aW9uIGFycmF5VW5pcXVlKGFycikge1xuICB2YXIgdW5pcXVlQXJyYXkgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmICh1bmlxdWVBcnJheS5pbmRleE9mKGFycltpXSkgPT09IC0xKSB1bmlxdWVBcnJheS5wdXNoKGFycltpXSk7XG4gIH1cblxuICByZXR1cm4gdW5pcXVlQXJyYXk7XG59XG5mdW5jdGlvbiB0b0NhbWVsQ2FzZShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoLy0oLikvZywgZnVuY3Rpb24gKG1hdGNoLCBncm91cCkge1xuICAgIHJldHVybiBncm91cC50b1VwcGVyQ2FzZSgpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gcXNhKHNlbGVjdG9yLCBjb250ZXh0KSB7XG4gIGlmICh0eXBlb2Ygc2VsZWN0b3IgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIFtzZWxlY3Rvcl07XG4gIH1cblxuICB2YXIgYSA9IFtdO1xuICB2YXIgcmVzID0gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHJlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGEucHVzaChyZXNbaV0pO1xuICB9XG5cbiAgcmV0dXJuIGE7XG59XG5cbmZ1bmN0aW9uICQoc2VsZWN0b3IsIGNvbnRleHQpIHtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICB2YXIgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICB2YXIgYXJyID0gW107XG5cbiAgaWYgKCFjb250ZXh0ICYmIHNlbGVjdG9yIGluc3RhbmNlb2YgRG9tNykge1xuICAgIHJldHVybiBzZWxlY3RvcjtcbiAgfVxuXG4gIGlmICghc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gbmV3IERvbTcoYXJyKTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygc2VsZWN0b3IgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIGh0bWwgPSBzZWxlY3Rvci50cmltKCk7XG5cbiAgICBpZiAoaHRtbC5pbmRleE9mKCc8JykgPj0gMCAmJiBodG1sLmluZGV4T2YoJz4nKSA+PSAwKSB7XG4gICAgICB2YXIgdG9DcmVhdGUgPSAnZGl2JztcbiAgICAgIGlmIChodG1sLmluZGV4T2YoJzxsaScpID09PSAwKSB0b0NyZWF0ZSA9ICd1bCc7XG4gICAgICBpZiAoaHRtbC5pbmRleE9mKCc8dHInKSA9PT0gMCkgdG9DcmVhdGUgPSAndGJvZHknO1xuICAgICAgaWYgKGh0bWwuaW5kZXhPZignPHRkJykgPT09IDAgfHwgaHRtbC5pbmRleE9mKCc8dGgnKSA9PT0gMCkgdG9DcmVhdGUgPSAndHInO1xuICAgICAgaWYgKGh0bWwuaW5kZXhPZignPHRib2R5JykgPT09IDApIHRvQ3JlYXRlID0gJ3RhYmxlJztcbiAgICAgIGlmIChodG1sLmluZGV4T2YoJzxvcHRpb24nKSA9PT0gMCkgdG9DcmVhdGUgPSAnc2VsZWN0JztcbiAgICAgIHZhciB0ZW1wUGFyZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0b0NyZWF0ZSk7XG4gICAgICB0ZW1wUGFyZW50LmlubmVySFRNTCA9IGh0bWw7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGVtcFBhcmVudC5jaGlsZE5vZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGFyci5wdXNoKHRlbXBQYXJlbnQuY2hpbGROb2Rlc1tpXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGFyciA9IHFzYShzZWxlY3Rvci50cmltKCksIGNvbnRleHQgfHwgZG9jdW1lbnQpO1xuICAgIH0gLy8gYXJyID0gcXNhKHNlbGVjdG9yLCBkb2N1bWVudCk7XG5cbiAgfSBlbHNlIGlmIChzZWxlY3Rvci5ub2RlVHlwZSB8fCBzZWxlY3RvciA9PT0gd2luZG93IHx8IHNlbGVjdG9yID09PSBkb2N1bWVudCkge1xuICAgIGFyci5wdXNoKHNlbGVjdG9yKTtcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHNlbGVjdG9yKSkge1xuICAgIGlmIChzZWxlY3RvciBpbnN0YW5jZW9mIERvbTcpIHJldHVybiBzZWxlY3RvcjtcbiAgICBhcnIgPSBzZWxlY3RvcjtcbiAgfVxuXG4gIHJldHVybiBuZXcgRG9tNyhhcnJheVVuaXF1ZShhcnIpKTtcbn1cblxuJC5mbiA9IERvbTcucHJvdG90eXBlO1xuXG5mdW5jdGlvbiBhZGRDbGFzcygpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGNsYXNzZXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgY2xhc3Nlc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHZhciBjbGFzc05hbWVzID0gYXJyYXlGbGF0KGNsYXNzZXMubWFwKGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuIGMuc3BsaXQoJyAnKTtcbiAgfSkpO1xuICB0aGlzLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgdmFyIF9lbCRjbGFzc0xpc3Q7XG5cbiAgICAoX2VsJGNsYXNzTGlzdCA9IGVsLmNsYXNzTGlzdCkuYWRkLmFwcGx5KF9lbCRjbGFzc0xpc3QsIGNsYXNzTmFtZXMpO1xuICB9KTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUNsYXNzKCkge1xuICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGNsYXNzZXMgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICBjbGFzc2VzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gIH1cblxuICB2YXIgY2xhc3NOYW1lcyA9IGFycmF5RmxhdChjbGFzc2VzLm1hcChmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiBjLnNwbGl0KCcgJyk7XG4gIH0pKTtcbiAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgIHZhciBfZWwkY2xhc3NMaXN0MjtcblxuICAgIChfZWwkY2xhc3NMaXN0MiA9IGVsLmNsYXNzTGlzdCkucmVtb3ZlLmFwcGx5KF9lbCRjbGFzc0xpc3QyLCBjbGFzc05hbWVzKTtcbiAgfSk7XG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiB0b2dnbGVDbGFzcygpIHtcbiAgZm9yICh2YXIgX2xlbjMgPSBhcmd1bWVudHMubGVuZ3RoLCBjbGFzc2VzID0gbmV3IEFycmF5KF9sZW4zKSwgX2tleTMgPSAwOyBfa2V5MyA8IF9sZW4zOyBfa2V5MysrKSB7XG4gICAgY2xhc3Nlc1tfa2V5M10gPSBhcmd1bWVudHNbX2tleTNdO1xuICB9XG5cbiAgdmFyIGNsYXNzTmFtZXMgPSBhcnJheUZsYXQoY2xhc3Nlcy5tYXAoZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gYy5zcGxpdCgnICcpO1xuICB9KSk7XG4gIHRoaXMuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICBjbGFzc05hbWVzLmZvckVhY2goZnVuY3Rpb24gKGNsYXNzTmFtZSkge1xuICAgICAgZWwuY2xhc3NMaXN0LnRvZ2dsZShjbGFzc05hbWUpO1xuICAgIH0pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gaGFzQ2xhc3MoKSB7XG4gIGZvciAodmFyIF9sZW40ID0gYXJndW1lbnRzLmxlbmd0aCwgY2xhc3NlcyA9IG5ldyBBcnJheShfbGVuNCksIF9rZXk0ID0gMDsgX2tleTQgPCBfbGVuNDsgX2tleTQrKykge1xuICAgIGNsYXNzZXNbX2tleTRdID0gYXJndW1lbnRzW19rZXk0XTtcbiAgfVxuXG4gIHZhciBjbGFzc05hbWVzID0gYXJyYXlGbGF0KGNsYXNzZXMubWFwKGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuIGMuc3BsaXQoJyAnKTtcbiAgfSkpO1xuICByZXR1cm4gYXJyYXlGaWx0ZXIodGhpcywgZnVuY3Rpb24gKGVsKSB7XG4gICAgcmV0dXJuIGNsYXNzTmFtZXMuZmlsdGVyKGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgICAgIHJldHVybiBlbC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKTtcbiAgICB9KS5sZW5ndGggPiAwO1xuICB9KS5sZW5ndGggPiAwO1xufVxuXG5mdW5jdGlvbiBhdHRyKGF0dHJzLCB2YWx1ZSkge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSAmJiB0eXBlb2YgYXR0cnMgPT09ICdzdHJpbmcnKSB7XG4gICAgLy8gR2V0IGF0dHJcbiAgICBpZiAodGhpc1swXSkgcmV0dXJuIHRoaXNbMF0uZ2V0QXR0cmlidXRlKGF0dHJzKTtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9IC8vIFNldCBhdHRyc1xuXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHtcbiAgICAgIC8vIFN0cmluZ1xuICAgICAgdGhpc1tpXS5zZXRBdHRyaWJ1dGUoYXR0cnMsIHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gT2JqZWN0XG4gICAgICBmb3IgKHZhciBhdHRyTmFtZSBpbiBhdHRycykge1xuICAgICAgICB0aGlzW2ldW2F0dHJOYW1lXSA9IGF0dHJzW2F0dHJOYW1lXTtcbiAgICAgICAgdGhpc1tpXS5zZXRBdHRyaWJ1dGUoYXR0ck5hbWUsIGF0dHJzW2F0dHJOYW1lXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUF0dHIoYXR0cikge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB0aGlzW2ldLnJlbW92ZUF0dHJpYnV0ZShhdHRyKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBwcm9wKHByb3BzLCB2YWx1ZSkge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSAmJiB0eXBlb2YgcHJvcHMgPT09ICdzdHJpbmcnKSB7XG4gICAgLy8gR2V0IHByb3BcbiAgICBpZiAodGhpc1swXSkgcmV0dXJuIHRoaXNbMF1bcHJvcHNdO1xuICB9IGVsc2Uge1xuICAgIC8vIFNldCBwcm9wc1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgLy8gU3RyaW5nXG4gICAgICAgIHRoaXNbaV1bcHJvcHNdID0gdmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBPYmplY3RcbiAgICAgICAgZm9yICh2YXIgcHJvcE5hbWUgaW4gcHJvcHMpIHtcbiAgICAgICAgICB0aGlzW2ldW3Byb3BOYW1lXSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIGRhdGEoa2V5LCB2YWx1ZSkge1xuICB2YXIgZWw7XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBlbCA9IHRoaXNbMF07XG4gICAgaWYgKCFlbCkgcmV0dXJuIHVuZGVmaW5lZDsgLy8gR2V0IHZhbHVlXG5cbiAgICBpZiAoZWwuZG9tN0VsZW1lbnREYXRhU3RvcmFnZSAmJiBrZXkgaW4gZWwuZG9tN0VsZW1lbnREYXRhU3RvcmFnZSkge1xuICAgICAgcmV0dXJuIGVsLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2Vba2V5XTtcbiAgICB9XG5cbiAgICB2YXIgZGF0YUtleSA9IGVsLmdldEF0dHJpYnV0ZShcImRhdGEtXCIgKyBrZXkpO1xuXG4gICAgaWYgKGRhdGFLZXkpIHtcbiAgICAgIHJldHVybiBkYXRhS2V5O1xuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH0gLy8gU2V0IHZhbHVlXG5cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBlbCA9IHRoaXNbaV07XG4gICAgaWYgKCFlbC5kb203RWxlbWVudERhdGFTdG9yYWdlKSBlbC5kb203RWxlbWVudERhdGFTdG9yYWdlID0ge307XG4gICAgZWwuZG9tN0VsZW1lbnREYXRhU3RvcmFnZVtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gcmVtb3ZlRGF0YShrZXkpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdmFyIGVsID0gdGhpc1tpXTtcblxuICAgIGlmIChlbC5kb203RWxlbWVudERhdGFTdG9yYWdlICYmIGVsLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2Vba2V5XSkge1xuICAgICAgZWwuZG9tN0VsZW1lbnREYXRhU3RvcmFnZVtrZXldID0gbnVsbDtcbiAgICAgIGRlbGV0ZSBlbC5kb203RWxlbWVudERhdGFTdG9yYWdlW2tleV07XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGRhdGFzZXQoKSB7XG4gIHZhciBlbCA9IHRoaXNbMF07XG4gIGlmICghZWwpIHJldHVybiB1bmRlZmluZWQ7XG4gIHZhciBkYXRhc2V0ID0ge307IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICBpZiAoZWwuZGF0YXNldCkge1xuICAgIGZvciAodmFyIGRhdGFLZXkgaW4gZWwuZGF0YXNldCkge1xuICAgICAgZGF0YXNldFtkYXRhS2V5XSA9IGVsLmRhdGFzZXRbZGF0YUtleV07XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWwuYXR0cmlidXRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgdmFyIF9hdHRyID0gZWwuYXR0cmlidXRlc1tpXTtcblxuICAgICAgaWYgKF9hdHRyLm5hbWUuaW5kZXhPZignZGF0YS0nKSA+PSAwKSB7XG4gICAgICAgIGRhdGFzZXRbdG9DYW1lbENhc2UoX2F0dHIubmFtZS5zcGxpdCgnZGF0YS0nKVsxXSldID0gX2F0dHIudmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIga2V5IGluIGRhdGFzZXQpIHtcbiAgICBpZiAoZGF0YXNldFtrZXldID09PSAnZmFsc2UnKSBkYXRhc2V0W2tleV0gPSBmYWxzZTtlbHNlIGlmIChkYXRhc2V0W2tleV0gPT09ICd0cnVlJykgZGF0YXNldFtrZXldID0gdHJ1ZTtlbHNlIGlmIChwYXJzZUZsb2F0KGRhdGFzZXRba2V5XSkgPT09IGRhdGFzZXRba2V5XSAqIDEpIGRhdGFzZXRba2V5XSAqPSAxO1xuICB9XG5cbiAgcmV0dXJuIGRhdGFzZXQ7XG59XG5cbmZ1bmN0aW9uIHZhbCh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJykge1xuICAgIC8vIGdldCB2YWx1ZVxuICAgIHZhciBlbCA9IHRoaXNbMF07XG4gICAgaWYgKCFlbCkgcmV0dXJuIHVuZGVmaW5lZDtcblxuICAgIGlmIChlbC5tdWx0aXBsZSAmJiBlbC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnc2VsZWN0Jykge1xuICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsLnNlbGVjdGVkT3B0aW9ucy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB2YWx1ZXMucHVzaChlbC5zZWxlY3RlZE9wdGlvbnNbaV0udmFsdWUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdmFsdWVzO1xuICAgIH1cblxuICAgIHJldHVybiBlbC52YWx1ZTtcbiAgfSAvLyBzZXQgdmFsdWVcblxuXG4gIGZvciAodmFyIF9pID0gMDsgX2kgPCB0aGlzLmxlbmd0aDsgX2kgKz0gMSkge1xuICAgIHZhciBfZWwgPSB0aGlzW19pXTtcblxuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSAmJiBfZWwubXVsdGlwbGUgJiYgX2VsLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdzZWxlY3QnKSB7XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IF9lbC5vcHRpb25zLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgIF9lbC5vcHRpb25zW2pdLnNlbGVjdGVkID0gdmFsdWUuaW5kZXhPZihfZWwub3B0aW9uc1tqXS52YWx1ZSkgPj0gMDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgX2VsLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHZhbHVlKHZhbHVlKSB7XG4gIHJldHVybiB0aGlzLnZhbCh2YWx1ZSk7XG59XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybSh0cmFuc2Zvcm0pIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdGhpc1tpXS5zdHlsZS50cmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gdHJhbnNpdGlvbihkdXJhdGlvbikge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB0aGlzW2ldLnN0eWxlLnRyYW5zaXRpb24gPSB0eXBlb2YgZHVyYXRpb24gIT09ICdzdHJpbmcnID8gZHVyYXRpb24gKyBcIm1zXCIgOiBkdXJhdGlvbjtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBvbigpIHtcbiAgZm9yICh2YXIgX2xlbjUgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW41KSwgX2tleTUgPSAwOyBfa2V5NSA8IF9sZW41OyBfa2V5NSsrKSB7XG4gICAgYXJnc1tfa2V5NV0gPSBhcmd1bWVudHNbX2tleTVdO1xuICB9XG5cbiAgdmFyIGV2ZW50VHlwZSA9IGFyZ3NbMF0sXG4gICAgICB0YXJnZXRTZWxlY3RvciA9IGFyZ3NbMV0sXG4gICAgICBsaXN0ZW5lciA9IGFyZ3NbMl0sXG4gICAgICBjYXB0dXJlID0gYXJnc1szXTtcblxuICBpZiAodHlwZW9mIGFyZ3NbMV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICBldmVudFR5cGUgPSBhcmdzWzBdO1xuICAgIGxpc3RlbmVyID0gYXJnc1sxXTtcbiAgICBjYXB0dXJlID0gYXJnc1syXTtcbiAgICB0YXJnZXRTZWxlY3RvciA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICghY2FwdHVyZSkgY2FwdHVyZSA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZUxpdmVFdmVudChlKSB7XG4gICAgdmFyIHRhcmdldCA9IGUudGFyZ2V0O1xuICAgIGlmICghdGFyZ2V0KSByZXR1cm47XG4gICAgdmFyIGV2ZW50RGF0YSA9IGUudGFyZ2V0LmRvbTdFdmVudERhdGEgfHwgW107XG5cbiAgICBpZiAoZXZlbnREYXRhLmluZGV4T2YoZSkgPCAwKSB7XG4gICAgICBldmVudERhdGEudW5zaGlmdChlKTtcbiAgICB9XG5cbiAgICBpZiAoJCh0YXJnZXQpLmlzKHRhcmdldFNlbGVjdG9yKSkgbGlzdGVuZXIuYXBwbHkodGFyZ2V0LCBldmVudERhdGEpO2Vsc2Uge1xuICAgICAgdmFyIF9wYXJlbnRzID0gJCh0YXJnZXQpLnBhcmVudHMoKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG5cbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgX3BhcmVudHMubGVuZ3RoOyBrICs9IDEpIHtcbiAgICAgICAgaWYgKCQoX3BhcmVudHNba10pLmlzKHRhcmdldFNlbGVjdG9yKSkgbGlzdGVuZXIuYXBwbHkoX3BhcmVudHNba10sIGV2ZW50RGF0YSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlRXZlbnQoZSkge1xuICAgIHZhciBldmVudERhdGEgPSBlICYmIGUudGFyZ2V0ID8gZS50YXJnZXQuZG9tN0V2ZW50RGF0YSB8fCBbXSA6IFtdO1xuXG4gICAgaWYgKGV2ZW50RGF0YS5pbmRleE9mKGUpIDwgMCkge1xuICAgICAgZXZlbnREYXRhLnVuc2hpZnQoZSk7XG4gICAgfVxuXG4gICAgbGlzdGVuZXIuYXBwbHkodGhpcywgZXZlbnREYXRhKTtcbiAgfVxuXG4gIHZhciBldmVudHMgPSBldmVudFR5cGUuc3BsaXQoJyAnKTtcbiAgdmFyIGo7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdmFyIGVsID0gdGhpc1tpXTtcblxuICAgIGlmICghdGFyZ2V0U2VsZWN0b3IpIHtcbiAgICAgIGZvciAoaiA9IDA7IGogPCBldmVudHMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgdmFyIGV2ZW50ID0gZXZlbnRzW2pdO1xuICAgICAgICBpZiAoIWVsLmRvbTdMaXN0ZW5lcnMpIGVsLmRvbTdMaXN0ZW5lcnMgPSB7fTtcbiAgICAgICAgaWYgKCFlbC5kb203TGlzdGVuZXJzW2V2ZW50XSkgZWwuZG9tN0xpc3RlbmVyc1tldmVudF0gPSBbXTtcbiAgICAgICAgZWwuZG9tN0xpc3RlbmVyc1tldmVudF0ucHVzaCh7XG4gICAgICAgICAgbGlzdGVuZXI6IGxpc3RlbmVyLFxuICAgICAgICAgIHByb3h5TGlzdGVuZXI6IGhhbmRsZUV2ZW50XG4gICAgICAgIH0pO1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVFdmVudCwgY2FwdHVyZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIExpdmUgZXZlbnRzXG4gICAgICBmb3IgKGogPSAwOyBqIDwgZXZlbnRzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgIHZhciBfZXZlbnQgPSBldmVudHNbal07XG4gICAgICAgIGlmICghZWwuZG9tN0xpdmVMaXN0ZW5lcnMpIGVsLmRvbTdMaXZlTGlzdGVuZXJzID0ge307XG4gICAgICAgIGlmICghZWwuZG9tN0xpdmVMaXN0ZW5lcnNbX2V2ZW50XSkgZWwuZG9tN0xpdmVMaXN0ZW5lcnNbX2V2ZW50XSA9IFtdO1xuXG4gICAgICAgIGVsLmRvbTdMaXZlTGlzdGVuZXJzW19ldmVudF0ucHVzaCh7XG4gICAgICAgICAgbGlzdGVuZXI6IGxpc3RlbmVyLFxuICAgICAgICAgIHByb3h5TGlzdGVuZXI6IGhhbmRsZUxpdmVFdmVudFxuICAgICAgICB9KTtcblxuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKF9ldmVudCwgaGFuZGxlTGl2ZUV2ZW50LCBjYXB0dXJlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gb2ZmKCkge1xuICBmb3IgKHZhciBfbGVuNiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjYpLCBfa2V5NiA9IDA7IF9rZXk2IDwgX2xlbjY7IF9rZXk2KyspIHtcbiAgICBhcmdzW19rZXk2XSA9IGFyZ3VtZW50c1tfa2V5Nl07XG4gIH1cblxuICB2YXIgZXZlbnRUeXBlID0gYXJnc1swXSxcbiAgICAgIHRhcmdldFNlbGVjdG9yID0gYXJnc1sxXSxcbiAgICAgIGxpc3RlbmVyID0gYXJnc1syXSxcbiAgICAgIGNhcHR1cmUgPSBhcmdzWzNdO1xuXG4gIGlmICh0eXBlb2YgYXJnc1sxXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGV2ZW50VHlwZSA9IGFyZ3NbMF07XG4gICAgbGlzdGVuZXIgPSBhcmdzWzFdO1xuICAgIGNhcHR1cmUgPSBhcmdzWzJdO1xuICAgIHRhcmdldFNlbGVjdG9yID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKCFjYXB0dXJlKSBjYXB0dXJlID0gZmFsc2U7XG4gIHZhciBldmVudHMgPSBldmVudFR5cGUuc3BsaXQoJyAnKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGV2ZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHZhciBldmVudCA9IGV2ZW50c1tpXTtcblxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgdGhpcy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgdmFyIGVsID0gdGhpc1tqXTtcbiAgICAgIHZhciBoYW5kbGVycyA9IHZvaWQgMDtcblxuICAgICAgaWYgKCF0YXJnZXRTZWxlY3RvciAmJiBlbC5kb203TGlzdGVuZXJzKSB7XG4gICAgICAgIGhhbmRsZXJzID0gZWwuZG9tN0xpc3RlbmVyc1tldmVudF07XG4gICAgICB9IGVsc2UgaWYgKHRhcmdldFNlbGVjdG9yICYmIGVsLmRvbTdMaXZlTGlzdGVuZXJzKSB7XG4gICAgICAgIGhhbmRsZXJzID0gZWwuZG9tN0xpdmVMaXN0ZW5lcnNbZXZlbnRdO1xuICAgICAgfVxuXG4gICAgICBpZiAoaGFuZGxlcnMgJiYgaGFuZGxlcnMubGVuZ3RoKSB7XG4gICAgICAgIGZvciAodmFyIGsgPSBoYW5kbGVycy5sZW5ndGggLSAxOyBrID49IDA7IGsgLT0gMSkge1xuICAgICAgICAgIHZhciBoYW5kbGVyID0gaGFuZGxlcnNba107XG5cbiAgICAgICAgICBpZiAobGlzdGVuZXIgJiYgaGFuZGxlci5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIucHJveHlMaXN0ZW5lciwgY2FwdHVyZSk7XG4gICAgICAgICAgICBoYW5kbGVycy5zcGxpY2UoaywgMSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChsaXN0ZW5lciAmJiBoYW5kbGVyLmxpc3RlbmVyICYmIGhhbmRsZXIubGlzdGVuZXIuZG9tN3Byb3h5ICYmIGhhbmRsZXIubGlzdGVuZXIuZG9tN3Byb3h5ID09PSBsaXN0ZW5lcikge1xuICAgICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlci5wcm94eUxpc3RlbmVyLCBjYXB0dXJlKTtcbiAgICAgICAgICAgIGhhbmRsZXJzLnNwbGljZShrLCAxKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCFsaXN0ZW5lcikge1xuICAgICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlci5wcm94eUxpc3RlbmVyLCBjYXB0dXJlKTtcbiAgICAgICAgICAgIGhhbmRsZXJzLnNwbGljZShrLCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gb25jZSgpIHtcbiAgdmFyIGRvbSA9IHRoaXM7XG5cbiAgZm9yICh2YXIgX2xlbjcgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW43KSwgX2tleTcgPSAwOyBfa2V5NyA8IF9sZW43OyBfa2V5NysrKSB7XG4gICAgYXJnc1tfa2V5N10gPSBhcmd1bWVudHNbX2tleTddO1xuICB9XG5cbiAgdmFyIGV2ZW50TmFtZSA9IGFyZ3NbMF0sXG4gICAgICB0YXJnZXRTZWxlY3RvciA9IGFyZ3NbMV0sXG4gICAgICBsaXN0ZW5lciA9IGFyZ3NbMl0sXG4gICAgICBjYXB0dXJlID0gYXJnc1szXTtcblxuICBpZiAodHlwZW9mIGFyZ3NbMV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICBldmVudE5hbWUgPSBhcmdzWzBdO1xuICAgIGxpc3RlbmVyID0gYXJnc1sxXTtcbiAgICBjYXB0dXJlID0gYXJnc1syXTtcbiAgICB0YXJnZXRTZWxlY3RvciA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uY2VIYW5kbGVyKCkge1xuICAgIGZvciAodmFyIF9sZW44ID0gYXJndW1lbnRzLmxlbmd0aCwgZXZlbnRBcmdzID0gbmV3IEFycmF5KF9sZW44KSwgX2tleTggPSAwOyBfa2V5OCA8IF9sZW44OyBfa2V5OCsrKSB7XG4gICAgICBldmVudEFyZ3NbX2tleThdID0gYXJndW1lbnRzW19rZXk4XTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lci5hcHBseSh0aGlzLCBldmVudEFyZ3MpO1xuICAgIGRvbS5vZmYoZXZlbnROYW1lLCB0YXJnZXRTZWxlY3Rvciwgb25jZUhhbmRsZXIsIGNhcHR1cmUpO1xuXG4gICAgaWYgKG9uY2VIYW5kbGVyLmRvbTdwcm94eSkge1xuICAgICAgZGVsZXRlIG9uY2VIYW5kbGVyLmRvbTdwcm94eTtcbiAgICB9XG4gIH1cblxuICBvbmNlSGFuZGxlci5kb203cHJveHkgPSBsaXN0ZW5lcjtcbiAgcmV0dXJuIGRvbS5vbihldmVudE5hbWUsIHRhcmdldFNlbGVjdG9yLCBvbmNlSGFuZGxlciwgY2FwdHVyZSk7XG59XG5cbmZ1bmN0aW9uIHRyaWdnZXIoKSB7XG4gIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coKTtcblxuICBmb3IgKHZhciBfbGVuOSA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjkpLCBfa2V5OSA9IDA7IF9rZXk5IDwgX2xlbjk7IF9rZXk5KyspIHtcbiAgICBhcmdzW19rZXk5XSA9IGFyZ3VtZW50c1tfa2V5OV07XG4gIH1cblxuICB2YXIgZXZlbnRzID0gYXJnc1swXS5zcGxpdCgnICcpO1xuICB2YXIgZXZlbnREYXRhID0gYXJnc1sxXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGV2ZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHZhciBldmVudCA9IGV2ZW50c1tpXTtcblxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgdGhpcy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgdmFyIGVsID0gdGhpc1tqXTtcblxuICAgICAgaWYgKHdpbmRvdy5DdXN0b21FdmVudCkge1xuICAgICAgICB2YXIgZXZ0ID0gbmV3IHdpbmRvdy5DdXN0b21FdmVudChldmVudCwge1xuICAgICAgICAgIGRldGFpbDogZXZlbnREYXRhLFxuICAgICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgZWwuZG9tN0V2ZW50RGF0YSA9IGFyZ3MuZmlsdGVyKGZ1bmN0aW9uIChkYXRhLCBkYXRhSW5kZXgpIHtcbiAgICAgICAgICByZXR1cm4gZGF0YUluZGV4ID4gMDtcbiAgICAgICAgfSk7XG4gICAgICAgIGVsLmRpc3BhdGNoRXZlbnQoZXZ0KTtcbiAgICAgICAgZWwuZG9tN0V2ZW50RGF0YSA9IFtdO1xuICAgICAgICBkZWxldGUgZWwuZG9tN0V2ZW50RGF0YTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gdHJhbnNpdGlvbkVuZChjYWxsYmFjaykge1xuICB2YXIgZG9tID0gdGhpcztcblxuICBmdW5jdGlvbiBmaXJlQ2FsbEJhY2soZSkge1xuICAgIGlmIChlLnRhcmdldCAhPT0gdGhpcykgcmV0dXJuO1xuICAgIGNhbGxiYWNrLmNhbGwodGhpcywgZSk7XG4gICAgZG9tLm9mZigndHJhbnNpdGlvbmVuZCcsIGZpcmVDYWxsQmFjayk7XG4gIH1cblxuICBpZiAoY2FsbGJhY2spIHtcbiAgICBkb20ub24oJ3RyYW5zaXRpb25lbmQnLCBmaXJlQ2FsbEJhY2spO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIGFuaW1hdGlvbkVuZChjYWxsYmFjaykge1xuICB2YXIgZG9tID0gdGhpcztcblxuICBmdW5jdGlvbiBmaXJlQ2FsbEJhY2soZSkge1xuICAgIGlmIChlLnRhcmdldCAhPT0gdGhpcykgcmV0dXJuO1xuICAgIGNhbGxiYWNrLmNhbGwodGhpcywgZSk7XG4gICAgZG9tLm9mZignYW5pbWF0aW9uZW5kJywgZmlyZUNhbGxCYWNrKTtcbiAgfVxuXG4gIGlmIChjYWxsYmFjaykge1xuICAgIGRvbS5vbignYW5pbWF0aW9uZW5kJywgZmlyZUNhbGxCYWNrKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiB3aWR0aCgpIHtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuXG4gIGlmICh0aGlzWzBdID09PSB3aW5kb3cpIHtcbiAgICByZXR1cm4gd2luZG93LmlubmVyV2lkdGg7XG4gIH1cblxuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIHBhcnNlRmxvYXQodGhpcy5jc3MoJ3dpZHRoJykpO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIG91dGVyV2lkdGgoaW5jbHVkZU1hcmdpbnMpIHtcbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIGlmIChpbmNsdWRlTWFyZ2lucykge1xuICAgICAgdmFyIF9zdHlsZXMgPSB0aGlzLnN0eWxlcygpO1xuXG4gICAgICByZXR1cm4gdGhpc1swXS5vZmZzZXRXaWR0aCArIHBhcnNlRmxvYXQoX3N0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdtYXJnaW4tcmlnaHQnKSkgKyBwYXJzZUZsb2F0KF9zdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnbWFyZ2luLWxlZnQnKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXNbMF0ub2Zmc2V0V2lkdGg7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gaGVpZ2h0KCkge1xuICB2YXIgd2luZG93ID0gZ2V0V2luZG93KCk7XG5cbiAgaWYgKHRoaXNbMF0gPT09IHdpbmRvdykge1xuICAgIHJldHVybiB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gIH1cblxuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIHBhcnNlRmxvYXQodGhpcy5jc3MoJ2hlaWdodCcpKTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBvdXRlckhlaWdodChpbmNsdWRlTWFyZ2lucykge1xuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgaWYgKGluY2x1ZGVNYXJnaW5zKSB7XG4gICAgICB2YXIgX3N0eWxlczIgPSB0aGlzLnN0eWxlcygpO1xuXG4gICAgICByZXR1cm4gdGhpc1swXS5vZmZzZXRIZWlnaHQgKyBwYXJzZUZsb2F0KF9zdHlsZXMyLmdldFByb3BlcnR5VmFsdWUoJ21hcmdpbi10b3AnKSkgKyBwYXJzZUZsb2F0KF9zdHlsZXMyLmdldFByb3BlcnR5VmFsdWUoJ21hcmdpbi1ib3R0b20nKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXNbMF0ub2Zmc2V0SGVpZ2h0O1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIG9mZnNldCgpIHtcbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgICB2YXIgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICAgIHZhciBlbCA9IHRoaXNbMF07XG4gICAgdmFyIGJveCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIHZhciBib2R5ID0gZG9jdW1lbnQuYm9keTtcbiAgICB2YXIgY2xpZW50VG9wID0gZWwuY2xpZW50VG9wIHx8IGJvZHkuY2xpZW50VG9wIHx8IDA7XG4gICAgdmFyIGNsaWVudExlZnQgPSBlbC5jbGllbnRMZWZ0IHx8IGJvZHkuY2xpZW50TGVmdCB8fCAwO1xuICAgIHZhciBzY3JvbGxUb3AgPSBlbCA9PT0gd2luZG93ID8gd2luZG93LnNjcm9sbFkgOiBlbC5zY3JvbGxUb3A7XG4gICAgdmFyIHNjcm9sbExlZnQgPSBlbCA9PT0gd2luZG93ID8gd2luZG93LnNjcm9sbFggOiBlbC5zY3JvbGxMZWZ0O1xuICAgIHJldHVybiB7XG4gICAgICB0b3A6IGJveC50b3AgKyBzY3JvbGxUb3AgLSBjbGllbnRUb3AsXG4gICAgICBsZWZ0OiBib3gubGVmdCArIHNjcm9sbExlZnQgLSBjbGllbnRMZWZ0XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBoaWRlKCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB0aGlzW2ldLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gc2hvdygpIHtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHZhciBlbCA9IHRoaXNbaV07XG5cbiAgICBpZiAoZWwuc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnKSB7XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKCdkaXNwbGF5JykgPT09ICdub25lJykge1xuICAgICAgLy8gU3RpbGwgbm90IHZpc2libGVcbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBzdHlsZXMoKSB7XG4gIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgaWYgKHRoaXNbMF0pIHJldHVybiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzWzBdLCBudWxsKTtcbiAgcmV0dXJuIHt9O1xufVxuXG5mdW5jdGlvbiBjc3MocHJvcHMsIHZhbHVlKSB7XG4gIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgdmFyIGk7XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICBpZiAodHlwZW9mIHByb3BzID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gLmNzcygnd2lkdGgnKVxuICAgICAgaWYgKHRoaXNbMF0pIHJldHVybiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzWzBdLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKHByb3BzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gLmNzcyh7IHdpZHRoOiAnMTAwcHgnIH0pXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBmb3IgKHZhciBfcHJvcCBpbiBwcm9wcykge1xuICAgICAgICAgIHRoaXNbaV0uc3R5bGVbX3Byb3BdID0gcHJvcHNbX3Byb3BdO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfVxuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyICYmIHR5cGVvZiBwcm9wcyA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyAuY3NzKCd3aWR0aCcsICcxMDBweCcpXG4gICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIHRoaXNbaV0uc3R5bGVbcHJvcHNdID0gdmFsdWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gZWFjaChjYWxsYmFjaykge1xuICBpZiAoIWNhbGxiYWNrKSByZXR1cm4gdGhpcztcbiAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uIChlbCwgaW5kZXgpIHtcbiAgICBjYWxsYmFjay5hcHBseShlbCwgW2VsLCBpbmRleF0pO1xuICB9KTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIGZpbHRlcihjYWxsYmFjaykge1xuICB2YXIgcmVzdWx0ID0gYXJyYXlGaWx0ZXIodGhpcywgY2FsbGJhY2spO1xuICByZXR1cm4gJChyZXN1bHQpO1xufVxuXG5mdW5jdGlvbiBodG1sKGh0bWwpIHtcbiAgaWYgKHR5cGVvZiBodG1sID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiB0aGlzWzBdID8gdGhpc1swXS5pbm5lckhUTUwgOiBudWxsO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdGhpc1tpXS5pbm5lckhUTUwgPSBodG1sO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHRleHQodGV4dCkge1xuICBpZiAodHlwZW9mIHRleHQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIHRoaXNbMF0gPyB0aGlzWzBdLnRleHRDb250ZW50LnRyaW0oKSA6IG51bGw7XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB0aGlzW2ldLnRleHRDb250ZW50ID0gdGV4dDtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBpcyhzZWxlY3Rvcikge1xuICB2YXIgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIHZhciBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gIHZhciBlbCA9IHRoaXNbMF07XG4gIHZhciBjb21wYXJlV2l0aDtcbiAgdmFyIGk7XG4gIGlmICghZWwgfHwgdHlwZW9mIHNlbGVjdG9yID09PSAndW5kZWZpbmVkJykgcmV0dXJuIGZhbHNlO1xuXG4gIGlmICh0eXBlb2Ygc2VsZWN0b3IgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKGVsLm1hdGNoZXMpIHJldHVybiBlbC5tYXRjaGVzKHNlbGVjdG9yKTtcbiAgICBpZiAoZWwud2Via2l0TWF0Y2hlc1NlbGVjdG9yKSByZXR1cm4gZWwud2Via2l0TWF0Y2hlc1NlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICBpZiAoZWwubXNNYXRjaGVzU2VsZWN0b3IpIHJldHVybiBlbC5tc01hdGNoZXNTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgY29tcGFyZVdpdGggPSAkKHNlbGVjdG9yKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBjb21wYXJlV2l0aC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKGNvbXBhcmVXaXRoW2ldID09PSBlbCkgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKHNlbGVjdG9yID09PSBkb2N1bWVudCkge1xuICAgIHJldHVybiBlbCA9PT0gZG9jdW1lbnQ7XG4gIH1cblxuICBpZiAoc2VsZWN0b3IgPT09IHdpbmRvdykge1xuICAgIHJldHVybiBlbCA9PT0gd2luZG93O1xuICB9XG5cbiAgaWYgKHNlbGVjdG9yLm5vZGVUeXBlIHx8IHNlbGVjdG9yIGluc3RhbmNlb2YgRG9tNykge1xuICAgIGNvbXBhcmVXaXRoID0gc2VsZWN0b3Iubm9kZVR5cGUgPyBbc2VsZWN0b3JdIDogc2VsZWN0b3I7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgY29tcGFyZVdpdGgubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmIChjb21wYXJlV2l0aFtpXSA9PT0gZWwpIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaW5kZXgoKSB7XG4gIHZhciBjaGlsZCA9IHRoaXNbMF07XG4gIHZhciBpO1xuXG4gIGlmIChjaGlsZCkge1xuICAgIGkgPSAwOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcblxuICAgIHdoaWxlICgoY2hpbGQgPSBjaGlsZC5wcmV2aW91c1NpYmxpbmcpICE9PSBudWxsKSB7XG4gICAgICBpZiAoY2hpbGQubm9kZVR5cGUgPT09IDEpIGkgKz0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gaTtcbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGVxKGluZGV4KSB7XG4gIGlmICh0eXBlb2YgaW5kZXggPT09ICd1bmRlZmluZWQnKSByZXR1cm4gdGhpcztcbiAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuXG4gIGlmIChpbmRleCA+IGxlbmd0aCAtIDEpIHtcbiAgICByZXR1cm4gJChbXSk7XG4gIH1cblxuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgdmFyIHJldHVybkluZGV4ID0gbGVuZ3RoICsgaW5kZXg7XG4gICAgaWYgKHJldHVybkluZGV4IDwgMCkgcmV0dXJuICQoW10pO1xuICAgIHJldHVybiAkKFt0aGlzW3JldHVybkluZGV4XV0pO1xuICB9XG5cbiAgcmV0dXJuICQoW3RoaXNbaW5kZXhdXSk7XG59XG5cbmZ1bmN0aW9uIGFwcGVuZCgpIHtcbiAgdmFyIG5ld0NoaWxkO1xuICB2YXIgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuXG4gIGZvciAodmFyIGsgPSAwOyBrIDwgYXJndW1lbnRzLmxlbmd0aDsgayArPSAxKSB7XG4gICAgbmV3Q2hpbGQgPSBrIDwgMCB8fCBhcmd1bWVudHMubGVuZ3RoIDw9IGsgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNba107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmICh0eXBlb2YgbmV3Q2hpbGQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHZhciB0ZW1wRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHRlbXBEaXYuaW5uZXJIVE1MID0gbmV3Q2hpbGQ7XG5cbiAgICAgICAgd2hpbGUgKHRlbXBEaXYuZmlyc3RDaGlsZCkge1xuICAgICAgICAgIHRoaXNbaV0uYXBwZW5kQ2hpbGQodGVtcERpdi5maXJzdENoaWxkKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChuZXdDaGlsZCBpbnN0YW5jZW9mIERvbTcpIHtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBuZXdDaGlsZC5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgIHRoaXNbaV0uYXBwZW5kQ2hpbGQobmV3Q2hpbGRbal0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzW2ldLmFwcGVuZENoaWxkKG5ld0NoaWxkKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gYXBwZW5kVG8ocGFyZW50KSB7XG4gICQocGFyZW50KS5hcHBlbmQodGhpcyk7XG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBwcmVwZW5kKG5ld0NoaWxkKSB7XG4gIHZhciBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gIHZhciBpO1xuICB2YXIgajtcblxuICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmICh0eXBlb2YgbmV3Q2hpbGQgPT09ICdzdHJpbmcnKSB7XG4gICAgICB2YXIgdGVtcERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgdGVtcERpdi5pbm5lckhUTUwgPSBuZXdDaGlsZDtcblxuICAgICAgZm9yIChqID0gdGVtcERpdi5jaGlsZE5vZGVzLmxlbmd0aCAtIDE7IGogPj0gMDsgaiAtPSAxKSB7XG4gICAgICAgIHRoaXNbaV0uaW5zZXJ0QmVmb3JlKHRlbXBEaXYuY2hpbGROb2Rlc1tqXSwgdGhpc1tpXS5jaGlsZE5vZGVzWzBdKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG5ld0NoaWxkIGluc3RhbmNlb2YgRG9tNykge1xuICAgICAgZm9yIChqID0gMDsgaiA8IG5ld0NoaWxkLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgIHRoaXNbaV0uaW5zZXJ0QmVmb3JlKG5ld0NoaWxkW2pdLCB0aGlzW2ldLmNoaWxkTm9kZXNbMF0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzW2ldLmluc2VydEJlZm9yZShuZXdDaGlsZCwgdGhpc1tpXS5jaGlsZE5vZGVzWzBdKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gcHJlcGVuZFRvKHBhcmVudCkge1xuICAkKHBhcmVudCkucHJlcGVuZCh0aGlzKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIGluc2VydEJlZm9yZShzZWxlY3Rvcikge1xuICB2YXIgYmVmb3JlID0gJChzZWxlY3Rvcik7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKGJlZm9yZS5sZW5ndGggPT09IDEpIHtcbiAgICAgIGJlZm9yZVswXS5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzW2ldLCBiZWZvcmVbMF0pO1xuICAgIH0gZWxzZSBpZiAoYmVmb3JlLmxlbmd0aCA+IDEpIHtcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgYmVmb3JlLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgIGJlZm9yZVtqXS5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzW2ldLmNsb25lTm9kZSh0cnVlKSwgYmVmb3JlW2pdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5zZXJ0QWZ0ZXIoc2VsZWN0b3IpIHtcbiAgdmFyIGFmdGVyID0gJChzZWxlY3Rvcik7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKGFmdGVyLmxlbmd0aCA9PT0gMSkge1xuICAgICAgYWZ0ZXJbMF0ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpc1tpXSwgYWZ0ZXJbMF0ubmV4dFNpYmxpbmcpO1xuICAgIH0gZWxzZSBpZiAoYWZ0ZXIubGVuZ3RoID4gMSkge1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBhZnRlci5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICBhZnRlcltqXS5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzW2ldLmNsb25lTm9kZSh0cnVlKSwgYWZ0ZXJbal0ubmV4dFNpYmxpbmcpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBuZXh0KHNlbGVjdG9yKSB7XG4gIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgIGlmICh0aGlzWzBdLm5leHRFbGVtZW50U2libGluZyAmJiAkKHRoaXNbMF0ubmV4dEVsZW1lbnRTaWJsaW5nKS5pcyhzZWxlY3RvcikpIHtcbiAgICAgICAgcmV0dXJuICQoW3RoaXNbMF0ubmV4dEVsZW1lbnRTaWJsaW5nXSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAkKFtdKTtcbiAgICB9XG5cbiAgICBpZiAodGhpc1swXS5uZXh0RWxlbWVudFNpYmxpbmcpIHJldHVybiAkKFt0aGlzWzBdLm5leHRFbGVtZW50U2libGluZ10pO1xuICAgIHJldHVybiAkKFtdKTtcbiAgfVxuXG4gIHJldHVybiAkKFtdKTtcbn1cblxuZnVuY3Rpb24gbmV4dEFsbChzZWxlY3Rvcikge1xuICB2YXIgbmV4dEVscyA9IFtdO1xuICB2YXIgZWwgPSB0aGlzWzBdO1xuICBpZiAoIWVsKSByZXR1cm4gJChbXSk7XG5cbiAgd2hpbGUgKGVsLm5leHRFbGVtZW50U2libGluZykge1xuICAgIHZhciBfbmV4dCA9IGVsLm5leHRFbGVtZW50U2libGluZzsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICBpZiAoJChfbmV4dCkuaXMoc2VsZWN0b3IpKSBuZXh0RWxzLnB1c2goX25leHQpO1xuICAgIH0gZWxzZSBuZXh0RWxzLnB1c2goX25leHQpO1xuXG4gICAgZWwgPSBfbmV4dDtcbiAgfVxuXG4gIHJldHVybiAkKG5leHRFbHMpO1xufVxuXG5mdW5jdGlvbiBwcmV2KHNlbGVjdG9yKSB7XG4gIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICB2YXIgZWwgPSB0aGlzWzBdO1xuXG4gICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICBpZiAoZWwucHJldmlvdXNFbGVtZW50U2libGluZyAmJiAkKGVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmcpLmlzKHNlbGVjdG9yKSkge1xuICAgICAgICByZXR1cm4gJChbZWwucHJldmlvdXNFbGVtZW50U2libGluZ10pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gJChbXSk7XG4gICAgfVxuXG4gICAgaWYgKGVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmcpIHJldHVybiAkKFtlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nXSk7XG4gICAgcmV0dXJuICQoW10pO1xuICB9XG5cbiAgcmV0dXJuICQoW10pO1xufVxuXG5mdW5jdGlvbiBwcmV2QWxsKHNlbGVjdG9yKSB7XG4gIHZhciBwcmV2RWxzID0gW107XG4gIHZhciBlbCA9IHRoaXNbMF07XG4gIGlmICghZWwpIHJldHVybiAkKFtdKTtcblxuICB3aGlsZSAoZWwucHJldmlvdXNFbGVtZW50U2libGluZykge1xuICAgIHZhciBfcHJldiA9IGVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmc7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgaWYgKCQoX3ByZXYpLmlzKHNlbGVjdG9yKSkgcHJldkVscy5wdXNoKF9wcmV2KTtcbiAgICB9IGVsc2UgcHJldkVscy5wdXNoKF9wcmV2KTtcblxuICAgIGVsID0gX3ByZXY7XG4gIH1cblxuICByZXR1cm4gJChwcmV2RWxzKTtcbn1cblxuZnVuY3Rpb24gc2libGluZ3Moc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHRoaXMubmV4dEFsbChzZWxlY3RvcikuYWRkKHRoaXMucHJldkFsbChzZWxlY3RvcikpO1xufVxuXG5mdW5jdGlvbiBwYXJlbnQoc2VsZWN0b3IpIHtcbiAgdmFyIHBhcmVudHMgPSBbXTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmICh0aGlzW2ldLnBhcmVudE5vZGUgIT09IG51bGwpIHtcbiAgICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgICBpZiAoJCh0aGlzW2ldLnBhcmVudE5vZGUpLmlzKHNlbGVjdG9yKSkgcGFyZW50cy5wdXNoKHRoaXNbaV0ucGFyZW50Tm9kZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJlbnRzLnB1c2godGhpc1tpXS5wYXJlbnROb2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gJChwYXJlbnRzKTtcbn1cblxuZnVuY3Rpb24gcGFyZW50cyhzZWxlY3Rvcikge1xuICB2YXIgcGFyZW50cyA9IFtdOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdmFyIF9wYXJlbnQgPSB0aGlzW2ldLnBhcmVudE5vZGU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICAgIHdoaWxlIChfcGFyZW50KSB7XG4gICAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgICAgaWYgKCQoX3BhcmVudCkuaXMoc2VsZWN0b3IpKSBwYXJlbnRzLnB1c2goX3BhcmVudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJlbnRzLnB1c2goX3BhcmVudCk7XG4gICAgICB9XG5cbiAgICAgIF9wYXJlbnQgPSBfcGFyZW50LnBhcmVudE5vZGU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuICQocGFyZW50cyk7XG59XG5cbmZ1bmN0aW9uIGNsb3Nlc3Qoc2VsZWN0b3IpIHtcbiAgdmFyIGNsb3Nlc3QgPSB0aGlzOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgaWYgKHR5cGVvZiBzZWxlY3RvciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gJChbXSk7XG4gIH1cblxuICBpZiAoIWNsb3Nlc3QuaXMoc2VsZWN0b3IpKSB7XG4gICAgY2xvc2VzdCA9IGNsb3Nlc3QucGFyZW50cyhzZWxlY3RvcikuZXEoMCk7XG4gIH1cblxuICByZXR1cm4gY2xvc2VzdDtcbn1cblxuZnVuY3Rpb24gZmluZChzZWxlY3Rvcikge1xuICB2YXIgZm91bmRFbGVtZW50cyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHZhciBmb3VuZCA9IHRoaXNbaV0ucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG5cbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IGZvdW5kLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICBmb3VuZEVsZW1lbnRzLnB1c2goZm91bmRbal0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAkKGZvdW5kRWxlbWVudHMpO1xufVxuXG5mdW5jdGlvbiBjaGlsZHJlbihzZWxlY3Rvcikge1xuICB2YXIgY2hpbGRyZW4gPSBbXTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHZhciBjaGlsZE5vZGVzID0gdGhpc1tpXS5jaGlsZHJlbjtcblxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgY2hpbGROb2Rlcy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgaWYgKCFzZWxlY3RvciB8fCAkKGNoaWxkTm9kZXNbal0pLmlzKHNlbGVjdG9yKSkge1xuICAgICAgICBjaGlsZHJlbi5wdXNoKGNoaWxkTm9kZXNbal0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAkKGNoaWxkcmVuKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlKCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAodGhpc1tpXS5wYXJlbnROb2RlKSB0aGlzW2ldLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpc1tpXSk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gZGV0YWNoKCkge1xuICByZXR1cm4gdGhpcy5yZW1vdmUoKTtcbn1cblxuZnVuY3Rpb24gYWRkKCkge1xuICB2YXIgZG9tID0gdGhpcztcbiAgdmFyIGk7XG4gIHZhciBqO1xuXG4gIGZvciAodmFyIF9sZW4xMCA9IGFyZ3VtZW50cy5sZW5ndGgsIGVscyA9IG5ldyBBcnJheShfbGVuMTApLCBfa2V5MTAgPSAwOyBfa2V5MTAgPCBfbGVuMTA7IF9rZXkxMCsrKSB7XG4gICAgZWxzW19rZXkxMF0gPSBhcmd1bWVudHNbX2tleTEwXTtcbiAgfVxuXG4gIGZvciAoaSA9IDA7IGkgPCBlbHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB2YXIgdG9BZGQgPSAkKGVsc1tpXSk7XG5cbiAgICBmb3IgKGogPSAwOyBqIDwgdG9BZGQubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgIGRvbS5wdXNoKHRvQWRkW2pdKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZG9tO1xufVxuXG5mdW5jdGlvbiBlbXB0eSgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdmFyIGVsID0gdGhpc1tpXTtcblxuICAgIGlmIChlbC5ub2RlVHlwZSA9PT0gMSkge1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBlbC5jaGlsZE5vZGVzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgIGlmIChlbC5jaGlsZE5vZGVzW2pdLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICBlbC5jaGlsZE5vZGVzW2pdLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWwuY2hpbGROb2Rlc1tqXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZWwudGV4dENvbnRlbnQgPSAnJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gc2Nyb2xsVG8oKSB7XG4gIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coKTtcblxuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgdmFyIGxlZnQgPSBhcmdzWzBdLFxuICAgICAgdG9wID0gYXJnc1sxXSxcbiAgICAgIGR1cmF0aW9uID0gYXJnc1syXSxcbiAgICAgIGVhc2luZyA9IGFyZ3NbM10sXG4gICAgICBjYWxsYmFjayA9IGFyZ3NbNF07XG5cbiAgaWYgKGFyZ3MubGVuZ3RoID09PSA0ICYmIHR5cGVvZiBlYXNpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IGVhc2luZztcbiAgICBsZWZ0ID0gYXJnc1swXTtcbiAgICB0b3AgPSBhcmdzWzFdO1xuICAgIGR1cmF0aW9uID0gYXJnc1syXTtcbiAgICBjYWxsYmFjayA9IGFyZ3NbM107XG4gICAgZWFzaW5nID0gYXJnc1s0XTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZWFzaW5nID09PSAndW5kZWZpbmVkJykgZWFzaW5nID0gJ3N3aW5nJztcbiAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiBhbmltYXRlKCkge1xuICAgIHZhciBlbCA9IHRoaXM7XG4gICAgdmFyIGN1cnJlbnRUb3A7XG4gICAgdmFyIGN1cnJlbnRMZWZ0O1xuICAgIHZhciBtYXhUb3A7XG4gICAgdmFyIG1heExlZnQ7XG4gICAgdmFyIG5ld1RvcDtcbiAgICB2YXIgbmV3TGVmdDtcbiAgICB2YXIgc2Nyb2xsVG9wOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgICB2YXIgc2Nyb2xsTGVmdDsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gICAgdmFyIGFuaW1hdGVUb3AgPSB0b3AgPiAwIHx8IHRvcCA9PT0gMDtcbiAgICB2YXIgYW5pbWF0ZUxlZnQgPSBsZWZ0ID4gMCB8fCBsZWZ0ID09PSAwO1xuXG4gICAgaWYgKHR5cGVvZiBlYXNpbmcgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBlYXNpbmcgPSAnc3dpbmcnO1xuICAgIH1cblxuICAgIGlmIChhbmltYXRlVG9wKSB7XG4gICAgICBjdXJyZW50VG9wID0gZWwuc2Nyb2xsVG9wO1xuXG4gICAgICBpZiAoIWR1cmF0aW9uKSB7XG4gICAgICAgIGVsLnNjcm9sbFRvcCA9IHRvcDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoYW5pbWF0ZUxlZnQpIHtcbiAgICAgIGN1cnJlbnRMZWZ0ID0gZWwuc2Nyb2xsTGVmdDtcblxuICAgICAgaWYgKCFkdXJhdGlvbikge1xuICAgICAgICBlbC5zY3JvbGxMZWZ0ID0gbGVmdDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIWR1cmF0aW9uKSByZXR1cm47XG5cbiAgICBpZiAoYW5pbWF0ZVRvcCkge1xuICAgICAgbWF4VG9wID0gZWwuc2Nyb2xsSGVpZ2h0IC0gZWwub2Zmc2V0SGVpZ2h0O1xuICAgICAgbmV3VG9wID0gTWF0aC5tYXgoTWF0aC5taW4odG9wLCBtYXhUb3ApLCAwKTtcbiAgICB9XG5cbiAgICBpZiAoYW5pbWF0ZUxlZnQpIHtcbiAgICAgIG1heExlZnQgPSBlbC5zY3JvbGxXaWR0aCAtIGVsLm9mZnNldFdpZHRoO1xuICAgICAgbmV3TGVmdCA9IE1hdGgubWF4KE1hdGgubWluKGxlZnQsIG1heExlZnQpLCAwKTtcbiAgICB9XG5cbiAgICB2YXIgc3RhcnRUaW1lID0gbnVsbDtcbiAgICBpZiAoYW5pbWF0ZVRvcCAmJiBuZXdUb3AgPT09IGN1cnJlbnRUb3ApIGFuaW1hdGVUb3AgPSBmYWxzZTtcbiAgICBpZiAoYW5pbWF0ZUxlZnQgJiYgbmV3TGVmdCA9PT0gY3VycmVudExlZnQpIGFuaW1hdGVMZWZ0ID0gZmFsc2U7XG5cbiAgICBmdW5jdGlvbiByZW5kZXIodGltZSkge1xuICAgICAgaWYgKHRpbWUgPT09IHZvaWQgMCkge1xuICAgICAgICB0aW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGFydFRpbWUgPT09IG51bGwpIHtcbiAgICAgICAgc3RhcnRUaW1lID0gdGltZTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByb2dyZXNzID0gTWF0aC5tYXgoTWF0aC5taW4oKHRpbWUgLSBzdGFydFRpbWUpIC8gZHVyYXRpb24sIDEpLCAwKTtcbiAgICAgIHZhciBlYXNlUHJvZ3Jlc3MgPSBlYXNpbmcgPT09ICdsaW5lYXInID8gcHJvZ3Jlc3MgOiAwLjUgLSBNYXRoLmNvcyhwcm9ncmVzcyAqIE1hdGguUEkpIC8gMjtcbiAgICAgIHZhciBkb25lO1xuICAgICAgaWYgKGFuaW1hdGVUb3ApIHNjcm9sbFRvcCA9IGN1cnJlbnRUb3AgKyBlYXNlUHJvZ3Jlc3MgKiAobmV3VG9wIC0gY3VycmVudFRvcCk7XG4gICAgICBpZiAoYW5pbWF0ZUxlZnQpIHNjcm9sbExlZnQgPSBjdXJyZW50TGVmdCArIGVhc2VQcm9ncmVzcyAqIChuZXdMZWZ0IC0gY3VycmVudExlZnQpO1xuXG4gICAgICBpZiAoYW5pbWF0ZVRvcCAmJiBuZXdUb3AgPiBjdXJyZW50VG9wICYmIHNjcm9sbFRvcCA+PSBuZXdUb3ApIHtcbiAgICAgICAgZWwuc2Nyb2xsVG9wID0gbmV3VG9wO1xuICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGFuaW1hdGVUb3AgJiYgbmV3VG9wIDwgY3VycmVudFRvcCAmJiBzY3JvbGxUb3AgPD0gbmV3VG9wKSB7XG4gICAgICAgIGVsLnNjcm9sbFRvcCA9IG5ld1RvcDtcbiAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChhbmltYXRlTGVmdCAmJiBuZXdMZWZ0ID4gY3VycmVudExlZnQgJiYgc2Nyb2xsTGVmdCA+PSBuZXdMZWZ0KSB7XG4gICAgICAgIGVsLnNjcm9sbExlZnQgPSBuZXdMZWZ0O1xuICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGFuaW1hdGVMZWZ0ICYmIG5ld0xlZnQgPCBjdXJyZW50TGVmdCAmJiBzY3JvbGxMZWZ0IDw9IG5ld0xlZnQpIHtcbiAgICAgICAgZWwuc2Nyb2xsTGVmdCA9IG5ld0xlZnQ7XG4gICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoZG9uZSkge1xuICAgICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGFuaW1hdGVUb3ApIGVsLnNjcm9sbFRvcCA9IHNjcm9sbFRvcDtcbiAgICAgIGlmIChhbmltYXRlTGVmdCkgZWwuc2Nyb2xsTGVmdCA9IHNjcm9sbExlZnQ7XG4gICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlbmRlcik7XG4gICAgfVxuXG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShyZW5kZXIpO1xuICB9KTtcbn0gLy8gc2Nyb2xsVG9wKHRvcCwgZHVyYXRpb24sIGVhc2luZywgY2FsbGJhY2spIHtcblxuXG5mdW5jdGlvbiBzY3JvbGxUb3AoKSB7XG4gIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgfVxuXG4gIHZhciB0b3AgPSBhcmdzWzBdLFxuICAgICAgZHVyYXRpb24gPSBhcmdzWzFdLFxuICAgICAgZWFzaW5nID0gYXJnc1syXSxcbiAgICAgIGNhbGxiYWNrID0gYXJnc1szXTtcblxuICBpZiAoYXJncy5sZW5ndGggPT09IDMgJiYgdHlwZW9mIGVhc2luZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRvcCA9IGFyZ3NbMF07XG4gICAgZHVyYXRpb24gPSBhcmdzWzFdO1xuICAgIGNhbGxiYWNrID0gYXJnc1syXTtcbiAgICBlYXNpbmcgPSBhcmdzWzNdO1xuICB9XG5cbiAgdmFyIGRvbSA9IHRoaXM7XG5cbiAgaWYgKHR5cGVvZiB0b3AgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKGRvbS5sZW5ndGggPiAwKSByZXR1cm4gZG9tWzBdLnNjcm9sbFRvcDtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBkb20uc2Nyb2xsVG8odW5kZWZpbmVkLCB0b3AsIGR1cmF0aW9uLCBlYXNpbmcsIGNhbGxiYWNrKTtcbn1cblxuZnVuY3Rpb24gc2Nyb2xsTGVmdCgpIHtcbiAgZm9yICh2YXIgX2xlbjMgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4zKSwgX2tleTMgPSAwOyBfa2V5MyA8IF9sZW4zOyBfa2V5MysrKSB7XG4gICAgYXJnc1tfa2V5M10gPSBhcmd1bWVudHNbX2tleTNdO1xuICB9XG5cbiAgdmFyIGxlZnQgPSBhcmdzWzBdLFxuICAgICAgZHVyYXRpb24gPSBhcmdzWzFdLFxuICAgICAgZWFzaW5nID0gYXJnc1syXSxcbiAgICAgIGNhbGxiYWNrID0gYXJnc1szXTtcblxuICBpZiAoYXJncy5sZW5ndGggPT09IDMgJiYgdHlwZW9mIGVhc2luZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGxlZnQgPSBhcmdzWzBdO1xuICAgIGR1cmF0aW9uID0gYXJnc1sxXTtcbiAgICBjYWxsYmFjayA9IGFyZ3NbMl07XG4gICAgZWFzaW5nID0gYXJnc1szXTtcbiAgfVxuXG4gIHZhciBkb20gPSB0aGlzO1xuXG4gIGlmICh0eXBlb2YgbGVmdCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAoZG9tLmxlbmd0aCA+IDApIHJldHVybiBkb21bMF0uc2Nyb2xsTGVmdDtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBkb20uc2Nyb2xsVG8obGVmdCwgdW5kZWZpbmVkLCBkdXJhdGlvbiwgZWFzaW5nLCBjYWxsYmFjayk7XG59XG5cbmZ1bmN0aW9uIGFuaW1hdGUoaW5pdGlhbFByb3BzLCBpbml0aWFsUGFyYW1zKSB7XG4gIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgdmFyIGVscyA9IHRoaXM7XG4gIHZhciBhID0ge1xuICAgIHByb3BzOiBPYmplY3QuYXNzaWduKHt9LCBpbml0aWFsUHJvcHMpLFxuICAgIHBhcmFtczogT2JqZWN0LmFzc2lnbih7XG4gICAgICBkdXJhdGlvbjogMzAwLFxuICAgICAgZWFzaW5nOiAnc3dpbmcnIC8vIG9yICdsaW5lYXInXG5cbiAgICAgIC8qIENhbGxiYWNrc1xuICAgICAgYmVnaW4oZWxlbWVudHMpXG4gICAgICBjb21wbGV0ZShlbGVtZW50cylcbiAgICAgIHByb2dyZXNzKGVsZW1lbnRzLCBjb21wbGV0ZSwgcmVtYWluaW5nLCBzdGFydCwgdHdlZW5WYWx1ZSlcbiAgICAgICovXG5cbiAgICB9LCBpbml0aWFsUGFyYW1zKSxcbiAgICBlbGVtZW50czogZWxzLFxuICAgIGFuaW1hdGluZzogZmFsc2UsXG4gICAgcXVlOiBbXSxcbiAgICBlYXNpbmdQcm9ncmVzczogZnVuY3Rpb24gZWFzaW5nUHJvZ3Jlc3MoZWFzaW5nLCBwcm9ncmVzcykge1xuICAgICAgaWYgKGVhc2luZyA9PT0gJ3N3aW5nJykge1xuICAgICAgICByZXR1cm4gMC41IC0gTWF0aC5jb3MocHJvZ3Jlc3MgKiBNYXRoLlBJKSAvIDI7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgZWFzaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBlYXNpbmcocHJvZ3Jlc3MpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJvZ3Jlc3M7XG4gICAgfSxcbiAgICBzdG9wOiBmdW5jdGlvbiBzdG9wKCkge1xuICAgICAgaWYgKGEuZnJhbWVJZCkge1xuICAgICAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUoYS5mcmFtZUlkKTtcbiAgICAgIH1cblxuICAgICAgYS5hbmltYXRpbmcgPSBmYWxzZTtcbiAgICAgIGEuZWxlbWVudHMuZWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBlbDtcbiAgICAgICAgZGVsZXRlIGVsZW1lbnQuZG9tN0FuaW1hdGVJbnN0YW5jZTtcbiAgICAgIH0pO1xuICAgICAgYS5xdWUgPSBbXTtcbiAgICB9LFxuICAgIGRvbmU6IGZ1bmN0aW9uIGRvbmUoY29tcGxldGUpIHtcbiAgICAgIGEuYW5pbWF0aW5nID0gZmFsc2U7XG4gICAgICBhLmVsZW1lbnRzLmVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgIHZhciBlbGVtZW50ID0gZWw7XG4gICAgICAgIGRlbGV0ZSBlbGVtZW50LmRvbTdBbmltYXRlSW5zdGFuY2U7XG4gICAgICB9KTtcbiAgICAgIGlmIChjb21wbGV0ZSkgY29tcGxldGUoZWxzKTtcblxuICAgICAgaWYgKGEucXVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdmFyIHF1ZSA9IGEucXVlLnNoaWZ0KCk7XG4gICAgICAgIGEuYW5pbWF0ZShxdWVbMF0sIHF1ZVsxXSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBhbmltYXRlOiBmdW5jdGlvbiBhbmltYXRlKHByb3BzLCBwYXJhbXMpIHtcbiAgICAgIGlmIChhLmFuaW1hdGluZykge1xuICAgICAgICBhLnF1ZS5wdXNoKFtwcm9wcywgcGFyYW1zXSk7XG4gICAgICAgIHJldHVybiBhO1xuICAgICAgfVxuXG4gICAgICB2YXIgZWxlbWVudHMgPSBbXTsgLy8gRGVmaW5lICYgQ2FjaGUgSW5pdGlhbHMgJiBVbml0c1xuXG4gICAgICBhLmVsZW1lbnRzLmVhY2goZnVuY3Rpb24gKGVsLCBpbmRleCkge1xuICAgICAgICB2YXIgaW5pdGlhbEZ1bGxWYWx1ZTtcbiAgICAgICAgdmFyIGluaXRpYWxWYWx1ZTtcbiAgICAgICAgdmFyIHVuaXQ7XG4gICAgICAgIHZhciBmaW5hbFZhbHVlO1xuICAgICAgICB2YXIgZmluYWxGdWxsVmFsdWU7XG4gICAgICAgIGlmICghZWwuZG9tN0FuaW1hdGVJbnN0YW5jZSkgYS5lbGVtZW50c1tpbmRleF0uZG9tN0FuaW1hdGVJbnN0YW5jZSA9IGE7XG4gICAgICAgIGVsZW1lbnRzW2luZGV4XSA9IHtcbiAgICAgICAgICBjb250YWluZXI6IGVsXG4gICAgICAgIH07XG4gICAgICAgIE9iamVjdC5rZXlzKHByb3BzKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgICAgaW5pdGlhbEZ1bGxWYWx1ZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKHByb3ApLnJlcGxhY2UoJywnLCAnLicpO1xuICAgICAgICAgIGluaXRpYWxWYWx1ZSA9IHBhcnNlRmxvYXQoaW5pdGlhbEZ1bGxWYWx1ZSk7XG4gICAgICAgICAgdW5pdCA9IGluaXRpYWxGdWxsVmFsdWUucmVwbGFjZShpbml0aWFsVmFsdWUsICcnKTtcbiAgICAgICAgICBmaW5hbFZhbHVlID0gcGFyc2VGbG9hdChwcm9wc1twcm9wXSk7XG4gICAgICAgICAgZmluYWxGdWxsVmFsdWUgPSBwcm9wc1twcm9wXSArIHVuaXQ7XG4gICAgICAgICAgZWxlbWVudHNbaW5kZXhdW3Byb3BdID0ge1xuICAgICAgICAgICAgaW5pdGlhbEZ1bGxWYWx1ZTogaW5pdGlhbEZ1bGxWYWx1ZSxcbiAgICAgICAgICAgIGluaXRpYWxWYWx1ZTogaW5pdGlhbFZhbHVlLFxuICAgICAgICAgICAgdW5pdDogdW5pdCxcbiAgICAgICAgICAgIGZpbmFsVmFsdWU6IGZpbmFsVmFsdWUsXG4gICAgICAgICAgICBmaW5hbEZ1bGxWYWx1ZTogZmluYWxGdWxsVmFsdWUsXG4gICAgICAgICAgICBjdXJyZW50VmFsdWU6IGluaXRpYWxWYWx1ZVxuICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICB2YXIgc3RhcnRUaW1lID0gbnVsbDtcbiAgICAgIHZhciB0aW1lO1xuICAgICAgdmFyIGVsZW1lbnRzRG9uZSA9IDA7XG4gICAgICB2YXIgcHJvcHNEb25lID0gMDtcbiAgICAgIHZhciBkb25lO1xuICAgICAgdmFyIGJlZ2FuID0gZmFsc2U7XG4gICAgICBhLmFuaW1hdGluZyA9IHRydWU7XG5cbiAgICAgIGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgdGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgICB2YXIgcHJvZ3Jlc3M7XG4gICAgICAgIHZhciBlYXNlUHJvZ3Jlc3M7IC8vIGxldCBlbDtcblxuICAgICAgICBpZiAoIWJlZ2FuKSB7XG4gICAgICAgICAgYmVnYW4gPSB0cnVlO1xuICAgICAgICAgIGlmIChwYXJhbXMuYmVnaW4pIHBhcmFtcy5iZWdpbihlbHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0YXJ0VGltZSA9PT0gbnVsbCkge1xuICAgICAgICAgIHN0YXJ0VGltZSA9IHRpbWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFyYW1zLnByb2dyZXNzKSB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgICAgcGFyYW1zLnByb2dyZXNzKGVscywgTWF0aC5tYXgoTWF0aC5taW4oKHRpbWUgLSBzdGFydFRpbWUpIC8gcGFyYW1zLmR1cmF0aW9uLCAxKSwgMCksIHN0YXJ0VGltZSArIHBhcmFtcy5kdXJhdGlvbiAtIHRpbWUgPCAwID8gMCA6IHN0YXJ0VGltZSArIHBhcmFtcy5kdXJhdGlvbiAtIHRpbWUsIHN0YXJ0VGltZSk7XG4gICAgICAgIH1cblxuICAgICAgICBlbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgICAgdmFyIGVsID0gZWxlbWVudDtcbiAgICAgICAgICBpZiAoZG9uZSB8fCBlbC5kb25lKSByZXR1cm47XG4gICAgICAgICAgT2JqZWN0LmtleXMocHJvcHMpLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgICAgICAgIGlmIChkb25lIHx8IGVsLmRvbmUpIHJldHVybjtcbiAgICAgICAgICAgIHByb2dyZXNzID0gTWF0aC5tYXgoTWF0aC5taW4oKHRpbWUgLSBzdGFydFRpbWUpIC8gcGFyYW1zLmR1cmF0aW9uLCAxKSwgMCk7XG4gICAgICAgICAgICBlYXNlUHJvZ3Jlc3MgPSBhLmVhc2luZ1Byb2dyZXNzKHBhcmFtcy5lYXNpbmcsIHByb2dyZXNzKTtcbiAgICAgICAgICAgIHZhciBfZWwkcHJvcCA9IGVsW3Byb3BdLFxuICAgICAgICAgICAgICAgIGluaXRpYWxWYWx1ZSA9IF9lbCRwcm9wLmluaXRpYWxWYWx1ZSxcbiAgICAgICAgICAgICAgICBmaW5hbFZhbHVlID0gX2VsJHByb3AuZmluYWxWYWx1ZSxcbiAgICAgICAgICAgICAgICB1bml0ID0gX2VsJHByb3AudW5pdDtcbiAgICAgICAgICAgIGVsW3Byb3BdLmN1cnJlbnRWYWx1ZSA9IGluaXRpYWxWYWx1ZSArIGVhc2VQcm9ncmVzcyAqIChmaW5hbFZhbHVlIC0gaW5pdGlhbFZhbHVlKTtcbiAgICAgICAgICAgIHZhciBjdXJyZW50VmFsdWUgPSBlbFtwcm9wXS5jdXJyZW50VmFsdWU7XG5cbiAgICAgICAgICAgIGlmIChmaW5hbFZhbHVlID4gaW5pdGlhbFZhbHVlICYmIGN1cnJlbnRWYWx1ZSA+PSBmaW5hbFZhbHVlIHx8IGZpbmFsVmFsdWUgPCBpbml0aWFsVmFsdWUgJiYgY3VycmVudFZhbHVlIDw9IGZpbmFsVmFsdWUpIHtcbiAgICAgICAgICAgICAgZWwuY29udGFpbmVyLnN0eWxlW3Byb3BdID0gZmluYWxWYWx1ZSArIHVuaXQ7XG4gICAgICAgICAgICAgIHByb3BzRG9uZSArPSAxO1xuXG4gICAgICAgICAgICAgIGlmIChwcm9wc0RvbmUgPT09IE9iamVjdC5rZXlzKHByb3BzKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBlbC5kb25lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBlbGVtZW50c0RvbmUgKz0gMTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChlbGVtZW50c0RvbmUgPT09IGVsZW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgICAgIGEuZG9uZShwYXJhbXMuY29tcGxldGUpO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGVsLmNvbnRhaW5lci5zdHlsZVtwcm9wXSA9IGN1cnJlbnRWYWx1ZSArIHVuaXQ7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoZG9uZSkgcmV0dXJuOyAvLyBUaGVuIGNhbGxcblxuICAgICAgICBhLmZyYW1lSWQgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlbmRlcik7XG4gICAgICB9XG5cbiAgICAgIGEuZnJhbWVJZCA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVuZGVyKTtcbiAgICAgIHJldHVybiBhO1xuICAgIH1cbiAgfTtcblxuICBpZiAoYS5lbGVtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gZWxzO1xuICB9XG5cbiAgdmFyIGFuaW1hdGVJbnN0YW5jZTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGEuZWxlbWVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAoYS5lbGVtZW50c1tpXS5kb203QW5pbWF0ZUluc3RhbmNlKSB7XG4gICAgICBhbmltYXRlSW5zdGFuY2UgPSBhLmVsZW1lbnRzW2ldLmRvbTdBbmltYXRlSW5zdGFuY2U7XG4gICAgfSBlbHNlIGEuZWxlbWVudHNbaV0uZG9tN0FuaW1hdGVJbnN0YW5jZSA9IGE7XG4gIH1cblxuICBpZiAoIWFuaW1hdGVJbnN0YW5jZSkge1xuICAgIGFuaW1hdGVJbnN0YW5jZSA9IGE7XG4gIH1cblxuICBpZiAoaW5pdGlhbFByb3BzID09PSAnc3RvcCcpIHtcbiAgICBhbmltYXRlSW5zdGFuY2Uuc3RvcCgpO1xuICB9IGVsc2Uge1xuICAgIGFuaW1hdGVJbnN0YW5jZS5hbmltYXRlKGEucHJvcHMsIGEucGFyYW1zKTtcbiAgfVxuXG4gIHJldHVybiBlbHM7XG59XG5cbmZ1bmN0aW9uIHN0b3AoKSB7XG4gIHZhciBlbHMgPSB0aGlzO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZWxzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKGVsc1tpXS5kb203QW5pbWF0ZUluc3RhbmNlKSB7XG4gICAgICBlbHNbaV0uZG9tN0FuaW1hdGVJbnN0YW5jZS5zdG9wKCk7XG4gICAgfVxuICB9XG59XG5cbnZhciBub1RyaWdnZXIgPSAncmVzaXplIHNjcm9sbCcuc3BsaXQoJyAnKTtcblxuZnVuY3Rpb24gc2hvcnRjdXQobmFtZSkge1xuICBmdW5jdGlvbiBldmVudEhhbmRsZXIoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgYXJnc1swXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAobm9UcmlnZ2VyLmluZGV4T2YobmFtZSkgPCAwKSB7XG4gICAgICAgICAgaWYgKG5hbWUgaW4gdGhpc1tpXSkgdGhpc1tpXVtuYW1lXSgpO2Vsc2Uge1xuICAgICAgICAgICAgJCh0aGlzW2ldKS50cmlnZ2VyKG5hbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5vbi5hcHBseSh0aGlzLCBbbmFtZV0uY29uY2F0KGFyZ3MpKTtcbiAgfVxuXG4gIHJldHVybiBldmVudEhhbmRsZXI7XG59XG5cbnZhciBjbGljayA9IHNob3J0Y3V0KCdjbGljaycpO1xudmFyIGJsdXIgPSBzaG9ydGN1dCgnYmx1cicpO1xudmFyIGZvY3VzID0gc2hvcnRjdXQoJ2ZvY3VzJyk7XG52YXIgZm9jdXNpbiA9IHNob3J0Y3V0KCdmb2N1c2luJyk7XG52YXIgZm9jdXNvdXQgPSBzaG9ydGN1dCgnZm9jdXNvdXQnKTtcbnZhciBrZXl1cCA9IHNob3J0Y3V0KCdrZXl1cCcpO1xudmFyIGtleWRvd24gPSBzaG9ydGN1dCgna2V5ZG93bicpO1xudmFyIGtleXByZXNzID0gc2hvcnRjdXQoJ2tleXByZXNzJyk7XG52YXIgc3VibWl0ID0gc2hvcnRjdXQoJ3N1Ym1pdCcpO1xudmFyIGNoYW5nZSA9IHNob3J0Y3V0KCdjaGFuZ2UnKTtcbnZhciBtb3VzZWRvd24gPSBzaG9ydGN1dCgnbW91c2Vkb3duJyk7XG52YXIgbW91c2Vtb3ZlID0gc2hvcnRjdXQoJ21vdXNlbW92ZScpO1xudmFyIG1vdXNldXAgPSBzaG9ydGN1dCgnbW91c2V1cCcpO1xudmFyIG1vdXNlZW50ZXIgPSBzaG9ydGN1dCgnbW91c2VlbnRlcicpO1xudmFyIG1vdXNlbGVhdmUgPSBzaG9ydGN1dCgnbW91c2VsZWF2ZScpO1xudmFyIG1vdXNlb3V0ID0gc2hvcnRjdXQoJ21vdXNlb3V0Jyk7XG52YXIgbW91c2VvdmVyID0gc2hvcnRjdXQoJ21vdXNlb3ZlcicpO1xudmFyIHRvdWNoc3RhcnQgPSBzaG9ydGN1dCgndG91Y2hzdGFydCcpO1xudmFyIHRvdWNoZW5kID0gc2hvcnRjdXQoJ3RvdWNoZW5kJyk7XG52YXIgdG91Y2htb3ZlID0gc2hvcnRjdXQoJ3RvdWNobW92ZScpO1xudmFyIHJlc2l6ZSA9IHNob3J0Y3V0KCdyZXNpemUnKTtcbnZhciBzY3JvbGwgPSBzaG9ydGN1dCgnc2Nyb2xsJyk7XG5cbmV4cG9ydCBkZWZhdWx0ICQ7XG5leHBvcnQgeyAkLCBhZGQsIGFkZENsYXNzLCBhbmltYXRlLCBhbmltYXRpb25FbmQsIGFwcGVuZCwgYXBwZW5kVG8sIGF0dHIsIGJsdXIsIGNoYW5nZSwgY2hpbGRyZW4sIGNsaWNrLCBjbG9zZXN0LCBjc3MsIGRhdGEsIGRhdGFzZXQsIGRldGFjaCwgZWFjaCwgZW1wdHksIGVxLCBmaWx0ZXIsIGZpbmQsIGZvY3VzLCBmb2N1c2luLCBmb2N1c291dCwgaGFzQ2xhc3MsIGhlaWdodCwgaGlkZSwgaHRtbCwgaW5kZXgsIGluc2VydEFmdGVyLCBpbnNlcnRCZWZvcmUsIGlzLCBrZXlkb3duLCBrZXlwcmVzcywga2V5dXAsIG1vdXNlZG93biwgbW91c2VlbnRlciwgbW91c2VsZWF2ZSwgbW91c2Vtb3ZlLCBtb3VzZW91dCwgbW91c2VvdmVyLCBtb3VzZXVwLCBuZXh0LCBuZXh0QWxsLCBvZmYsIG9mZnNldCwgb24sIG9uY2UsIG91dGVySGVpZ2h0LCBvdXRlcldpZHRoLCBwYXJlbnQsIHBhcmVudHMsIHByZXBlbmQsIHByZXBlbmRUbywgcHJldiwgcHJldkFsbCwgcHJvcCwgcmVtb3ZlLCByZW1vdmVBdHRyLCByZW1vdmVDbGFzcywgcmVtb3ZlRGF0YSwgcmVzaXplLCBzY3JvbGwsIHNjcm9sbExlZnQsIHNjcm9sbFRvLCBzY3JvbGxUb3AsIHNob3csIHNpYmxpbmdzLCBzdG9wLCBzdHlsZXMsIHN1Ym1pdCwgdGV4dCwgdG9nZ2xlQ2xhc3MsIHRvdWNoZW5kLCB0b3VjaG1vdmUsIHRvdWNoc3RhcnQsIHRyYW5zZm9ybSwgdHJhbnNpdGlvbiwgdHJhbnNpdGlvbkVuZCwgdHJpZ2dlciwgdmFsLCB2YWx1ZSwgd2lkdGggfTtcbiIsImltcG9ydCB7ICQsIGFkZENsYXNzLCByZW1vdmVDbGFzcywgaGFzQ2xhc3MsIHRvZ2dsZUNsYXNzLCBhdHRyLCByZW1vdmVBdHRyLCB0cmFuc2Zvcm0sIHRyYW5zaXRpb24sIG9uLCBvZmYsIHRyaWdnZXIsIHRyYW5zaXRpb25FbmQsIG91dGVyV2lkdGgsIG91dGVySGVpZ2h0LCBzdHlsZXMsIG9mZnNldCwgY3NzLCBlYWNoLCBodG1sLCB0ZXh0LCBpcywgaW5kZXgsIGVxLCBhcHBlbmQsIHByZXBlbmQsIG5leHQsIG5leHRBbGwsIHByZXYsIHByZXZBbGwsIHBhcmVudCwgcGFyZW50cywgY2xvc2VzdCwgZmluZCwgY2hpbGRyZW4sIGZpbHRlciwgcmVtb3ZlIH0gZnJvbSAnZG9tNyc7XG52YXIgTWV0aG9kcyA9IHtcbiAgYWRkQ2xhc3M6IGFkZENsYXNzLFxuICByZW1vdmVDbGFzczogcmVtb3ZlQ2xhc3MsXG4gIGhhc0NsYXNzOiBoYXNDbGFzcyxcbiAgdG9nZ2xlQ2xhc3M6IHRvZ2dsZUNsYXNzLFxuICBhdHRyOiBhdHRyLFxuICByZW1vdmVBdHRyOiByZW1vdmVBdHRyLFxuICB0cmFuc2Zvcm06IHRyYW5zZm9ybSxcbiAgdHJhbnNpdGlvbjogdHJhbnNpdGlvbixcbiAgb246IG9uLFxuICBvZmY6IG9mZixcbiAgdHJpZ2dlcjogdHJpZ2dlcixcbiAgdHJhbnNpdGlvbkVuZDogdHJhbnNpdGlvbkVuZCxcbiAgb3V0ZXJXaWR0aDogb3V0ZXJXaWR0aCxcbiAgb3V0ZXJIZWlnaHQ6IG91dGVySGVpZ2h0LFxuICBzdHlsZXM6IHN0eWxlcyxcbiAgb2Zmc2V0OiBvZmZzZXQsXG4gIGNzczogY3NzLFxuICBlYWNoOiBlYWNoLFxuICBodG1sOiBodG1sLFxuICB0ZXh0OiB0ZXh0LFxuICBpczogaXMsXG4gIGluZGV4OiBpbmRleCxcbiAgZXE6IGVxLFxuICBhcHBlbmQ6IGFwcGVuZCxcbiAgcHJlcGVuZDogcHJlcGVuZCxcbiAgbmV4dDogbmV4dCxcbiAgbmV4dEFsbDogbmV4dEFsbCxcbiAgcHJldjogcHJldixcbiAgcHJldkFsbDogcHJldkFsbCxcbiAgcGFyZW50OiBwYXJlbnQsXG4gIHBhcmVudHM6IHBhcmVudHMsXG4gIGNsb3Nlc3Q6IGNsb3Nlc3QsXG4gIGZpbmQ6IGZpbmQsXG4gIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgZmlsdGVyOiBmaWx0ZXIsXG4gIHJlbW92ZTogcmVtb3ZlXG59O1xuT2JqZWN0LmtleXMoTWV0aG9kcykuZm9yRWFjaChmdW5jdGlvbiAobWV0aG9kTmFtZSkge1xuICAkLmZuW21ldGhvZE5hbWVdID0gTWV0aG9kc1ttZXRob2ROYW1lXTtcbn0pO1xuZXhwb3J0IGRlZmF1bHQgJDsiLCJleHBvcnQgY29uc3QgRE9Nc3RyaW5ncyA9IHtcbiAgICBzZWxlY3RvcjogJy5zZWxlY3RvcicsXG4gICAgc2VsZWN0b3JBY3RpdmU6ICdzZWxlY3Rvci0tYWN0aXZlJyxcbiAgICBzZWxlY3Rvck9wdGlvbjogJy5zZWxlY3Rvcl9fb3B0aW9uJyxcbiAgICBzZWxlY3Rvck9wdGlvblRleHQ6ICcuc2VsZWN0b3JfX29wdGlvbi0tYWxsIHAnLFxuICAgIHNlbGVjdG9yT3B0aW9uQWN0aXZlOiAnLnNlbGVjdG9yX19vcHRpb24tLWFjdGl2ZScsXG4gICAgc2VsZWN0b3JPcHRpb25BY3RpdmVDbGFzczogJ3NlbGVjdG9yX19vcHRpb24tLWFjdGl2ZScsXG5cbiAgICBvcGVuRmlsdGVyOiAnLm9wZW4tZmlsdGVyJyxcbiAgICBjbG9zZUZpbHRlcjogJy5maWx0ZXJfX2Nsb3NlLWZpbHRlcnMnLFxuICAgIGJhY2tkcm9wOiAnLmJhY2tkcm9wJyxcbiAgICBmaWx0ZXJNb2JpbGU6ICcuZmlsdGVyLW1vYmlsZScsXG4gICAgZmlsdGVyU2l6ZTogJy5maWx0ZXJfX3NpemUnLFxuICAgIGZpbHRlclNpemVTZWxlY3RlZDogJ2ZpbHRlcl9fc2l6ZS0tc2VsZWN0ZWQnLFxuICAgIGZpbHRlckZpdDogJy5maWx0ZXJfX2ZpdC1vcHRpb24nLFxuICAgIGZpbHRlckZpdFNlbGVjdGVkOiAnZmlsdGVyX19maXQtb3B0aW9uLS1zZWxlY3RlZCcsXG4gICAgZmlsdGVyQ29sb3I6ICcuZmlsdGVyX19jb2xvci1vcHRpb24nLFxuICAgIGZpbHRlckNvbG9yU2VsZWN0ZWQ6ICdmaWx0ZXJfX2NvbG9yLW9wdGlvbi0tYWN0aXZlJyxcbiAgICBsb3dlclByaWNlSW5SYW5nZTogJy5maWx0ZXJfX3ByaWNlLW51bWJlci0tbG93ZXInLFxuICAgIGhpZ2hlclByaWNlSW5SYW5nZTogJy5maWx0ZXJfX3ByaWNlLW51bWJlci0taGlnaGVyJyxcbiAgICBlbXB0eUZpbHRlcjogJy5lbXB0eS1maWx0ZXItcmVzdWx0JyxcblxuICAgIGNsZWFuRmlsdGVyczogJy5maWx0ZXJfX2J1dHRvbi0tY2xlYW4nLFxuICAgIGFwcGx5RmlsdGVyczogJy5maWx0ZXJfX2J1dHRvbi0tYXBwbHknLFxuXG5cbiAgICBwYWdpbmF0aW9uQ29udGFpbmVyOiAnLnBhZ2luYXRpb24nLFxuICAgIHBhZ2luYXRpb25MaW5rOiAnLnBhZ2luYXRpb25fX2xpbmsnLFxuICAgIHBhZ2luYXRpb25MaW5rQWN0aXZlOiAncGFnaW5hdGlvbl9fbGluay0tYWN0aXZlJyxcbiAgICBhcnJvd0JhY2s6ICcucGFnaW5hdGlvbl9fYXJyb3ctLXByZXYnLFxuICAgIGFycm93TmV4dDogJy5wYWdpbmF0aW9uX19hcnJvdy0tbmV4dCcsXG5cblxuXG4gICAgcHJvZHVjdFNpemU6ICcucHJvZHVjdC1kZXNjcmlwdGlvbl9fc2l6ZScsXG4gICAgcHJvZHVjdENvbG9yOiAnLnByb2R1Y3QtZGVzY3JpcHRpb25fX2NvbG9yJyxcbiAgICBwcm9kdWN0U2l6ZVNlbGVjdGVkOiAncHJvZHVjdC1kZXNjcmlwdGlvbl9fc2l6ZS0tYWN0aXZlJyxcbiAgICBwcm9kdWN0Q29sb3JTZWxlY3RlZDogJ3Byb2R1Y3QtZGVzY3JpcHRpb25fX2NvbG9yLS1hY3RpdmUnLFxuXG4gICAgYnVyZ2VyTWVudUljb246ICcubmF2aWdhdGlvbl9fYnVyZ2VyLW1lbnUnLFxuICAgIGJ1cmdlck1lbnVDb250YWluZXI6ICcudmVydGljYWwtbWVudScsXG4gICAgcHJvZHVjdEltYWdlc09wdGlvbnM6ICcucHJvZHVjdC1kZXNjcmlwdGlvbl9fbW9yZS1pbWFnZXMtaXRlbScsXG5cbiAgICBmbGlwcGluZ0ltYWdlQXJyb3dMZWZ0OiAnLnByb2R1Y3QtZGVzY3JpcHRpb25fX2Fycm93LS1sZWZ0JyxcbiAgICBmbGlwcGluZ0ltYWdlQXJyb3dSaWdodDogJy5wcm9kdWN0LWRlc2NyaXB0aW9uX19hcnJvdy0tcmlnaHQnLFxuICAgIGltYWdlc0NvbnRhaW5lcjogJyNzbGlkZXInXG5cblxufVxuXG4iLCJcbmltcG9ydCBTd2lwZXIsIHsgUGFnaW5hdGlvbiB9IGZyb20gXCJzd2lwZXJcIjtcblN3aXBlci51c2UoW1BhZ2luYXRpb25dKTtcblxuLy9SZWdpc3RlciBhY3RpdmUgY2xhc3NcbmV4cG9ydCBjb25zdCByZWdpc3RlckFjdGl2ZUNsYXNzID0gKG9wdGlvbkNsYXNzLCBvcHRpb25DbGFzc0FjdGl2ZSkgPT4ge1xuICAgIGNvbnN0IGZpbHRlck9wdGlvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKG9wdGlvbkNsYXNzKTtcbiAgICBmaWx0ZXJPcHRpb25zLmZvckVhY2goY3VyID0+IHtcbiAgICAgICAgY3VyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRQYWdlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLicgKyBvcHRpb25DbGFzc0FjdGl2ZSlcblxuICAgICAgICAgICAgaWYgKHNlbGVjdGVkUGFnZSkge1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy4nICsgb3B0aW9uQ2xhc3NBY3RpdmUpLmNsYXNzTGlzdC5yZW1vdmUob3B0aW9uQ2xhc3NBY3RpdmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3VyLmNsYXNzTGlzdC5hZGQob3B0aW9uQ2xhc3NBY3RpdmUpO1xuICAgICAgICB9KVxuICAgIH0pXG59XG5cblxuY29uc3QgY2xvc2VNZW51ID0gKGV2ZW50LCBpY29uLCBtZW51KSA9PiB7XG4gICAgY29uc3QgY2xhc3NMaXN0ID0gZXZlbnQudGFyZ2V0LmNsYXNzTGlzdFxuICAgIGlmIChldmVudC50YXJnZXQgIT09IG1lbnUgJiYgIWNsYXNzTGlzdC5jb250YWlucygndmVydGljYWwtbWVudV9fbmF2aWdhdGlvbicpICYmICFjbGFzc0xpc3QuY29udGFpbnMoJ3ZlcnRpY2FsLW1lbnVfX25hdmlnYXRpb24tbGluaycpKSB7XG4gICAgICAgIGljb24uc3R5bGUuZGlzcGxheSA9ICdmbGV4J1xuICAgICAgICBtZW51LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSdcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjbG9zZU1lbnUpXG4gICAgfVxufVxuXG5leHBvcnQgY29uc3QgaW5pdEJ1cmdlck1lbnVDbGlja0xpc3RlbmVyID0gKG1lbnVJY29uLCBtZW51Q29udGFpbmVyKSA9PiB7XG4gICAgY29uc3QgaWNvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IobWVudUljb24pXG4gICAgY29uc3QgbWVudSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IobWVudUNvbnRhaW5lcilcblxuICAgIGljb24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+IHtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcbiAgICAgICAgaWNvbi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnXG4gICAgICAgIG1lbnUuc3R5bGUuZGlzcGxheSA9ICdibG9jaydcbiAgICB9KVxuXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+IGNsb3NlTWVudShldmVudCwgaWNvbiwgbWVudSkpXG5cbn1cblxuXG5cblxuXG4iLCJpbXBvcnQgU3dpcGVyLCB7IFBhZ2luYXRpb24gfSBmcm9tIFwic3dpcGVyXCI7XG5Td2lwZXIudXNlKFtQYWdpbmF0aW9uXSk7XG5cbmNvbnN0IHN3aXBlckluc3RhbmNlcyA9IHt9XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVTd2lwZXIgPSAoY29udGFpbmVyKSA9PiB7XG4gICAgbGV0IGlzU2hvd25QYWdpbmF0aW9uID0gZmFsc2VcblxuICAgIGxldCBlbmFibGVkID0gd2luZG93Lm1hdGNoTWVkaWEoJyhtYXgtd2lkdGg6IDEwMjRweCknKS5tYXRjaGVzO1xuICAgIGlmIChlbmFibGVkKSB7XG4gICAgICAgIGlmICghc3dpcGVySW5zdGFuY2VzW2NvbnRhaW5lcl0pIHtcbiAgICAgICAgICAgIGlzU2hvd25QYWdpbmF0aW9uID0gdHJ1ZVxuXG4gICAgICAgICAgICBzd2lwZXJJbnN0YW5jZXNbY29udGFpbmVyXSA9IG5ldyBTd2lwZXIoY29udGFpbmVyLCB7XG4gICAgICAgICAgICAgICAgc2xpZGVzUGVyVmlldzogMyxcbiAgICAgICAgICAgICAgICBzcGFjZUJldHdlZW46IDMwLFxuXG4gICAgICAgICAgICAgICAgYnJlYWtwb2ludHM6IHtcbiAgICAgICAgICAgICAgICAgICAgMzIwOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNQZXJWaWV3OiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3BhY2VCZXR3ZWVuOiAyMFxuICAgICAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgICAgIDYwMDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzUGVyVmlldzogMixcbiAgICAgICAgICAgICAgICAgICAgICAgIHNwYWNlQmV0d2VlbjogMjBcbiAgICAgICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgICAgICA3NTA6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1BlclZpZXc6IDMsXG4gICAgICAgICAgICAgICAgICAgICAgICBzcGFjZUJldHdlZW46IDIwXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIHBhZ2luYXRpb246IHtcbiAgICAgICAgICAgICAgICAgICAgZWw6IGlzU2hvd25QYWdpbmF0aW9uID8gJy5zd2lwZXItcGFnaW5hdGlvbicgOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBjbGlja2FibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChzd2lwZXJJbnN0YW5jZXNbY29udGFpbmVyXSkge1xuICAgICAgICAgICAgaXNTaG93blBhZ2luYXRpb24gPSBmYWxzZVxuICAgICAgICAgICAgc3dpcGVySW5zdGFuY2VzW2NvbnRhaW5lcl0uZGVzdHJveSgpO1xuICAgICAgICAgICAgc3dpcGVySW5zdGFuY2VzW2NvbnRhaW5lcl0gPSBudWxsXG5cbiAgICAgICAgfVxuICAgIH1cbn0iLCJpbXBvcnQgeyBnZXRXaW5kb3csIGdldERvY3VtZW50IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG52YXIgc3VwcG9ydDtcblxuZnVuY3Rpb24gY2FsY1N1cHBvcnQoKSB7XG4gIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgdmFyIGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgcmV0dXJuIHtcbiAgICB0b3VjaDogISEoJ29udG91Y2hzdGFydCcgaW4gd2luZG93IHx8IHdpbmRvdy5Eb2N1bWVudFRvdWNoICYmIGRvY3VtZW50IGluc3RhbmNlb2Ygd2luZG93LkRvY3VtZW50VG91Y2gpLFxuICAgIHBvaW50ZXJFdmVudHM6ICEhd2luZG93LlBvaW50ZXJFdmVudCAmJiAnbWF4VG91Y2hQb2ludHMnIGluIHdpbmRvdy5uYXZpZ2F0b3IgJiYgd2luZG93Lm5hdmlnYXRvci5tYXhUb3VjaFBvaW50cyA+PSAwLFxuICAgIG9ic2VydmVyOiBmdW5jdGlvbiBjaGVja09ic2VydmVyKCkge1xuICAgICAgcmV0dXJuICdNdXRhdGlvbk9ic2VydmVyJyBpbiB3aW5kb3cgfHwgJ1dlYmtpdE11dGF0aW9uT2JzZXJ2ZXInIGluIHdpbmRvdztcbiAgICB9KCksXG4gICAgcGFzc2l2ZUxpc3RlbmVyOiBmdW5jdGlvbiBjaGVja1Bhc3NpdmVMaXN0ZW5lcigpIHtcbiAgICAgIHZhciBzdXBwb3J0c1Bhc3NpdmUgPSBmYWxzZTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIG9wdHMgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdwYXNzaXZlJywge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgc3VwcG9ydHNQYXNzaXZlID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndGVzdFBhc3NpdmVMaXN0ZW5lcicsIG51bGwsIG9wdHMpO1xuICAgICAgfSBjYXRjaCAoZSkgey8vIE5vIHN1cHBvcnRcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN1cHBvcnRzUGFzc2l2ZTtcbiAgICB9KCksXG4gICAgZ2VzdHVyZXM6IGZ1bmN0aW9uIGNoZWNrR2VzdHVyZXMoKSB7XG4gICAgICByZXR1cm4gJ29uZ2VzdHVyZXN0YXJ0JyBpbiB3aW5kb3c7XG4gICAgfSgpXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldFN1cHBvcnQoKSB7XG4gIGlmICghc3VwcG9ydCkge1xuICAgIHN1cHBvcnQgPSBjYWxjU3VwcG9ydCgpO1xuICB9XG5cbiAgcmV0dXJuIHN1cHBvcnQ7XG59XG5cbmV4cG9ydCB7IGdldFN1cHBvcnQgfTsiLCJpbXBvcnQgeyBnZXRXaW5kb3cgfSBmcm9tICdzc3Itd2luZG93JztcbmltcG9ydCB7IGdldFN1cHBvcnQgfSBmcm9tICcuL2dldC1zdXBwb3J0JztcbnZhciBkZXZpY2U7XG5cbmZ1bmN0aW9uIGNhbGNEZXZpY2UoX3RlbXApIHtcbiAgdmFyIF9yZWYgPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcCxcbiAgICAgIHVzZXJBZ2VudCA9IF9yZWYudXNlckFnZW50O1xuXG4gIHZhciBzdXBwb3J0ID0gZ2V0U3VwcG9ydCgpO1xuICB2YXIgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIHZhciBwbGF0Zm9ybSA9IHdpbmRvdy5uYXZpZ2F0b3IucGxhdGZvcm07XG4gIHZhciB1YSA9IHVzZXJBZ2VudCB8fCB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgdmFyIGRldmljZSA9IHtcbiAgICBpb3M6IGZhbHNlLFxuICAgIGFuZHJvaWQ6IGZhbHNlXG4gIH07XG4gIHZhciBzY3JlZW5XaWR0aCA9IHdpbmRvdy5zY3JlZW4ud2lkdGg7XG4gIHZhciBzY3JlZW5IZWlnaHQgPSB3aW5kb3cuc2NyZWVuLmhlaWdodDtcbiAgdmFyIGFuZHJvaWQgPSB1YS5tYXRjaCgvKEFuZHJvaWQpOz9bXFxzXFwvXSsoW1xcZC5dKyk/Lyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICB2YXIgaXBhZCA9IHVhLm1hdGNoKC8oaVBhZCkuKk9TXFxzKFtcXGRfXSspLyk7XG4gIHZhciBpcG9kID0gdWEubWF0Y2goLyhpUG9kKSguKk9TXFxzKFtcXGRfXSspKT8vKTtcbiAgdmFyIGlwaG9uZSA9ICFpcGFkICYmIHVhLm1hdGNoKC8oaVBob25lXFxzT1N8aU9TKVxccyhbXFxkX10rKS8pO1xuICB2YXIgd2luZG93cyA9IHBsYXRmb3JtID09PSAnV2luMzInO1xuICB2YXIgbWFjb3MgPSBwbGF0Zm9ybSA9PT0gJ01hY0ludGVsJzsgLy8gaVBhZE9zIDEzIGZpeFxuXG4gIHZhciBpUGFkU2NyZWVucyA9IFsnMTAyNHgxMzY2JywgJzEzNjZ4MTAyNCcsICc4MzR4MTE5NCcsICcxMTk0eDgzNCcsICc4MzR4MTExMicsICcxMTEyeDgzNCcsICc3Njh4MTAyNCcsICcxMDI0eDc2OCddO1xuXG4gIGlmICghaXBhZCAmJiBtYWNvcyAmJiBzdXBwb3J0LnRvdWNoICYmIGlQYWRTY3JlZW5zLmluZGV4T2Yoc2NyZWVuV2lkdGggKyBcInhcIiArIHNjcmVlbkhlaWdodCkgPj0gMCkge1xuICAgIGlwYWQgPSB1YS5tYXRjaCgvKFZlcnNpb24pXFwvKFtcXGQuXSspLyk7XG4gICAgaWYgKCFpcGFkKSBpcGFkID0gWzAsIDEsICcxM18wXzAnXTtcbiAgICBtYWNvcyA9IGZhbHNlO1xuICB9IC8vIEFuZHJvaWRcblxuXG4gIGlmIChhbmRyb2lkICYmICF3aW5kb3dzKSB7XG4gICAgZGV2aWNlLm9zID0gJ2FuZHJvaWQnO1xuICAgIGRldmljZS5hbmRyb2lkID0gdHJ1ZTtcbiAgfVxuXG4gIGlmIChpcGFkIHx8IGlwaG9uZSB8fCBpcG9kKSB7XG4gICAgZGV2aWNlLm9zID0gJ2lvcyc7XG4gICAgZGV2aWNlLmlvcyA9IHRydWU7XG4gIH0gLy8gRXhwb3J0IG9iamVjdFxuXG5cbiAgcmV0dXJuIGRldmljZTtcbn1cblxuZnVuY3Rpb24gZ2V0RGV2aWNlKG92ZXJyaWRlcykge1xuICBpZiAob3ZlcnJpZGVzID09PSB2b2lkIDApIHtcbiAgICBvdmVycmlkZXMgPSB7fTtcbiAgfVxuXG4gIGlmICghZGV2aWNlKSB7XG4gICAgZGV2aWNlID0gY2FsY0RldmljZShvdmVycmlkZXMpO1xuICB9XG5cbiAgcmV0dXJuIGRldmljZTtcbn1cblxuZXhwb3J0IHsgZ2V0RGV2aWNlIH07IiwiaW1wb3J0IHsgZ2V0V2luZG93IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG52YXIgYnJvd3NlcjtcblxuZnVuY3Rpb24gY2FsY0Jyb3dzZXIoKSB7XG4gIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coKTtcblxuICBmdW5jdGlvbiBpc1NhZmFyaSgpIHtcbiAgICB2YXIgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpO1xuICAgIHJldHVybiB1YS5pbmRleE9mKCdzYWZhcmknKSA+PSAwICYmIHVhLmluZGV4T2YoJ2Nocm9tZScpIDwgMCAmJiB1YS5pbmRleE9mKCdhbmRyb2lkJykgPCAwO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBpc0VkZ2U6ICEhd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL0VkZ2UvZyksXG4gICAgaXNTYWZhcmk6IGlzU2FmYXJpKCksXG4gICAgaXNXZWJWaWV3OiAvKGlQaG9uZXxpUG9kfGlQYWQpLipBcHBsZVdlYktpdCg/IS4qU2FmYXJpKS9pLnRlc3Qod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldEJyb3dzZXIoKSB7XG4gIGlmICghYnJvd3Nlcikge1xuICAgIGJyb3dzZXIgPSBjYWxjQnJvd3NlcigpO1xuICB9XG5cbiAgcmV0dXJuIGJyb3dzZXI7XG59XG5cbmV4cG9ydCB7IGdldEJyb3dzZXIgfTsiLCJpbXBvcnQgeyBnZXRXaW5kb3cgfSBmcm9tICdzc3Itd2luZG93JztcbmltcG9ydCB7IGV4dGVuZCB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ3Jlc2l6ZScsXG4gIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIGV4dGVuZChzd2lwZXIsIHtcbiAgICAgIHJlc2l6ZToge1xuICAgICAgICByZXNpemVIYW5kbGVyOiBmdW5jdGlvbiByZXNpemVIYW5kbGVyKCkge1xuICAgICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQgfHwgIXN3aXBlci5pbml0aWFsaXplZCkgcmV0dXJuO1xuICAgICAgICAgIHN3aXBlci5lbWl0KCdiZWZvcmVSZXNpemUnKTtcbiAgICAgICAgICBzd2lwZXIuZW1pdCgncmVzaXplJyk7XG4gICAgICAgIH0sXG4gICAgICAgIG9yaWVudGF0aW9uQ2hhbmdlSGFuZGxlcjogZnVuY3Rpb24gb3JpZW50YXRpb25DaGFuZ2VIYW5kbGVyKCkge1xuICAgICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQgfHwgIXN3aXBlci5pbml0aWFsaXplZCkgcmV0dXJuO1xuICAgICAgICAgIHN3aXBlci5lbWl0KCdvcmllbnRhdGlvbmNoYW5nZScpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgaW5pdDogZnVuY3Rpb24gaW5pdChzd2lwZXIpIHtcbiAgICAgIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coKTsgLy8gRW1pdCByZXNpemVcblxuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHN3aXBlci5yZXNpemUucmVzaXplSGFuZGxlcik7IC8vIEVtaXQgb3JpZW50YXRpb25jaGFuZ2VcblxuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ29yaWVudGF0aW9uY2hhbmdlJywgc3dpcGVyLnJlc2l6ZS5vcmllbnRhdGlvbkNoYW5nZUhhbmRsZXIpO1xuICAgIH0sXG4gICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveShzd2lwZXIpIHtcbiAgICAgIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBzd2lwZXIucmVzaXplLnJlc2l6ZUhhbmRsZXIpO1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ29yaWVudGF0aW9uY2hhbmdlJywgc3dpcGVyLnJlc2l6ZS5vcmllbnRhdGlvbkNoYW5nZUhhbmRsZXIpO1xuICAgIH1cbiAgfVxufTsiLCJmdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5pbXBvcnQgeyBnZXRXaW5kb3cgfSBmcm9tICdzc3Itd2luZG93JztcbmltcG9ydCB7IGJpbmRNb2R1bGVNZXRob2RzIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xudmFyIE9ic2VydmVyID0ge1xuICBhdHRhY2g6IGZ1bmN0aW9uIGF0dGFjaCh0YXJnZXQsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBPYnNlcnZlckZ1bmMgPSB3aW5kb3cuTXV0YXRpb25PYnNlcnZlciB8fCB3aW5kb3cuV2Via2l0TXV0YXRpb25PYnNlcnZlcjtcbiAgICB2YXIgb2JzZXJ2ZXIgPSBuZXcgT2JzZXJ2ZXJGdW5jKGZ1bmN0aW9uIChtdXRhdGlvbnMpIHtcbiAgICAgIC8vIFRoZSBvYnNlcnZlclVwZGF0ZSBldmVudCBzaG91bGQgb25seSBiZSB0cmlnZ2VyZWRcbiAgICAgIC8vIG9uY2UgZGVzcGl0ZSB0aGUgbnVtYmVyIG9mIG11dGF0aW9ucy4gIEFkZGl0aW9uYWxcbiAgICAgIC8vIHRyaWdnZXJzIGFyZSByZWR1bmRhbnQgYW5kIGFyZSB2ZXJ5IGNvc3RseVxuICAgICAgaWYgKG11dGF0aW9ucy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgc3dpcGVyLmVtaXQoJ29ic2VydmVyVXBkYXRlJywgbXV0YXRpb25zWzBdKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgb2JzZXJ2ZXJVcGRhdGUgPSBmdW5jdGlvbiBvYnNlcnZlclVwZGF0ZSgpIHtcbiAgICAgICAgc3dpcGVyLmVtaXQoJ29ic2VydmVyVXBkYXRlJywgbXV0YXRpb25zWzBdKTtcbiAgICAgIH07XG5cbiAgICAgIGlmICh3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKSB7XG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUob2JzZXJ2ZXJVcGRhdGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2luZG93LnNldFRpbWVvdXQob2JzZXJ2ZXJVcGRhdGUsIDApO1xuICAgICAgfVxuICAgIH0pO1xuICAgIG9ic2VydmVyLm9ic2VydmUodGFyZ2V0LCB7XG4gICAgICBhdHRyaWJ1dGVzOiB0eXBlb2Ygb3B0aW9ucy5hdHRyaWJ1dGVzID09PSAndW5kZWZpbmVkJyA/IHRydWUgOiBvcHRpb25zLmF0dHJpYnV0ZXMsXG4gICAgICBjaGlsZExpc3Q6IHR5cGVvZiBvcHRpb25zLmNoaWxkTGlzdCA9PT0gJ3VuZGVmaW5lZCcgPyB0cnVlIDogb3B0aW9ucy5jaGlsZExpc3QsXG4gICAgICBjaGFyYWN0ZXJEYXRhOiB0eXBlb2Ygb3B0aW9ucy5jaGFyYWN0ZXJEYXRhID09PSAndW5kZWZpbmVkJyA/IHRydWUgOiBvcHRpb25zLmNoYXJhY3RlckRhdGFcbiAgICB9KTtcbiAgICBzd2lwZXIub2JzZXJ2ZXIub2JzZXJ2ZXJzLnB1c2gob2JzZXJ2ZXIpO1xuICB9LFxuICBpbml0OiBmdW5jdGlvbiBpbml0KCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyLnN1cHBvcnQub2JzZXJ2ZXIgfHwgIXN3aXBlci5wYXJhbXMub2JzZXJ2ZXIpIHJldHVybjtcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLm9ic2VydmVQYXJlbnRzKSB7XG4gICAgICB2YXIgY29udGFpbmVyUGFyZW50cyA9IHN3aXBlci4kZWwucGFyZW50cygpO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbnRhaW5lclBhcmVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgc3dpcGVyLm9ic2VydmVyLmF0dGFjaChjb250YWluZXJQYXJlbnRzW2ldKTtcbiAgICAgIH1cbiAgICB9IC8vIE9ic2VydmUgY29udGFpbmVyXG5cblxuICAgIHN3aXBlci5vYnNlcnZlci5hdHRhY2goc3dpcGVyLiRlbFswXSwge1xuICAgICAgY2hpbGRMaXN0OiBzd2lwZXIucGFyYW1zLm9ic2VydmVTbGlkZUNoaWxkcmVuXG4gICAgfSk7IC8vIE9ic2VydmUgd3JhcHBlclxuXG4gICAgc3dpcGVyLm9ic2VydmVyLmF0dGFjaChzd2lwZXIuJHdyYXBwZXJFbFswXSwge1xuICAgICAgYXR0cmlidXRlczogZmFsc2VcbiAgICB9KTtcbiAgfSxcbiAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBzd2lwZXIub2JzZXJ2ZXIub2JzZXJ2ZXJzLmZvckVhY2goZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICBvYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgfSk7XG4gICAgc3dpcGVyLm9ic2VydmVyLm9ic2VydmVycyA9IFtdO1xuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnb2JzZXJ2ZXInLFxuICBwYXJhbXM6IHtcbiAgICBvYnNlcnZlcjogZmFsc2UsXG4gICAgb2JzZXJ2ZVBhcmVudHM6IGZhbHNlLFxuICAgIG9ic2VydmVTbGlkZUNoaWxkcmVuOiBmYWxzZVxuICB9LFxuICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBiaW5kTW9kdWxlTWV0aG9kcyhzd2lwZXIsIHtcbiAgICAgIG9ic2VydmVyOiBfZXh0ZW5kcyhfZXh0ZW5kcyh7fSwgT2JzZXJ2ZXIpLCB7fSwge1xuICAgICAgICBvYnNlcnZlcnM6IFtdXG4gICAgICB9KVxuICAgIH0pO1xuICB9LFxuICBvbjoge1xuICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoc3dpcGVyKSB7XG4gICAgICBzd2lwZXIub2JzZXJ2ZXIuaW5pdCgpO1xuICAgIH0sXG4gICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveShzd2lwZXIpIHtcbiAgICAgIHN3aXBlci5vYnNlcnZlci5kZXN0cm95KCk7XG4gICAgfVxuICB9XG59OyIsImltcG9ydCB7IGdldFdpbmRvdywgZ2V0RG9jdW1lbnQgfSBmcm9tICdzc3Itd2luZG93JztcbmltcG9ydCAkIGZyb20gJy4uLy4uLy4uL3V0aWxzL2RvbSc7XG5pbXBvcnQgeyBleHRlbmQsIG5vdyB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG9uVG91Y2hTdGFydChldmVudCkge1xuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICB2YXIgZGF0YSA9IHN3aXBlci50b3VjaEV2ZW50c0RhdGE7XG4gIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgdG91Y2hlcyA9IHN3aXBlci50b3VjaGVzO1xuXG4gIGlmIChzd2lwZXIuYW5pbWF0aW5nICYmIHBhcmFtcy5wcmV2ZW50SW50ZXJhY3Rpb25PblRyYW5zaXRpb24pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgZSA9IGV2ZW50O1xuICBpZiAoZS5vcmlnaW5hbEV2ZW50KSBlID0gZS5vcmlnaW5hbEV2ZW50O1xuICB2YXIgJHRhcmdldEVsID0gJChlLnRhcmdldCk7XG5cbiAgaWYgKHBhcmFtcy50b3VjaEV2ZW50c1RhcmdldCA9PT0gJ3dyYXBwZXInKSB7XG4gICAgaWYgKCEkdGFyZ2V0RWwuY2xvc2VzdChzd2lwZXIud3JhcHBlckVsKS5sZW5ndGgpIHJldHVybjtcbiAgfVxuXG4gIGRhdGEuaXNUb3VjaEV2ZW50ID0gZS50eXBlID09PSAndG91Y2hzdGFydCc7XG4gIGlmICghZGF0YS5pc1RvdWNoRXZlbnQgJiYgJ3doaWNoJyBpbiBlICYmIGUud2hpY2ggPT09IDMpIHJldHVybjtcbiAgaWYgKCFkYXRhLmlzVG91Y2hFdmVudCAmJiAnYnV0dG9uJyBpbiBlICYmIGUuYnV0dG9uID4gMCkgcmV0dXJuO1xuICBpZiAoZGF0YS5pc1RvdWNoZWQgJiYgZGF0YS5pc01vdmVkKSByZXR1cm47XG5cbiAgaWYgKHBhcmFtcy5ub1N3aXBpbmcgJiYgJHRhcmdldEVsLmNsb3Nlc3QocGFyYW1zLm5vU3dpcGluZ1NlbGVjdG9yID8gcGFyYW1zLm5vU3dpcGluZ1NlbGVjdG9yIDogXCIuXCIgKyBwYXJhbXMubm9Td2lwaW5nQ2xhc3MpWzBdKSB7XG4gICAgc3dpcGVyLmFsbG93Q2xpY2sgPSB0cnVlO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChwYXJhbXMuc3dpcGVIYW5kbGVyKSB7XG4gICAgaWYgKCEkdGFyZ2V0RWwuY2xvc2VzdChwYXJhbXMuc3dpcGVIYW5kbGVyKVswXSkgcmV0dXJuO1xuICB9XG5cbiAgdG91Y2hlcy5jdXJyZW50WCA9IGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnID8gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYIDogZS5wYWdlWDtcbiAgdG91Y2hlcy5jdXJyZW50WSA9IGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnID8gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VZIDogZS5wYWdlWTtcbiAgdmFyIHN0YXJ0WCA9IHRvdWNoZXMuY3VycmVudFg7XG4gIHZhciBzdGFydFkgPSB0b3VjaGVzLmN1cnJlbnRZOyAvLyBEbyBOT1Qgc3RhcnQgaWYgaU9TIGVkZ2Ugc3dpcGUgaXMgZGV0ZWN0ZWQuIE90aGVyd2lzZSBpT1MgYXBwIGNhbm5vdCBzd2lwZS10by1nby1iYWNrIGFueW1vcmVcblxuICB2YXIgZWRnZVN3aXBlRGV0ZWN0aW9uID0gcGFyYW1zLmVkZ2VTd2lwZURldGVjdGlvbiB8fCBwYXJhbXMuaU9TRWRnZVN3aXBlRGV0ZWN0aW9uO1xuICB2YXIgZWRnZVN3aXBlVGhyZXNob2xkID0gcGFyYW1zLmVkZ2VTd2lwZVRocmVzaG9sZCB8fCBwYXJhbXMuaU9TRWRnZVN3aXBlVGhyZXNob2xkO1xuXG4gIGlmIChlZGdlU3dpcGVEZXRlY3Rpb24gJiYgKHN0YXJ0WCA8PSBlZGdlU3dpcGVUaHJlc2hvbGQgfHwgc3RhcnRYID49IHdpbmRvdy5zY3JlZW4ud2lkdGggLSBlZGdlU3dpcGVUaHJlc2hvbGQpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZXh0ZW5kKGRhdGEsIHtcbiAgICBpc1RvdWNoZWQ6IHRydWUsXG4gICAgaXNNb3ZlZDogZmFsc2UsXG4gICAgYWxsb3dUb3VjaENhbGxiYWNrczogdHJ1ZSxcbiAgICBpc1Njcm9sbGluZzogdW5kZWZpbmVkLFxuICAgIHN0YXJ0TW92aW5nOiB1bmRlZmluZWRcbiAgfSk7XG4gIHRvdWNoZXMuc3RhcnRYID0gc3RhcnRYO1xuICB0b3VjaGVzLnN0YXJ0WSA9IHN0YXJ0WTtcbiAgZGF0YS50b3VjaFN0YXJ0VGltZSA9IG5vdygpO1xuICBzd2lwZXIuYWxsb3dDbGljayA9IHRydWU7XG4gIHN3aXBlci51cGRhdGVTaXplKCk7XG4gIHN3aXBlci5zd2lwZURpcmVjdGlvbiA9IHVuZGVmaW5lZDtcbiAgaWYgKHBhcmFtcy50aHJlc2hvbGQgPiAwKSBkYXRhLmFsbG93VGhyZXNob2xkTW92ZSA9IGZhbHNlO1xuXG4gIGlmIChlLnR5cGUgIT09ICd0b3VjaHN0YXJ0Jykge1xuICAgIHZhciBwcmV2ZW50RGVmYXVsdCA9IHRydWU7XG4gICAgaWYgKCR0YXJnZXRFbC5pcyhkYXRhLmZvcm1FbGVtZW50cykpIHByZXZlbnREZWZhdWx0ID0gZmFsc2U7XG5cbiAgICBpZiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiAkKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpLmlzKGRhdGEuZm9ybUVsZW1lbnRzKSAmJiBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9PSAkdGFyZ2V0RWxbMF0pIHtcbiAgICAgIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQuYmx1cigpO1xuICAgIH1cblxuICAgIHZhciBzaG91bGRQcmV2ZW50RGVmYXVsdCA9IHByZXZlbnREZWZhdWx0ICYmIHN3aXBlci5hbGxvd1RvdWNoTW92ZSAmJiBwYXJhbXMudG91Y2hTdGFydFByZXZlbnREZWZhdWx0O1xuXG4gICAgaWYgKHBhcmFtcy50b3VjaFN0YXJ0Rm9yY2VQcmV2ZW50RGVmYXVsdCB8fCBzaG91bGRQcmV2ZW50RGVmYXVsdCkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfVxuXG4gIHN3aXBlci5lbWl0KCd0b3VjaFN0YXJ0JywgZSk7XG59IiwiaW1wb3J0IHsgZ2V0RG9jdW1lbnQgfSBmcm9tICdzc3Itd2luZG93JztcbmltcG9ydCAkIGZyb20gJy4uLy4uLy4uL3V0aWxzL2RvbSc7XG5pbXBvcnQgeyBleHRlbmQsIG5vdyB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG9uVG91Y2hNb3ZlKGV2ZW50KSB7XG4gIHZhciBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgZGF0YSA9IHN3aXBlci50b3VjaEV2ZW50c0RhdGE7XG4gIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgdG91Y2hlcyA9IHN3aXBlci50b3VjaGVzLFxuICAgICAgcnRsID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZTtcbiAgdmFyIGUgPSBldmVudDtcbiAgaWYgKGUub3JpZ2luYWxFdmVudCkgZSA9IGUub3JpZ2luYWxFdmVudDtcblxuICBpZiAoIWRhdGEuaXNUb3VjaGVkKSB7XG4gICAgaWYgKGRhdGEuc3RhcnRNb3ZpbmcgJiYgZGF0YS5pc1Njcm9sbGluZykge1xuICAgICAgc3dpcGVyLmVtaXQoJ3RvdWNoTW92ZU9wcG9zaXRlJywgZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGRhdGEuaXNUb3VjaEV2ZW50ICYmIGUudHlwZSAhPT0gJ3RvdWNobW92ZScpIHJldHVybjtcbiAgdmFyIHRhcmdldFRvdWNoID0gZS50eXBlID09PSAndG91Y2htb3ZlJyAmJiBlLnRhcmdldFRvdWNoZXMgJiYgKGUudGFyZ2V0VG91Y2hlc1swXSB8fCBlLmNoYW5nZWRUb3VjaGVzWzBdKTtcbiAgdmFyIHBhZ2VYID0gZS50eXBlID09PSAndG91Y2htb3ZlJyA/IHRhcmdldFRvdWNoLnBhZ2VYIDogZS5wYWdlWDtcbiAgdmFyIHBhZ2VZID0gZS50eXBlID09PSAndG91Y2htb3ZlJyA/IHRhcmdldFRvdWNoLnBhZ2VZIDogZS5wYWdlWTtcblxuICBpZiAoZS5wcmV2ZW50ZWRCeU5lc3RlZFN3aXBlcikge1xuICAgIHRvdWNoZXMuc3RhcnRYID0gcGFnZVg7XG4gICAgdG91Y2hlcy5zdGFydFkgPSBwYWdlWTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoIXN3aXBlci5hbGxvd1RvdWNoTW92ZSkge1xuICAgIC8vIGlzTW92ZWQgPSB0cnVlO1xuICAgIHN3aXBlci5hbGxvd0NsaWNrID0gZmFsc2U7XG5cbiAgICBpZiAoZGF0YS5pc1RvdWNoZWQpIHtcbiAgICAgIGV4dGVuZCh0b3VjaGVzLCB7XG4gICAgICAgIHN0YXJ0WDogcGFnZVgsXG4gICAgICAgIHN0YXJ0WTogcGFnZVksXG4gICAgICAgIGN1cnJlbnRYOiBwYWdlWCxcbiAgICAgICAgY3VycmVudFk6IHBhZ2VZXG4gICAgICB9KTtcbiAgICAgIGRhdGEudG91Y2hTdGFydFRpbWUgPSBub3coKTtcbiAgICB9XG5cbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoZGF0YS5pc1RvdWNoRXZlbnQgJiYgcGFyYW1zLnRvdWNoUmVsZWFzZU9uRWRnZXMgJiYgIXBhcmFtcy5sb29wKSB7XG4gICAgaWYgKHN3aXBlci5pc1ZlcnRpY2FsKCkpIHtcbiAgICAgIC8vIFZlcnRpY2FsXG4gICAgICBpZiAocGFnZVkgPCB0b3VjaGVzLnN0YXJ0WSAmJiBzd2lwZXIudHJhbnNsYXRlIDw9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSB8fCBwYWdlWSA+IHRvdWNoZXMuc3RhcnRZICYmIHN3aXBlci50cmFuc2xhdGUgPj0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSB7XG4gICAgICAgIGRhdGEuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgICAgIGRhdGEuaXNNb3ZlZCA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwYWdlWCA8IHRvdWNoZXMuc3RhcnRYICYmIHN3aXBlci50cmFuc2xhdGUgPD0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpIHx8IHBhZ2VYID4gdG91Y2hlcy5zdGFydFggJiYgc3dpcGVyLnRyYW5zbGF0ZSA+PSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cblxuICBpZiAoZGF0YS5pc1RvdWNoRXZlbnQgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkge1xuICAgIGlmIChlLnRhcmdldCA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiAkKGUudGFyZ2V0KS5pcyhkYXRhLmZvcm1FbGVtZW50cykpIHtcbiAgICAgIGRhdGEuaXNNb3ZlZCA9IHRydWU7XG4gICAgICBzd2lwZXIuYWxsb3dDbGljayA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIGlmIChkYXRhLmFsbG93VG91Y2hDYWxsYmFja3MpIHtcbiAgICBzd2lwZXIuZW1pdCgndG91Y2hNb3ZlJywgZSk7XG4gIH1cblxuICBpZiAoZS50YXJnZXRUb3VjaGVzICYmIGUudGFyZ2V0VG91Y2hlcy5sZW5ndGggPiAxKSByZXR1cm47XG4gIHRvdWNoZXMuY3VycmVudFggPSBwYWdlWDtcbiAgdG91Y2hlcy5jdXJyZW50WSA9IHBhZ2VZO1xuICB2YXIgZGlmZlggPSB0b3VjaGVzLmN1cnJlbnRYIC0gdG91Y2hlcy5zdGFydFg7XG4gIHZhciBkaWZmWSA9IHRvdWNoZXMuY3VycmVudFkgLSB0b3VjaGVzLnN0YXJ0WTtcbiAgaWYgKHN3aXBlci5wYXJhbXMudGhyZXNob2xkICYmIE1hdGguc3FydChNYXRoLnBvdyhkaWZmWCwgMikgKyBNYXRoLnBvdyhkaWZmWSwgMikpIDwgc3dpcGVyLnBhcmFtcy50aHJlc2hvbGQpIHJldHVybjtcblxuICBpZiAodHlwZW9mIGRhdGEuaXNTY3JvbGxpbmcgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIHRvdWNoQW5nbGU7XG5cbiAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpICYmIHRvdWNoZXMuY3VycmVudFkgPT09IHRvdWNoZXMuc3RhcnRZIHx8IHN3aXBlci5pc1ZlcnRpY2FsKCkgJiYgdG91Y2hlcy5jdXJyZW50WCA9PT0gdG91Y2hlcy5zdGFydFgpIHtcbiAgICAgIGRhdGEuaXNTY3JvbGxpbmcgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBpZiAoZGlmZlggKiBkaWZmWCArIGRpZmZZICogZGlmZlkgPj0gMjUpIHtcbiAgICAgICAgdG91Y2hBbmdsZSA9IE1hdGguYXRhbjIoTWF0aC5hYnMoZGlmZlkpLCBNYXRoLmFicyhkaWZmWCkpICogMTgwIC8gTWF0aC5QSTtcbiAgICAgICAgZGF0YS5pc1Njcm9sbGluZyA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHRvdWNoQW5nbGUgPiBwYXJhbXMudG91Y2hBbmdsZSA6IDkwIC0gdG91Y2hBbmdsZSA+IHBhcmFtcy50b3VjaEFuZ2xlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChkYXRhLmlzU2Nyb2xsaW5nKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3RvdWNoTW92ZU9wcG9zaXRlJywgZSk7XG4gIH1cblxuICBpZiAodHlwZW9mIGRhdGEuc3RhcnRNb3ZpbmcgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKHRvdWNoZXMuY3VycmVudFggIT09IHRvdWNoZXMuc3RhcnRYIHx8IHRvdWNoZXMuY3VycmVudFkgIT09IHRvdWNoZXMuc3RhcnRZKSB7XG4gICAgICBkYXRhLnN0YXJ0TW92aW5nID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBpZiAoZGF0YS5pc1Njcm9sbGluZykge1xuICAgIGRhdGEuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKCFkYXRhLnN0YXJ0TW92aW5nKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc3dpcGVyLmFsbG93Q2xpY2sgPSBmYWxzZTtcblxuICBpZiAoIXBhcmFtcy5jc3NNb2RlICYmIGUuY2FuY2VsYWJsZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgfVxuXG4gIGlmIChwYXJhbXMudG91Y2hNb3ZlU3RvcFByb3BhZ2F0aW9uICYmICFwYXJhbXMubmVzdGVkKSB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgfVxuXG4gIGlmICghZGF0YS5pc01vdmVkKSB7XG4gICAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgICBzd2lwZXIubG9vcEZpeCgpO1xuICAgIH1cblxuICAgIGRhdGEuc3RhcnRUcmFuc2xhdGUgPSBzd2lwZXIuZ2V0VHJhbnNsYXRlKCk7XG4gICAgc3dpcGVyLnNldFRyYW5zaXRpb24oMCk7XG5cbiAgICBpZiAoc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgc3dpcGVyLiR3cmFwcGVyRWwudHJpZ2dlcignd2Via2l0VHJhbnNpdGlvbkVuZCB0cmFuc2l0aW9uZW5kJyk7XG4gICAgfVxuXG4gICAgZGF0YS5hbGxvd01vbWVudHVtQm91bmNlID0gZmFsc2U7IC8vIEdyYWIgQ3Vyc29yXG5cbiAgICBpZiAocGFyYW1zLmdyYWJDdXJzb3IgJiYgKHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9PT0gdHJ1ZSB8fCBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPT09IHRydWUpKSB7XG4gICAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcih0cnVlKTtcbiAgICB9XG5cbiAgICBzd2lwZXIuZW1pdCgnc2xpZGVyRmlyc3RNb3ZlJywgZSk7XG4gIH1cblxuICBzd2lwZXIuZW1pdCgnc2xpZGVyTW92ZScsIGUpO1xuICBkYXRhLmlzTW92ZWQgPSB0cnVlO1xuICB2YXIgZGlmZiA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IGRpZmZYIDogZGlmZlk7XG4gIHRvdWNoZXMuZGlmZiA9IGRpZmY7XG4gIGRpZmYgKj0gcGFyYW1zLnRvdWNoUmF0aW87XG4gIGlmIChydGwpIGRpZmYgPSAtZGlmZjtcbiAgc3dpcGVyLnN3aXBlRGlyZWN0aW9uID0gZGlmZiA+IDAgPyAncHJldicgOiAnbmV4dCc7XG4gIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRpZmYgKyBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuICB2YXIgZGlzYWJsZVBhcmVudFN3aXBlciA9IHRydWU7XG4gIHZhciByZXNpc3RhbmNlUmF0aW8gPSBwYXJhbXMucmVzaXN0YW5jZVJhdGlvO1xuXG4gIGlmIChwYXJhbXMudG91Y2hSZWxlYXNlT25FZGdlcykge1xuICAgIHJlc2lzdGFuY2VSYXRpbyA9IDA7XG4gIH1cblxuICBpZiAoZGlmZiA+IDAgJiYgZGF0YS5jdXJyZW50VHJhbnNsYXRlID4gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSB7XG4gICAgZGlzYWJsZVBhcmVudFN3aXBlciA9IGZhbHNlO1xuICAgIGlmIChwYXJhbXMucmVzaXN0YW5jZSkgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpIC0gMSArIE1hdGgucG93KC1zd2lwZXIubWluVHJhbnNsYXRlKCkgKyBkYXRhLnN0YXJ0VHJhbnNsYXRlICsgZGlmZiwgcmVzaXN0YW5jZVJhdGlvKTtcbiAgfSBlbHNlIGlmIChkaWZmIDwgMCAmJiBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPCBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIHtcbiAgICBkaXNhYmxlUGFyZW50U3dpcGVyID0gZmFsc2U7XG4gICAgaWYgKHBhcmFtcy5yZXNpc3RhbmNlKSBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgKyAxIC0gTWF0aC5wb3coc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gZGF0YS5zdGFydFRyYW5zbGF0ZSAtIGRpZmYsIHJlc2lzdGFuY2VSYXRpbyk7XG4gIH1cblxuICBpZiAoZGlzYWJsZVBhcmVudFN3aXBlcikge1xuICAgIGUucHJldmVudGVkQnlOZXN0ZWRTd2lwZXIgPSB0cnVlO1xuICB9IC8vIERpcmVjdGlvbnMgbG9ja3NcblxuXG4gIGlmICghc3dpcGVyLmFsbG93U2xpZGVOZXh0ICYmIHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ25leHQnICYmIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA8IGRhdGEuc3RhcnRUcmFuc2xhdGUpIHtcbiAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuICB9XG5cbiAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZVByZXYgJiYgc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAncHJldicgJiYgZGF0YS5jdXJyZW50VHJhbnNsYXRlID4gZGF0YS5zdGFydFRyYW5zbGF0ZSkge1xuICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gIH0gLy8gVGhyZXNob2xkXG5cblxuICBpZiAocGFyYW1zLnRocmVzaG9sZCA+IDApIHtcbiAgICBpZiAoTWF0aC5hYnMoZGlmZikgPiBwYXJhbXMudGhyZXNob2xkIHx8IGRhdGEuYWxsb3dUaHJlc2hvbGRNb3ZlKSB7XG4gICAgICBpZiAoIWRhdGEuYWxsb3dUaHJlc2hvbGRNb3ZlKSB7XG4gICAgICAgIGRhdGEuYWxsb3dUaHJlc2hvbGRNb3ZlID0gdHJ1ZTtcbiAgICAgICAgdG91Y2hlcy5zdGFydFggPSB0b3VjaGVzLmN1cnJlbnRYO1xuICAgICAgICB0b3VjaGVzLnN0YXJ0WSA9IHRvdWNoZXMuY3VycmVudFk7XG4gICAgICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gICAgICAgIHRvdWNoZXMuZGlmZiA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHRvdWNoZXMuY3VycmVudFggLSB0b3VjaGVzLnN0YXJ0WCA6IHRvdWNoZXMuY3VycmVudFkgLSB0b3VjaGVzLnN0YXJ0WTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIGlmICghcGFyYW1zLmZvbGxvd0ZpbmdlciB8fCBwYXJhbXMuY3NzTW9kZSkgcmV0dXJuOyAvLyBVcGRhdGUgYWN0aXZlIGluZGV4IGluIGZyZWUgbW9kZVxuXG4gIGlmIChwYXJhbXMuZnJlZU1vZGUgfHwgcGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MgfHwgcGFyYW1zLndhdGNoU2xpZGVzVmlzaWJpbGl0eSkge1xuICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gIH1cblxuICBpZiAocGFyYW1zLmZyZWVNb2RlKSB7XG4gICAgLy8gVmVsb2NpdHlcbiAgICBpZiAoZGF0YS52ZWxvY2l0aWVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgZGF0YS52ZWxvY2l0aWVzLnB1c2goe1xuICAgICAgICBwb3NpdGlvbjogdG91Y2hlc1tzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnc3RhcnRYJyA6ICdzdGFydFknXSxcbiAgICAgICAgdGltZTogZGF0YS50b3VjaFN0YXJ0VGltZVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZGF0YS52ZWxvY2l0aWVzLnB1c2goe1xuICAgICAgcG9zaXRpb246IHRvdWNoZXNbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ2N1cnJlbnRYJyA6ICdjdXJyZW50WSddLFxuICAgICAgdGltZTogbm93KClcbiAgICB9KTtcbiAgfSAvLyBVcGRhdGUgcHJvZ3Jlc3NcblxuXG4gIHN3aXBlci51cGRhdGVQcm9ncmVzcyhkYXRhLmN1cnJlbnRUcmFuc2xhdGUpOyAvLyBVcGRhdGUgdHJhbnNsYXRlXG5cbiAgc3dpcGVyLnNldFRyYW5zbGF0ZShkYXRhLmN1cnJlbnRUcmFuc2xhdGUpO1xufSIsImltcG9ydCB7IG5vdywgbmV4dFRpY2sgfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlscyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvblRvdWNoRW5kKGV2ZW50KSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgZGF0YSA9IHN3aXBlci50b3VjaEV2ZW50c0RhdGE7XG4gIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgdG91Y2hlcyA9IHN3aXBlci50b3VjaGVzLFxuICAgICAgcnRsID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSxcbiAgICAgICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbCxcbiAgICAgIHNsaWRlc0dyaWQgPSBzd2lwZXIuc2xpZGVzR3JpZCxcbiAgICAgIHNuYXBHcmlkID0gc3dpcGVyLnNuYXBHcmlkO1xuICB2YXIgZSA9IGV2ZW50O1xuICBpZiAoZS5vcmlnaW5hbEV2ZW50KSBlID0gZS5vcmlnaW5hbEV2ZW50O1xuXG4gIGlmIChkYXRhLmFsbG93VG91Y2hDYWxsYmFja3MpIHtcbiAgICBzd2lwZXIuZW1pdCgndG91Y2hFbmQnLCBlKTtcbiAgfVxuXG4gIGRhdGEuYWxsb3dUb3VjaENhbGxiYWNrcyA9IGZhbHNlO1xuXG4gIGlmICghZGF0YS5pc1RvdWNoZWQpIHtcbiAgICBpZiAoZGF0YS5pc01vdmVkICYmIHBhcmFtcy5ncmFiQ3Vyc29yKSB7XG4gICAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcihmYWxzZSk7XG4gICAgfVxuXG4gICAgZGF0YS5pc01vdmVkID0gZmFsc2U7XG4gICAgZGF0YS5zdGFydE1vdmluZyA9IGZhbHNlO1xuICAgIHJldHVybjtcbiAgfSAvLyBSZXR1cm4gR3JhYiBDdXJzb3JcblxuXG4gIGlmIChwYXJhbXMuZ3JhYkN1cnNvciAmJiBkYXRhLmlzTW92ZWQgJiYgZGF0YS5pc1RvdWNoZWQgJiYgKHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9PT0gdHJ1ZSB8fCBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPT09IHRydWUpKSB7XG4gICAgc3dpcGVyLnNldEdyYWJDdXJzb3IoZmFsc2UpO1xuICB9IC8vIFRpbWUgZGlmZlxuXG5cbiAgdmFyIHRvdWNoRW5kVGltZSA9IG5vdygpO1xuICB2YXIgdGltZURpZmYgPSB0b3VjaEVuZFRpbWUgLSBkYXRhLnRvdWNoU3RhcnRUaW1lOyAvLyBUYXAsIGRvdWJsZVRhcCwgQ2xpY2tcblxuICBpZiAoc3dpcGVyLmFsbG93Q2xpY2spIHtcbiAgICBzd2lwZXIudXBkYXRlQ2xpY2tlZFNsaWRlKGUpO1xuICAgIHN3aXBlci5lbWl0KCd0YXAgY2xpY2snLCBlKTtcblxuICAgIGlmICh0aW1lRGlmZiA8IDMwMCAmJiB0b3VjaEVuZFRpbWUgLSBkYXRhLmxhc3RDbGlja1RpbWUgPCAzMDApIHtcbiAgICAgIHN3aXBlci5lbWl0KCdkb3VibGVUYXAgZG91YmxlQ2xpY2snLCBlKTtcbiAgICB9XG4gIH1cblxuICBkYXRhLmxhc3RDbGlja1RpbWUgPSBub3coKTtcbiAgbmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgIGlmICghc3dpcGVyLmRlc3Ryb3llZCkgc3dpcGVyLmFsbG93Q2xpY2sgPSB0cnVlO1xuICB9KTtcblxuICBpZiAoIWRhdGEuaXNUb3VjaGVkIHx8ICFkYXRhLmlzTW92ZWQgfHwgIXN3aXBlci5zd2lwZURpcmVjdGlvbiB8fCB0b3VjaGVzLmRpZmYgPT09IDAgfHwgZGF0YS5jdXJyZW50VHJhbnNsYXRlID09PSBkYXRhLnN0YXJ0VHJhbnNsYXRlKSB7XG4gICAgZGF0YS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICBkYXRhLmlzTW92ZWQgPSBmYWxzZTtcbiAgICBkYXRhLnN0YXJ0TW92aW5nID0gZmFsc2U7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZGF0YS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgZGF0YS5pc01vdmVkID0gZmFsc2U7XG4gIGRhdGEuc3RhcnRNb3ZpbmcgPSBmYWxzZTtcbiAgdmFyIGN1cnJlbnRQb3M7XG5cbiAgaWYgKHBhcmFtcy5mb2xsb3dGaW5nZXIpIHtcbiAgICBjdXJyZW50UG9zID0gcnRsID8gc3dpcGVyLnRyYW5zbGF0ZSA6IC1zd2lwZXIudHJhbnNsYXRlO1xuICB9IGVsc2Uge1xuICAgIGN1cnJlbnRQb3MgPSAtZGF0YS5jdXJyZW50VHJhbnNsYXRlO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5mcmVlTW9kZSkge1xuICAgIGlmIChjdXJyZW50UG9zIDwgLXN3aXBlci5taW5UcmFuc2xhdGUoKSkge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoY3VycmVudFBvcyA+IC1zd2lwZXIubWF4VHJhbnNsYXRlKCkpIHtcbiAgICAgIGlmIChzd2lwZXIuc2xpZGVzLmxlbmd0aCA8IHNuYXBHcmlkLmxlbmd0aCkge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzbmFwR3JpZC5sZW5ndGggLSAxKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLmZyZWVNb2RlTW9tZW50dW0pIHtcbiAgICAgIGlmIChkYXRhLnZlbG9jaXRpZXMubGVuZ3RoID4gMSkge1xuICAgICAgICB2YXIgbGFzdE1vdmVFdmVudCA9IGRhdGEudmVsb2NpdGllcy5wb3AoKTtcbiAgICAgICAgdmFyIHZlbG9jaXR5RXZlbnQgPSBkYXRhLnZlbG9jaXRpZXMucG9wKCk7XG4gICAgICAgIHZhciBkaXN0YW5jZSA9IGxhc3RNb3ZlRXZlbnQucG9zaXRpb24gLSB2ZWxvY2l0eUV2ZW50LnBvc2l0aW9uO1xuICAgICAgICB2YXIgdGltZSA9IGxhc3RNb3ZlRXZlbnQudGltZSAtIHZlbG9jaXR5RXZlbnQudGltZTtcbiAgICAgICAgc3dpcGVyLnZlbG9jaXR5ID0gZGlzdGFuY2UgLyB0aW1lO1xuICAgICAgICBzd2lwZXIudmVsb2NpdHkgLz0gMjtcblxuICAgICAgICBpZiAoTWF0aC5hYnMoc3dpcGVyLnZlbG9jaXR5KSA8IHBhcmFtcy5mcmVlTW9kZU1pbmltdW1WZWxvY2l0eSkge1xuICAgICAgICAgIHN3aXBlci52ZWxvY2l0eSA9IDA7XG4gICAgICAgIH0gLy8gdGhpcyBpbXBsaWVzIHRoYXQgdGhlIHVzZXIgc3RvcHBlZCBtb3ZpbmcgYSBmaW5nZXIgdGhlbiByZWxlYXNlZC5cbiAgICAgICAgLy8gVGhlcmUgd291bGQgYmUgbm8gZXZlbnRzIHdpdGggZGlzdGFuY2UgemVybywgc28gdGhlIGxhc3QgZXZlbnQgaXMgc3RhbGUuXG5cblxuICAgICAgICBpZiAodGltZSA+IDE1MCB8fCBub3coKSAtIGxhc3RNb3ZlRXZlbnQudGltZSA+IDMwMCkge1xuICAgICAgICAgIHN3aXBlci52ZWxvY2l0eSA9IDA7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci52ZWxvY2l0eSA9IDA7XG4gICAgICB9XG5cbiAgICAgIHN3aXBlci52ZWxvY2l0eSAqPSBwYXJhbXMuZnJlZU1vZGVNb21lbnR1bVZlbG9jaXR5UmF0aW87XG4gICAgICBkYXRhLnZlbG9jaXRpZXMubGVuZ3RoID0gMDtcbiAgICAgIHZhciBtb21lbnR1bUR1cmF0aW9uID0gMTAwMCAqIHBhcmFtcy5mcmVlTW9kZU1vbWVudHVtUmF0aW87XG4gICAgICB2YXIgbW9tZW50dW1EaXN0YW5jZSA9IHN3aXBlci52ZWxvY2l0eSAqIG1vbWVudHVtRHVyYXRpb247XG4gICAgICB2YXIgbmV3UG9zaXRpb24gPSBzd2lwZXIudHJhbnNsYXRlICsgbW9tZW50dW1EaXN0YW5jZTtcbiAgICAgIGlmIChydGwpIG5ld1Bvc2l0aW9uID0gLW5ld1Bvc2l0aW9uO1xuICAgICAgdmFyIGRvQm91bmNlID0gZmFsc2U7XG4gICAgICB2YXIgYWZ0ZXJCb3VuY2VQb3NpdGlvbjtcbiAgICAgIHZhciBib3VuY2VBbW91bnQgPSBNYXRoLmFicyhzd2lwZXIudmVsb2NpdHkpICogMjAgKiBwYXJhbXMuZnJlZU1vZGVNb21lbnR1bUJvdW5jZVJhdGlvO1xuICAgICAgdmFyIG5lZWRzTG9vcEZpeDtcblxuICAgICAgaWYgKG5ld1Bvc2l0aW9uIDwgc3dpcGVyLm1heFRyYW5zbGF0ZSgpKSB7XG4gICAgICAgIGlmIChwYXJhbXMuZnJlZU1vZGVNb21lbnR1bUJvdW5jZSkge1xuICAgICAgICAgIGlmIChuZXdQb3NpdGlvbiArIHN3aXBlci5tYXhUcmFuc2xhdGUoKSA8IC1ib3VuY2VBbW91bnQpIHtcbiAgICAgICAgICAgIG5ld1Bvc2l0aW9uID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gYm91bmNlQW1vdW50O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGFmdGVyQm91bmNlUG9zaXRpb24gPSBzd2lwZXIubWF4VHJhbnNsYXRlKCk7XG4gICAgICAgICAgZG9Cb3VuY2UgPSB0cnVlO1xuICAgICAgICAgIGRhdGEuYWxsb3dNb21lbnR1bUJvdW5jZSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3UG9zaXRpb24gPSBzd2lwZXIubWF4VHJhbnNsYXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFyYW1zLmxvb3AgJiYgcGFyYW1zLmNlbnRlcmVkU2xpZGVzKSBuZWVkc0xvb3BGaXggPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChuZXdQb3NpdGlvbiA+IHN3aXBlci5taW5UcmFuc2xhdGUoKSkge1xuICAgICAgICBpZiAocGFyYW1zLmZyZWVNb2RlTW9tZW50dW1Cb3VuY2UpIHtcbiAgICAgICAgICBpZiAobmV3UG9zaXRpb24gLSBzd2lwZXIubWluVHJhbnNsYXRlKCkgPiBib3VuY2VBbW91bnQpIHtcbiAgICAgICAgICAgIG5ld1Bvc2l0aW9uID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpICsgYm91bmNlQW1vdW50O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGFmdGVyQm91bmNlUG9zaXRpb24gPSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gICAgICAgICAgZG9Cb3VuY2UgPSB0cnVlO1xuICAgICAgICAgIGRhdGEuYWxsb3dNb21lbnR1bUJvdW5jZSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3UG9zaXRpb24gPSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFyYW1zLmxvb3AgJiYgcGFyYW1zLmNlbnRlcmVkU2xpZGVzKSBuZWVkc0xvb3BGaXggPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChwYXJhbXMuZnJlZU1vZGVTdGlja3kpIHtcbiAgICAgICAgdmFyIG5leHRTbGlkZTtcblxuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNuYXBHcmlkLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgICAgaWYgKHNuYXBHcmlkW2pdID4gLW5ld1Bvc2l0aW9uKSB7XG4gICAgICAgICAgICBuZXh0U2xpZGUgPSBqO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKE1hdGguYWJzKHNuYXBHcmlkW25leHRTbGlkZV0gLSBuZXdQb3NpdGlvbikgPCBNYXRoLmFicyhzbmFwR3JpZFtuZXh0U2xpZGUgLSAxXSAtIG5ld1Bvc2l0aW9uKSB8fCBzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPT09ICduZXh0Jykge1xuICAgICAgICAgIG5ld1Bvc2l0aW9uID0gc25hcEdyaWRbbmV4dFNsaWRlXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXdQb3NpdGlvbiA9IHNuYXBHcmlkW25leHRTbGlkZSAtIDFdO1xuICAgICAgICB9XG5cbiAgICAgICAgbmV3UG9zaXRpb24gPSAtbmV3UG9zaXRpb247XG4gICAgICB9XG5cbiAgICAgIGlmIChuZWVkc0xvb3BGaXgpIHtcbiAgICAgICAgc3dpcGVyLm9uY2UoJ3RyYW5zaXRpb25FbmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgICAgICAgfSk7XG4gICAgICB9IC8vIEZpeCBkdXJhdGlvblxuXG5cbiAgICAgIGlmIChzd2lwZXIudmVsb2NpdHkgIT09IDApIHtcbiAgICAgICAgaWYgKHJ0bCkge1xuICAgICAgICAgIG1vbWVudHVtRHVyYXRpb24gPSBNYXRoLmFicygoLW5ld1Bvc2l0aW9uIC0gc3dpcGVyLnRyYW5zbGF0ZSkgLyBzd2lwZXIudmVsb2NpdHkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1vbWVudHVtRHVyYXRpb24gPSBNYXRoLmFicygobmV3UG9zaXRpb24gLSBzd2lwZXIudHJhbnNsYXRlKSAvIHN3aXBlci52ZWxvY2l0eSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFyYW1zLmZyZWVNb2RlU3RpY2t5KSB7XG4gICAgICAgICAgLy8gSWYgZnJlZU1vZGVTdGlja3kgaXMgYWN0aXZlIGFuZCB0aGUgdXNlciBlbmRzIGEgc3dpcGUgd2l0aCBhIHNsb3ctdmVsb2NpdHlcbiAgICAgICAgICAvLyBldmVudCwgdGhlbiBkdXJhdGlvbnMgY2FuIGJlIDIwKyBzZWNvbmRzIHRvIHNsaWRlIG9uZSAob3IgemVybyEpIHNsaWRlcy5cbiAgICAgICAgICAvLyBJdCdzIGVhc3kgdG8gc2VlIHRoaXMgd2hlbiBzaW11bGF0aW5nIHRvdWNoIHdpdGggbW91c2UgZXZlbnRzLiBUbyBmaXggdGhpcyxcbiAgICAgICAgICAvLyBsaW1pdCBzaW5nbGUtc2xpZGUgc3dpcGVzIHRvIHRoZSBkZWZhdWx0IHNsaWRlIGR1cmF0aW9uLiBUaGlzIGFsc28gaGFzIHRoZVxuICAgICAgICAgIC8vIG5pY2Ugc2lkZSBlZmZlY3Qgb2YgbWF0Y2hpbmcgc2xpZGUgc3BlZWQgaWYgdGhlIHVzZXIgc3RvcHBlZCBtb3ZpbmcgYmVmb3JlXG4gICAgICAgICAgLy8gbGlmdGluZyBmaW5nZXIgb3IgbW91c2UgdnMuIG1vdmluZyBzbG93bHkgYmVmb3JlIGxpZnRpbmcgdGhlIGZpbmdlci9tb3VzZS5cbiAgICAgICAgICAvLyBGb3IgZmFzdGVyIHN3aXBlcywgYWxzbyBhcHBseSBsaW1pdHMgKGFsYmVpdCBoaWdoZXIgb25lcykuXG4gICAgICAgICAgdmFyIG1vdmVEaXN0YW5jZSA9IE1hdGguYWJzKChydGwgPyAtbmV3UG9zaXRpb24gOiBuZXdQb3NpdGlvbikgLSBzd2lwZXIudHJhbnNsYXRlKTtcbiAgICAgICAgICB2YXIgY3VycmVudFNsaWRlU2l6ZSA9IHN3aXBlci5zbGlkZXNTaXplc0dyaWRbc3dpcGVyLmFjdGl2ZUluZGV4XTtcblxuICAgICAgICAgIGlmIChtb3ZlRGlzdGFuY2UgPCBjdXJyZW50U2xpZGVTaXplKSB7XG4gICAgICAgICAgICBtb21lbnR1bUR1cmF0aW9uID0gcGFyYW1zLnNwZWVkO1xuICAgICAgICAgIH0gZWxzZSBpZiAobW92ZURpc3RhbmNlIDwgMiAqIGN1cnJlbnRTbGlkZVNpemUpIHtcbiAgICAgICAgICAgIG1vbWVudHVtRHVyYXRpb24gPSBwYXJhbXMuc3BlZWQgKiAxLjU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1vbWVudHVtRHVyYXRpb24gPSBwYXJhbXMuc3BlZWQgKiAyLjU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHBhcmFtcy5mcmVlTW9kZVN0aWNreSkge1xuICAgICAgICBzd2lwZXIuc2xpZGVUb0Nsb3Nlc3QoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAocGFyYW1zLmZyZWVNb2RlTW9tZW50dW1Cb3VuY2UgJiYgZG9Cb3VuY2UpIHtcbiAgICAgICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKGFmdGVyQm91bmNlUG9zaXRpb24pO1xuICAgICAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihtb21lbnR1bUR1cmF0aW9uKTtcbiAgICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZShuZXdQb3NpdGlvbik7XG4gICAgICAgIHN3aXBlci50cmFuc2l0aW9uU3RhcnQodHJ1ZSwgc3dpcGVyLnN3aXBlRGlyZWN0aW9uKTtcbiAgICAgICAgc3dpcGVyLmFuaW1hdGluZyA9IHRydWU7XG4gICAgICAgICR3cmFwcGVyRWwudHJhbnNpdGlvbkVuZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhZGF0YS5hbGxvd01vbWVudHVtQm91bmNlKSByZXR1cm47XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ21vbWVudHVtQm91bmNlJyk7XG4gICAgICAgICAgc3dpcGVyLnNldFRyYW5zaXRpb24ocGFyYW1zLnNwZWVkKTtcbiAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUoYWZ0ZXJCb3VuY2VQb3NpdGlvbik7XG4gICAgICAgICAgICAkd3JhcHBlckVsLnRyYW5zaXRpb25FbmQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gICAgICAgICAgICAgIHN3aXBlci50cmFuc2l0aW9uRW5kKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LCAwKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKHN3aXBlci52ZWxvY2l0eSkge1xuICAgICAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MobmV3UG9zaXRpb24pO1xuICAgICAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihtb21lbnR1bUR1cmF0aW9uKTtcbiAgICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZShuZXdQb3NpdGlvbik7XG4gICAgICAgIHN3aXBlci50cmFuc2l0aW9uU3RhcnQodHJ1ZSwgc3dpcGVyLnN3aXBlRGlyZWN0aW9uKTtcblxuICAgICAgICBpZiAoIXN3aXBlci5hbmltYXRpbmcpIHtcbiAgICAgICAgICBzd2lwZXIuYW5pbWF0aW5nID0gdHJ1ZTtcbiAgICAgICAgICAkd3JhcHBlckVsLnRyYW5zaXRpb25FbmQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgICAgICAgc3dpcGVyLnRyYW5zaXRpb25FbmQoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKG5ld1Bvc2l0aW9uKTtcbiAgICAgIH1cblxuICAgICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgIH0gZWxzZSBpZiAocGFyYW1zLmZyZWVNb2RlU3RpY2t5KSB7XG4gICAgICBzd2lwZXIuc2xpZGVUb0Nsb3Nlc3QoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIXBhcmFtcy5mcmVlTW9kZU1vbWVudHVtIHx8IHRpbWVEaWZmID49IHBhcmFtcy5sb25nU3dpcGVzTXMpIHtcbiAgICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcygpO1xuICAgICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgIH1cblxuICAgIHJldHVybjtcbiAgfSAvLyBGaW5kIGN1cnJlbnQgc2xpZGVcblxuXG4gIHZhciBzdG9wSW5kZXggPSAwO1xuICB2YXIgZ3JvdXBTaXplID0gc3dpcGVyLnNsaWRlc1NpemVzR3JpZFswXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWRlc0dyaWQubGVuZ3RoOyBpICs9IGkgPCBwYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwID8gMSA6IHBhcmFtcy5zbGlkZXNQZXJHcm91cCkge1xuICAgIHZhciBfaW5jcmVtZW50ID0gaSA8IHBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAgLSAxID8gMSA6IHBhcmFtcy5zbGlkZXNQZXJHcm91cDtcblxuICAgIGlmICh0eXBlb2Ygc2xpZGVzR3JpZFtpICsgX2luY3JlbWVudF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBpZiAoY3VycmVudFBvcyA+PSBzbGlkZXNHcmlkW2ldICYmIGN1cnJlbnRQb3MgPCBzbGlkZXNHcmlkW2kgKyBfaW5jcmVtZW50XSkge1xuICAgICAgICBzdG9wSW5kZXggPSBpO1xuICAgICAgICBncm91cFNpemUgPSBzbGlkZXNHcmlkW2kgKyBfaW5jcmVtZW50XSAtIHNsaWRlc0dyaWRbaV07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjdXJyZW50UG9zID49IHNsaWRlc0dyaWRbaV0pIHtcbiAgICAgIHN0b3BJbmRleCA9IGk7XG4gICAgICBncm91cFNpemUgPSBzbGlkZXNHcmlkW3NsaWRlc0dyaWQubGVuZ3RoIC0gMV0gLSBzbGlkZXNHcmlkW3NsaWRlc0dyaWQubGVuZ3RoIC0gMl07XG4gICAgfVxuICB9IC8vIEZpbmQgY3VycmVudCBzbGlkZSBzaXplXG5cblxuICB2YXIgcmF0aW8gPSAoY3VycmVudFBvcyAtIHNsaWRlc0dyaWRbc3RvcEluZGV4XSkgLyBncm91cFNpemU7XG4gIHZhciBpbmNyZW1lbnQgPSBzdG9wSW5kZXggPCBwYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwIC0gMSA/IDEgOiBwYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG5cbiAgaWYgKHRpbWVEaWZmID4gcGFyYW1zLmxvbmdTd2lwZXNNcykge1xuICAgIC8vIExvbmcgdG91Y2hlc1xuICAgIGlmICghcGFyYW1zLmxvbmdTd2lwZXMpIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ25leHQnKSB7XG4gICAgICBpZiAocmF0aW8gPj0gcGFyYW1zLmxvbmdTd2lwZXNSYXRpbykgc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4ICsgaW5jcmVtZW50KTtlbHNlIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCk7XG4gICAgfVxuXG4gICAgaWYgKHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ3ByZXYnKSB7XG4gICAgICBpZiAocmF0aW8gPiAxIC0gcGFyYW1zLmxvbmdTd2lwZXNSYXRpbykgc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4ICsgaW5jcmVtZW50KTtlbHNlIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIFNob3J0IHN3aXBlc1xuICAgIGlmICghcGFyYW1zLnNob3J0U3dpcGVzKSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBpc05hdkJ1dHRvblRhcmdldCA9IHN3aXBlci5uYXZpZ2F0aW9uICYmIChlLnRhcmdldCA9PT0gc3dpcGVyLm5hdmlnYXRpb24ubmV4dEVsIHx8IGUudGFyZ2V0ID09PSBzd2lwZXIubmF2aWdhdGlvbi5wcmV2RWwpO1xuXG4gICAgaWYgKCFpc05hdkJ1dHRvblRhcmdldCkge1xuICAgICAgaWYgKHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ25leHQnKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCArIGluY3JlbWVudCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPT09ICdwcmV2Jykge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXgpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZS50YXJnZXQgPT09IHN3aXBlci5uYXZpZ2F0aW9uLm5leHRFbCkge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4ICsgaW5jcmVtZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4KTtcbiAgICB9XG4gIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvblJlc2l6ZSgpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgZWwgPSBzd2lwZXIuZWw7XG4gIGlmIChlbCAmJiBlbC5vZmZzZXRXaWR0aCA9PT0gMCkgcmV0dXJuOyAvLyBCcmVha3BvaW50c1xuXG4gIGlmIChwYXJhbXMuYnJlYWtwb2ludHMpIHtcbiAgICBzd2lwZXIuc2V0QnJlYWtwb2ludCgpO1xuICB9IC8vIFNhdmUgbG9ja3NcblxuXG4gIHZhciBhbGxvd1NsaWRlTmV4dCA9IHN3aXBlci5hbGxvd1NsaWRlTmV4dCxcbiAgICAgIGFsbG93U2xpZGVQcmV2ID0gc3dpcGVyLmFsbG93U2xpZGVQcmV2LFxuICAgICAgc25hcEdyaWQgPSBzd2lwZXIuc25hcEdyaWQ7IC8vIERpc2FibGUgbG9ja3Mgb24gcmVzaXplXG5cbiAgc3dpcGVyLmFsbG93U2xpZGVOZXh0ID0gdHJ1ZTtcbiAgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID0gdHJ1ZTtcbiAgc3dpcGVyLnVwZGF0ZVNpemUoKTtcbiAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuXG4gIGlmICgocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyB8fCBwYXJhbXMuc2xpZGVzUGVyVmlldyA+IDEpICYmIHN3aXBlci5pc0VuZCAmJiAhc3dpcGVyLmlzQmVnaW5uaW5nICYmICFzd2lwZXIucGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxLCAwLCBmYWxzZSwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4LCAwLCBmYWxzZSwgdHJ1ZSk7XG4gIH1cblxuICBpZiAoc3dpcGVyLmF1dG9wbGF5ICYmIHN3aXBlci5hdXRvcGxheS5ydW5uaW5nICYmIHN3aXBlci5hdXRvcGxheS5wYXVzZWQpIHtcbiAgICBzd2lwZXIuYXV0b3BsYXkucnVuKCk7XG4gIH0gLy8gUmV0dXJuIGxvY2tzIGFmdGVyIHJlc2l6ZVxuXG5cbiAgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID0gYWxsb3dTbGlkZVByZXY7XG4gIHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9IGFsbG93U2xpZGVOZXh0O1xuXG4gIGlmIChzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc25hcEdyaWQgIT09IHN3aXBlci5zbmFwR3JpZCkge1xuICAgIHN3aXBlci5jaGVja092ZXJmbG93KCk7XG4gIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvbkNsaWNrKGUpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG5cbiAgaWYgKCFzd2lwZXIuYWxsb3dDbGljaykge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLnByZXZlbnRDbGlja3MpIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLnByZXZlbnRDbGlja3NQcm9wYWdhdGlvbiAmJiBzd2lwZXIuYW5pbWF0aW5nKSB7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICB9XG4gIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvblNjcm9sbCgpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciB3cmFwcGVyRWwgPSBzd2lwZXIud3JhcHBlckVsLFxuICAgICAgcnRsVHJhbnNsYXRlID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZTtcbiAgc3dpcGVyLnByZXZpb3VzVHJhbnNsYXRlID0gc3dpcGVyLnRyYW5zbGF0ZTtcblxuICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgaWYgKHJ0bFRyYW5zbGF0ZSkge1xuICAgICAgc3dpcGVyLnRyYW5zbGF0ZSA9IHdyYXBwZXJFbC5zY3JvbGxXaWR0aCAtIHdyYXBwZXJFbC5vZmZzZXRXaWR0aCAtIHdyYXBwZXJFbC5zY3JvbGxMZWZ0O1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIudHJhbnNsYXRlID0gLXdyYXBwZXJFbC5zY3JvbGxMZWZ0O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIudHJhbnNsYXRlID0gLXdyYXBwZXJFbC5zY3JvbGxUb3A7XG4gIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5cblxuICBpZiAoc3dpcGVyLnRyYW5zbGF0ZSA9PT0gLTApIHN3aXBlci50cmFuc2xhdGUgPSAwO1xuICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgdmFyIG5ld1Byb2dyZXNzO1xuICB2YXIgdHJhbnNsYXRlc0RpZmYgPSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgLSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG5cbiAgaWYgKHRyYW5zbGF0ZXNEaWZmID09PSAwKSB7XG4gICAgbmV3UHJvZ3Jlc3MgPSAwO1xuICB9IGVsc2Uge1xuICAgIG5ld1Byb2dyZXNzID0gKHN3aXBlci50cmFuc2xhdGUgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIC8gdHJhbnNsYXRlc0RpZmY7XG4gIH1cblxuICBpZiAobmV3UHJvZ3Jlc3MgIT09IHN3aXBlci5wcm9ncmVzcykge1xuICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcyhydGxUcmFuc2xhdGUgPyAtc3dpcGVyLnRyYW5zbGF0ZSA6IHN3aXBlci50cmFuc2xhdGUpO1xuICB9XG5cbiAgc3dpcGVyLmVtaXQoJ3NldFRyYW5zbGF0ZScsIHN3aXBlci50cmFuc2xhdGUsIGZhbHNlKTtcbn0iLCJpbXBvcnQgeyBnZXREb2N1bWVudCB9IGZyb20gJ3Nzci13aW5kb3cnO1xuaW1wb3J0IG9uVG91Y2hTdGFydCBmcm9tICcuL29uVG91Y2hTdGFydCc7XG5pbXBvcnQgb25Ub3VjaE1vdmUgZnJvbSAnLi9vblRvdWNoTW92ZSc7XG5pbXBvcnQgb25Ub3VjaEVuZCBmcm9tICcuL29uVG91Y2hFbmQnO1xuaW1wb3J0IG9uUmVzaXplIGZyb20gJy4vb25SZXNpemUnO1xuaW1wb3J0IG9uQ2xpY2sgZnJvbSAnLi9vbkNsaWNrJztcbmltcG9ydCBvblNjcm9sbCBmcm9tICcuL29uU2Nyb2xsJztcbnZhciBkdW1teUV2ZW50QXR0YWNoZWQgPSBmYWxzZTtcblxuZnVuY3Rpb24gZHVtbXlFdmVudExpc3RlbmVyKCkge31cblxuZnVuY3Rpb24gYXR0YWNoRXZlbnRzKCkge1xuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMsXG4gICAgICB0b3VjaEV2ZW50cyA9IHN3aXBlci50b3VjaEV2ZW50cyxcbiAgICAgIGVsID0gc3dpcGVyLmVsLFxuICAgICAgd3JhcHBlckVsID0gc3dpcGVyLndyYXBwZXJFbCxcbiAgICAgIGRldmljZSA9IHN3aXBlci5kZXZpY2UsXG4gICAgICBzdXBwb3J0ID0gc3dpcGVyLnN1cHBvcnQ7XG4gIHN3aXBlci5vblRvdWNoU3RhcnQgPSBvblRvdWNoU3RhcnQuYmluZChzd2lwZXIpO1xuICBzd2lwZXIub25Ub3VjaE1vdmUgPSBvblRvdWNoTW92ZS5iaW5kKHN3aXBlcik7XG4gIHN3aXBlci5vblRvdWNoRW5kID0gb25Ub3VjaEVuZC5iaW5kKHN3aXBlcik7XG5cbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgc3dpcGVyLm9uU2Nyb2xsID0gb25TY3JvbGwuYmluZChzd2lwZXIpO1xuICB9XG5cbiAgc3dpcGVyLm9uQ2xpY2sgPSBvbkNsaWNrLmJpbmQoc3dpcGVyKTtcbiAgdmFyIGNhcHR1cmUgPSAhIXBhcmFtcy5uZXN0ZWQ7IC8vIFRvdWNoIEV2ZW50c1xuXG4gIGlmICghc3VwcG9ydC50b3VjaCAmJiBzdXBwb3J0LnBvaW50ZXJFdmVudHMpIHtcbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLnN0YXJ0LCBzd2lwZXIub25Ub3VjaFN0YXJ0LCBmYWxzZSk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5tb3ZlLCBzd2lwZXIub25Ub3VjaE1vdmUsIGNhcHR1cmUpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMuZW5kLCBzd2lwZXIub25Ub3VjaEVuZCwgZmFsc2UpO1xuICB9IGVsc2Uge1xuICAgIGlmIChzdXBwb3J0LnRvdWNoKSB7XG4gICAgICB2YXIgcGFzc2l2ZUxpc3RlbmVyID0gdG91Y2hFdmVudHMuc3RhcnQgPT09ICd0b3VjaHN0YXJ0JyAmJiBzdXBwb3J0LnBhc3NpdmVMaXN0ZW5lciAmJiBwYXJhbXMucGFzc2l2ZUxpc3RlbmVycyA/IHtcbiAgICAgICAgcGFzc2l2ZTogdHJ1ZSxcbiAgICAgICAgY2FwdHVyZTogZmFsc2VcbiAgICAgIH0gOiBmYWxzZTtcbiAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMuc3RhcnQsIHN3aXBlci5vblRvdWNoU3RhcnQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgICBlbC5hZGRFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLm1vdmUsIHN3aXBlci5vblRvdWNoTW92ZSwgc3VwcG9ydC5wYXNzaXZlTGlzdGVuZXIgPyB7XG4gICAgICAgIHBhc3NpdmU6IGZhbHNlLFxuICAgICAgICBjYXB0dXJlOiBjYXB0dXJlXG4gICAgICB9IDogY2FwdHVyZSk7XG4gICAgICBlbC5hZGRFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLmVuZCwgc3dpcGVyLm9uVG91Y2hFbmQsIHBhc3NpdmVMaXN0ZW5lcik7XG5cbiAgICAgIGlmICh0b3VjaEV2ZW50cy5jYW5jZWwpIHtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5jYW5jZWwsIHN3aXBlci5vblRvdWNoRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWR1bW15RXZlbnRBdHRhY2hlZCkge1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgZHVtbXlFdmVudExpc3RlbmVyKTtcbiAgICAgICAgZHVtbXlFdmVudEF0dGFjaGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLnNpbXVsYXRlVG91Y2ggJiYgIWRldmljZS5pb3MgJiYgIWRldmljZS5hbmRyb2lkIHx8IHBhcmFtcy5zaW11bGF0ZVRvdWNoICYmICFzdXBwb3J0LnRvdWNoICYmIGRldmljZS5pb3MpIHtcbiAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHN3aXBlci5vblRvdWNoU3RhcnQsIGZhbHNlKTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHN3aXBlci5vblRvdWNoTW92ZSwgY2FwdHVyZSk7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgc3dpcGVyLm9uVG91Y2hFbmQsIGZhbHNlKTtcbiAgICB9XG4gIH0gLy8gUHJldmVudCBMaW5rcyBDbGlja3NcblxuXG4gIGlmIChwYXJhbXMucHJldmVudENsaWNrcyB8fCBwYXJhbXMucHJldmVudENsaWNrc1Byb3BhZ2F0aW9uKSB7XG4gICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBzd2lwZXIub25DbGljaywgdHJ1ZSk7XG4gIH1cblxuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICB3cmFwcGVyRWwuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgc3dpcGVyLm9uU2Nyb2xsKTtcbiAgfSAvLyBSZXNpemUgaGFuZGxlclxuXG5cbiAgaWYgKHBhcmFtcy51cGRhdGVPbldpbmRvd1Jlc2l6ZSkge1xuICAgIHN3aXBlci5vbihkZXZpY2UuaW9zIHx8IGRldmljZS5hbmRyb2lkID8gJ3Jlc2l6ZSBvcmllbnRhdGlvbmNoYW5nZSBvYnNlcnZlclVwZGF0ZScgOiAncmVzaXplIG9ic2VydmVyVXBkYXRlJywgb25SZXNpemUsIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIHN3aXBlci5vbignb2JzZXJ2ZXJVcGRhdGUnLCBvblJlc2l6ZSwgdHJ1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGV0YWNoRXZlbnRzKCkge1xuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMsXG4gICAgICB0b3VjaEV2ZW50cyA9IHN3aXBlci50b3VjaEV2ZW50cyxcbiAgICAgIGVsID0gc3dpcGVyLmVsLFxuICAgICAgd3JhcHBlckVsID0gc3dpcGVyLndyYXBwZXJFbCxcbiAgICAgIGRldmljZSA9IHN3aXBlci5kZXZpY2UsXG4gICAgICBzdXBwb3J0ID0gc3dpcGVyLnN1cHBvcnQ7XG4gIHZhciBjYXB0dXJlID0gISFwYXJhbXMubmVzdGVkOyAvLyBUb3VjaCBFdmVudHNcblxuICBpZiAoIXN1cHBvcnQudG91Y2ggJiYgc3VwcG9ydC5wb2ludGVyRXZlbnRzKSB7XG4gICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5zdGFydCwgc3dpcGVyLm9uVG91Y2hTdGFydCwgZmFsc2UpO1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMubW92ZSwgc3dpcGVyLm9uVG91Y2hNb3ZlLCBjYXB0dXJlKTtcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLmVuZCwgc3dpcGVyLm9uVG91Y2hFbmQsIGZhbHNlKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoc3VwcG9ydC50b3VjaCkge1xuICAgICAgdmFyIHBhc3NpdmVMaXN0ZW5lciA9IHRvdWNoRXZlbnRzLnN0YXJ0ID09PSAnb25Ub3VjaFN0YXJ0JyAmJiBzdXBwb3J0LnBhc3NpdmVMaXN0ZW5lciAmJiBwYXJhbXMucGFzc2l2ZUxpc3RlbmVycyA/IHtcbiAgICAgICAgcGFzc2l2ZTogdHJ1ZSxcbiAgICAgICAgY2FwdHVyZTogZmFsc2VcbiAgICAgIH0gOiBmYWxzZTtcbiAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMuc3RhcnQsIHN3aXBlci5vblRvdWNoU3RhcnQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLm1vdmUsIHN3aXBlci5vblRvdWNoTW92ZSwgY2FwdHVyZSk7XG4gICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLmVuZCwgc3dpcGVyLm9uVG91Y2hFbmQsIHBhc3NpdmVMaXN0ZW5lcik7XG5cbiAgICAgIGlmICh0b3VjaEV2ZW50cy5jYW5jZWwpIHtcbiAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5jYW5jZWwsIHN3aXBlci5vblRvdWNoRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwYXJhbXMuc2ltdWxhdGVUb3VjaCAmJiAhZGV2aWNlLmlvcyAmJiAhZGV2aWNlLmFuZHJvaWQgfHwgcGFyYW1zLnNpbXVsYXRlVG91Y2ggJiYgIXN1cHBvcnQudG91Y2ggJiYgZGV2aWNlLmlvcykge1xuICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgc3dpcGVyLm9uVG91Y2hTdGFydCwgZmFsc2UpO1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgc3dpcGVyLm9uVG91Y2hNb3ZlLCBjYXB0dXJlKTtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBzd2lwZXIub25Ub3VjaEVuZCwgZmFsc2UpO1xuICAgIH1cbiAgfSAvLyBQcmV2ZW50IExpbmtzIENsaWNrc1xuXG5cbiAgaWYgKHBhcmFtcy5wcmV2ZW50Q2xpY2tzIHx8IHBhcmFtcy5wcmV2ZW50Q2xpY2tzUHJvcGFnYXRpb24pIHtcbiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHN3aXBlci5vbkNsaWNrLCB0cnVlKTtcbiAgfVxuXG4gIGlmIChwYXJhbXMuY3NzTW9kZSkge1xuICAgIHdyYXBwZXJFbC5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBzd2lwZXIub25TY3JvbGwpO1xuICB9IC8vIFJlc2l6ZSBoYW5kbGVyXG5cblxuICBzd2lwZXIub2ZmKGRldmljZS5pb3MgfHwgZGV2aWNlLmFuZHJvaWQgPyAncmVzaXplIG9yaWVudGF0aW9uY2hhbmdlIG9ic2VydmVyVXBkYXRlJyA6ICdyZXNpemUgb2JzZXJ2ZXJVcGRhdGUnLCBvblJlc2l6ZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgYXR0YWNoRXZlbnRzOiBhdHRhY2hFdmVudHMsXG4gIGRldGFjaEV2ZW50czogZGV0YWNoRXZlbnRzXG59OyIsImZ1bmN0aW9uIGNoZWNrT3ZlcmZsb3coKSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgdmFyIHdhc0xvY2tlZCA9IHN3aXBlci5pc0xvY2tlZDtcbiAgdmFyIGxhc3RTbGlkZVBvc2l0aW9uID0gc3dpcGVyLnNsaWRlcy5sZW5ndGggPiAwICYmIHBhcmFtcy5zbGlkZXNPZmZzZXRCZWZvcmUgKyBwYXJhbXMuc3BhY2VCZXR3ZWVuICogKHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gMSkgKyBzd2lwZXIuc2xpZGVzWzBdLm9mZnNldFdpZHRoICogc3dpcGVyLnNsaWRlcy5sZW5ndGg7XG5cbiAgaWYgKHBhcmFtcy5zbGlkZXNPZmZzZXRCZWZvcmUgJiYgcGFyYW1zLnNsaWRlc09mZnNldEFmdGVyICYmIGxhc3RTbGlkZVBvc2l0aW9uKSB7XG4gICAgc3dpcGVyLmlzTG9ja2VkID0gbGFzdFNsaWRlUG9zaXRpb24gPD0gc3dpcGVyLnNpemU7XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLmlzTG9ja2VkID0gc3dpcGVyLnNuYXBHcmlkLmxlbmd0aCA9PT0gMTtcbiAgfVxuXG4gIHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9ICFzd2lwZXIuaXNMb2NrZWQ7XG4gIHN3aXBlci5hbGxvd1NsaWRlUHJldiA9ICFzd2lwZXIuaXNMb2NrZWQ7IC8vIGV2ZW50c1xuXG4gIGlmICh3YXNMb2NrZWQgIT09IHN3aXBlci5pc0xvY2tlZCkgc3dpcGVyLmVtaXQoc3dpcGVyLmlzTG9ja2VkID8gJ2xvY2snIDogJ3VubG9jaycpO1xuXG4gIGlmICh3YXNMb2NrZWQgJiYgd2FzTG9ja2VkICE9PSBzd2lwZXIuaXNMb2NrZWQpIHtcbiAgICBzd2lwZXIuaXNFbmQgPSBmYWxzZTtcbiAgICBpZiAoc3dpcGVyLm5hdmlnYXRpb24pIHN3aXBlci5uYXZpZ2F0aW9uLnVwZGF0ZSgpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY2hlY2tPdmVyZmxvdzogY2hlY2tPdmVyZmxvd1xufTsiLCJleHBvcnQgZGVmYXVsdCB7XG4gIGluaXQ6IHRydWUsXG4gIGRpcmVjdGlvbjogJ2hvcml6b250YWwnLFxuICB0b3VjaEV2ZW50c1RhcmdldDogJ2NvbnRhaW5lcicsXG4gIGluaXRpYWxTbGlkZTogMCxcbiAgc3BlZWQ6IDMwMCxcbiAgY3NzTW9kZTogZmFsc2UsXG4gIHVwZGF0ZU9uV2luZG93UmVzaXplOiB0cnVlLFxuICAvLyBPdmVycmlkZXNcbiAgd2lkdGg6IG51bGwsXG4gIGhlaWdodDogbnVsbCxcbiAgLy9cbiAgcHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uOiBmYWxzZSxcbiAgLy8gc3NyXG4gIHVzZXJBZ2VudDogbnVsbCxcbiAgdXJsOiBudWxsLFxuICAvLyBUbyBzdXBwb3J0IGlPUydzIHN3aXBlLXRvLWdvLWJhY2sgZ2VzdHVyZSAod2hlbiBiZWluZyB1c2VkIGluLWFwcCkuXG4gIGVkZ2VTd2lwZURldGVjdGlvbjogZmFsc2UsXG4gIGVkZ2VTd2lwZVRocmVzaG9sZDogMjAsXG4gIC8vIEZyZWUgbW9kZVxuICBmcmVlTW9kZTogZmFsc2UsXG4gIGZyZWVNb2RlTW9tZW50dW06IHRydWUsXG4gIGZyZWVNb2RlTW9tZW50dW1SYXRpbzogMSxcbiAgZnJlZU1vZGVNb21lbnR1bUJvdW5jZTogdHJ1ZSxcbiAgZnJlZU1vZGVNb21lbnR1bUJvdW5jZVJhdGlvOiAxLFxuICBmcmVlTW9kZU1vbWVudHVtVmVsb2NpdHlSYXRpbzogMSxcbiAgZnJlZU1vZGVTdGlja3k6IGZhbHNlLFxuICBmcmVlTW9kZU1pbmltdW1WZWxvY2l0eTogMC4wMixcbiAgLy8gQXV0b2hlaWdodFxuICBhdXRvSGVpZ2h0OiBmYWxzZSxcbiAgLy8gU2V0IHdyYXBwZXIgd2lkdGhcbiAgc2V0V3JhcHBlclNpemU6IGZhbHNlLFxuICAvLyBWaXJ0dWFsIFRyYW5zbGF0ZVxuICB2aXJ0dWFsVHJhbnNsYXRlOiBmYWxzZSxcbiAgLy8gRWZmZWN0c1xuICBlZmZlY3Q6ICdzbGlkZScsXG4gIC8vICdzbGlkZScgb3IgJ2ZhZGUnIG9yICdjdWJlJyBvciAnY292ZXJmbG93JyBvciAnZmxpcCdcbiAgLy8gQnJlYWtwb2ludHNcbiAgYnJlYWtwb2ludHM6IHVuZGVmaW5lZCxcbiAgLy8gU2xpZGVzIGdyaWRcbiAgc3BhY2VCZXR3ZWVuOiAwLFxuICBzbGlkZXNQZXJWaWV3OiAxLFxuICBzbGlkZXNQZXJDb2x1bW46IDEsXG4gIHNsaWRlc1BlckNvbHVtbkZpbGw6ICdjb2x1bW4nLFxuICBzbGlkZXNQZXJHcm91cDogMSxcbiAgc2xpZGVzUGVyR3JvdXBTa2lwOiAwLFxuICBjZW50ZXJlZFNsaWRlczogZmFsc2UsXG4gIGNlbnRlcmVkU2xpZGVzQm91bmRzOiBmYWxzZSxcbiAgc2xpZGVzT2Zmc2V0QmVmb3JlOiAwLFxuICAvLyBpbiBweFxuICBzbGlkZXNPZmZzZXRBZnRlcjogMCxcbiAgLy8gaW4gcHhcbiAgbm9ybWFsaXplU2xpZGVJbmRleDogdHJ1ZSxcbiAgY2VudGVySW5zdWZmaWNpZW50U2xpZGVzOiBmYWxzZSxcbiAgLy8gRGlzYWJsZSBzd2lwZXIgYW5kIGhpZGUgbmF2aWdhdGlvbiB3aGVuIGNvbnRhaW5lciBub3Qgb3ZlcmZsb3dcbiAgd2F0Y2hPdmVyZmxvdzogZmFsc2UsXG4gIC8vIFJvdW5kIGxlbmd0aFxuICByb3VuZExlbmd0aHM6IGZhbHNlLFxuICAvLyBUb3VjaGVzXG4gIHRvdWNoUmF0aW86IDEsXG4gIHRvdWNoQW5nbGU6IDQ1LFxuICBzaW11bGF0ZVRvdWNoOiB0cnVlLFxuICBzaG9ydFN3aXBlczogdHJ1ZSxcbiAgbG9uZ1N3aXBlczogdHJ1ZSxcbiAgbG9uZ1N3aXBlc1JhdGlvOiAwLjUsXG4gIGxvbmdTd2lwZXNNczogMzAwLFxuICBmb2xsb3dGaW5nZXI6IHRydWUsXG4gIGFsbG93VG91Y2hNb3ZlOiB0cnVlLFxuICB0aHJlc2hvbGQ6IDAsXG4gIHRvdWNoTW92ZVN0b3BQcm9wYWdhdGlvbjogZmFsc2UsXG4gIHRvdWNoU3RhcnRQcmV2ZW50RGVmYXVsdDogdHJ1ZSxcbiAgdG91Y2hTdGFydEZvcmNlUHJldmVudERlZmF1bHQ6IGZhbHNlLFxuICB0b3VjaFJlbGVhc2VPbkVkZ2VzOiBmYWxzZSxcbiAgLy8gVW5pcXVlIE5hdmlnYXRpb24gRWxlbWVudHNcbiAgdW5pcXVlTmF2RWxlbWVudHM6IHRydWUsXG4gIC8vIFJlc2lzdGFuY2VcbiAgcmVzaXN0YW5jZTogdHJ1ZSxcbiAgcmVzaXN0YW5jZVJhdGlvOiAwLjg1LFxuICAvLyBQcm9ncmVzc1xuICB3YXRjaFNsaWRlc1Byb2dyZXNzOiBmYWxzZSxcbiAgd2F0Y2hTbGlkZXNWaXNpYmlsaXR5OiBmYWxzZSxcbiAgLy8gQ3Vyc29yXG4gIGdyYWJDdXJzb3I6IGZhbHNlLFxuICAvLyBDbGlja3NcbiAgcHJldmVudENsaWNrczogdHJ1ZSxcbiAgcHJldmVudENsaWNrc1Byb3BhZ2F0aW9uOiB0cnVlLFxuICBzbGlkZVRvQ2xpY2tlZFNsaWRlOiBmYWxzZSxcbiAgLy8gSW1hZ2VzXG4gIHByZWxvYWRJbWFnZXM6IHRydWUsXG4gIHVwZGF0ZU9uSW1hZ2VzUmVhZHk6IHRydWUsXG4gIC8vIGxvb3BcbiAgbG9vcDogZmFsc2UsXG4gIGxvb3BBZGRpdGlvbmFsU2xpZGVzOiAwLFxuICBsb29wZWRTbGlkZXM6IG51bGwsXG4gIGxvb3BGaWxsR3JvdXBXaXRoQmxhbms6IGZhbHNlLFxuICBsb29wUHJldmVudHNTbGlkZTogdHJ1ZSxcbiAgLy8gU3dpcGluZy9ubyBzd2lwaW5nXG4gIGFsbG93U2xpZGVQcmV2OiB0cnVlLFxuICBhbGxvd1NsaWRlTmV4dDogdHJ1ZSxcbiAgc3dpcGVIYW5kbGVyOiBudWxsLFxuICAvLyAnLnN3aXBlLWhhbmRsZXInLFxuICBub1N3aXBpbmc6IHRydWUsXG4gIG5vU3dpcGluZ0NsYXNzOiAnc3dpcGVyLW5vLXN3aXBpbmcnLFxuICBub1N3aXBpbmdTZWxlY3RvcjogbnVsbCxcbiAgLy8gUGFzc2l2ZSBMaXN0ZW5lcnNcbiAgcGFzc2l2ZUxpc3RlbmVyczogdHJ1ZSxcbiAgLy8gTlNcbiAgY29udGFpbmVyTW9kaWZpZXJDbGFzczogJ3N3aXBlci1jb250YWluZXItJyxcbiAgLy8gTkVXXG4gIHNsaWRlQ2xhc3M6ICdzd2lwZXItc2xpZGUnLFxuICBzbGlkZUJsYW5rQ2xhc3M6ICdzd2lwZXItc2xpZGUtaW52aXNpYmxlLWJsYW5rJyxcbiAgc2xpZGVBY3RpdmVDbGFzczogJ3N3aXBlci1zbGlkZS1hY3RpdmUnLFxuICBzbGlkZUR1cGxpY2F0ZUFjdGl2ZUNsYXNzOiAnc3dpcGVyLXNsaWRlLWR1cGxpY2F0ZS1hY3RpdmUnLFxuICBzbGlkZVZpc2libGVDbGFzczogJ3N3aXBlci1zbGlkZS12aXNpYmxlJyxcbiAgc2xpZGVEdXBsaWNhdGVDbGFzczogJ3N3aXBlci1zbGlkZS1kdXBsaWNhdGUnLFxuICBzbGlkZU5leHRDbGFzczogJ3N3aXBlci1zbGlkZS1uZXh0JyxcbiAgc2xpZGVEdXBsaWNhdGVOZXh0Q2xhc3M6ICdzd2lwZXItc2xpZGUtZHVwbGljYXRlLW5leHQnLFxuICBzbGlkZVByZXZDbGFzczogJ3N3aXBlci1zbGlkZS1wcmV2JyxcbiAgc2xpZGVEdXBsaWNhdGVQcmV2Q2xhc3M6ICdzd2lwZXItc2xpZGUtZHVwbGljYXRlLXByZXYnLFxuICB3cmFwcGVyQ2xhc3M6ICdzd2lwZXItd3JhcHBlcicsXG4gIC8vIENhbGxiYWNrc1xuICBydW5DYWxsYmFja3NPbkluaXQ6IHRydWUsXG4gIC8vIEludGVybmFsc1xuICBfZW1pdENsYXNzZXM6IGZhbHNlXG59OyIsImZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuLyogZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOiBcIm9mZlwiICovXG5pbXBvcnQgJCBmcm9tICcuLi8uLi91dGlscy9kb20nO1xuaW1wb3J0IHsgZXh0ZW5kLCBub3csIGRlbGV0ZVByb3BzIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xuaW1wb3J0IHsgZ2V0U3VwcG9ydCB9IGZyb20gJy4uLy4uL3V0aWxzL2dldC1zdXBwb3J0JztcbmltcG9ydCB7IGdldERldmljZSB9IGZyb20gJy4uLy4uL3V0aWxzL2dldC1kZXZpY2UnO1xuaW1wb3J0IHsgZ2V0QnJvd3NlciB9IGZyb20gJy4uLy4uL3V0aWxzL2dldC1icm93c2VyJztcbmltcG9ydCBSZXNpemUgZnJvbSAnLi4vLi4vbW9kdWxlcy9yZXNpemUvcmVzaXplJztcbmltcG9ydCBPYnNlcnZlciBmcm9tICcuLi8uLi9tb2R1bGVzL29ic2VydmVyL29ic2VydmVyJztcbmltcG9ydCBtb2R1bGFyIGZyb20gJy4vbW9kdWxhcic7XG5pbXBvcnQgZXZlbnRzRW1pdHRlciBmcm9tICcuL2V2ZW50cy1lbWl0dGVyJztcbmltcG9ydCB1cGRhdGUgZnJvbSAnLi91cGRhdGUvaW5kZXgnO1xuaW1wb3J0IHRyYW5zbGF0ZSBmcm9tICcuL3RyYW5zbGF0ZS9pbmRleCc7XG5pbXBvcnQgdHJhbnNpdGlvbiBmcm9tICcuL3RyYW5zaXRpb24vaW5kZXgnO1xuaW1wb3J0IHNsaWRlIGZyb20gJy4vc2xpZGUvaW5kZXgnO1xuaW1wb3J0IGxvb3AgZnJvbSAnLi9sb29wL2luZGV4JztcbmltcG9ydCBncmFiQ3Vyc29yIGZyb20gJy4vZ3JhYi1jdXJzb3IvaW5kZXgnO1xuaW1wb3J0IG1hbmlwdWxhdGlvbiBmcm9tICcuL21hbmlwdWxhdGlvbi9pbmRleCc7XG5pbXBvcnQgZXZlbnRzIGZyb20gJy4vZXZlbnRzL2luZGV4JztcbmltcG9ydCBicmVha3BvaW50cyBmcm9tICcuL2JyZWFrcG9pbnRzL2luZGV4JztcbmltcG9ydCBjbGFzc2VzIGZyb20gJy4vY2xhc3Nlcy9pbmRleCc7XG5pbXBvcnQgaW1hZ2VzIGZyb20gJy4vaW1hZ2VzL2luZGV4JztcbmltcG9ydCBjaGVja092ZXJmbG93IGZyb20gJy4vY2hlY2stb3ZlcmZsb3cvaW5kZXgnO1xuaW1wb3J0IGRlZmF1bHRzIGZyb20gJy4vZGVmYXVsdHMnO1xudmFyIHByb3RvdHlwZXMgPSB7XG4gIG1vZHVsYXI6IG1vZHVsYXIsXG4gIGV2ZW50c0VtaXR0ZXI6IGV2ZW50c0VtaXR0ZXIsXG4gIHVwZGF0ZTogdXBkYXRlLFxuICB0cmFuc2xhdGU6IHRyYW5zbGF0ZSxcbiAgdHJhbnNpdGlvbjogdHJhbnNpdGlvbixcbiAgc2xpZGU6IHNsaWRlLFxuICBsb29wOiBsb29wLFxuICBncmFiQ3Vyc29yOiBncmFiQ3Vyc29yLFxuICBtYW5pcHVsYXRpb246IG1hbmlwdWxhdGlvbixcbiAgZXZlbnRzOiBldmVudHMsXG4gIGJyZWFrcG9pbnRzOiBicmVha3BvaW50cyxcbiAgY2hlY2tPdmVyZmxvdzogY2hlY2tPdmVyZmxvdyxcbiAgY2xhc3NlczogY2xhc3NlcyxcbiAgaW1hZ2VzOiBpbWFnZXNcbn07XG52YXIgZXh0ZW5kZWREZWZhdWx0cyA9IHt9O1xuXG52YXIgU3dpcGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU3dpcGVyKCkge1xuICAgIHZhciBlbDtcbiAgICB2YXIgcGFyYW1zO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMSAmJiBhcmdzWzBdLmNvbnN0cnVjdG9yICYmIGFyZ3NbMF0uY29uc3RydWN0b3IgPT09IE9iamVjdCkge1xuICAgICAgcGFyYW1zID0gYXJnc1swXTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwgPSBhcmdzWzBdO1xuICAgICAgcGFyYW1zID0gYXJnc1sxXTtcbiAgICB9XG5cbiAgICBpZiAoIXBhcmFtcykgcGFyYW1zID0ge307XG4gICAgcGFyYW1zID0gZXh0ZW5kKHt9LCBwYXJhbXMpO1xuICAgIGlmIChlbCAmJiAhcGFyYW1zLmVsKSBwYXJhbXMuZWwgPSBlbDsgLy8gU3dpcGVyIEluc3RhbmNlXG5cbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBzd2lwZXIuc3VwcG9ydCA9IGdldFN1cHBvcnQoKTtcbiAgICBzd2lwZXIuZGV2aWNlID0gZ2V0RGV2aWNlKHtcbiAgICAgIHVzZXJBZ2VudDogcGFyYW1zLnVzZXJBZ2VudFxuICAgIH0pO1xuICAgIHN3aXBlci5icm93c2VyID0gZ2V0QnJvd3NlcigpO1xuICAgIHN3aXBlci5ldmVudHNMaXN0ZW5lcnMgPSB7fTtcbiAgICBzd2lwZXIuZXZlbnRzQW55TGlzdGVuZXJzID0gW107XG4gICAgT2JqZWN0LmtleXMocHJvdG90eXBlcykuZm9yRWFjaChmdW5jdGlvbiAocHJvdG90eXBlR3JvdXApIHtcbiAgICAgIE9iamVjdC5rZXlzKHByb3RvdHlwZXNbcHJvdG90eXBlR3JvdXBdKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm90b01ldGhvZCkge1xuICAgICAgICBpZiAoIVN3aXBlci5wcm90b3R5cGVbcHJvdG9NZXRob2RdKSB7XG4gICAgICAgICAgU3dpcGVyLnByb3RvdHlwZVtwcm90b01ldGhvZF0gPSBwcm90b3R5cGVzW3Byb3RvdHlwZUdyb3VwXVtwcm90b01ldGhvZF07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaWYgKHR5cGVvZiBzd2lwZXIubW9kdWxlcyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHN3aXBlci5tb2R1bGVzID0ge307XG4gICAgfVxuXG4gICAgT2JqZWN0LmtleXMoc3dpcGVyLm1vZHVsZXMpLmZvckVhY2goZnVuY3Rpb24gKG1vZHVsZU5hbWUpIHtcbiAgICAgIHZhciBtb2R1bGUgPSBzd2lwZXIubW9kdWxlc1ttb2R1bGVOYW1lXTtcblxuICAgICAgaWYgKG1vZHVsZS5wYXJhbXMpIHtcbiAgICAgICAgdmFyIG1vZHVsZVBhcmFtTmFtZSA9IE9iamVjdC5rZXlzKG1vZHVsZS5wYXJhbXMpWzBdO1xuICAgICAgICB2YXIgbW9kdWxlUGFyYW1zID0gbW9kdWxlLnBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdO1xuICAgICAgICBpZiAodHlwZW9mIG1vZHVsZVBhcmFtcyAhPT0gJ29iamVjdCcgfHwgbW9kdWxlUGFyYW1zID09PSBudWxsKSByZXR1cm47XG4gICAgICAgIGlmICghKG1vZHVsZVBhcmFtTmFtZSBpbiBwYXJhbXMgJiYgJ2VuYWJsZWQnIGluIG1vZHVsZVBhcmFtcykpIHJldHVybjtcblxuICAgICAgICBpZiAocGFyYW1zW21vZHVsZVBhcmFtTmFtZV0gPT09IHRydWUpIHtcbiAgICAgICAgICBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSA9IHtcbiAgICAgICAgICAgIGVuYWJsZWQ6IHRydWVcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSA9PT0gJ29iamVjdCcgJiYgISgnZW5hYmxlZCcgaW4gcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0pKSB7XG4gICAgICAgICAgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0uZW5hYmxlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdKSBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSA9IHtcbiAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0pOyAvLyBFeHRlbmQgZGVmYXVsdHMgd2l0aCBtb2R1bGVzIHBhcmFtc1xuXG4gICAgdmFyIHN3aXBlclBhcmFtcyA9IGV4dGVuZCh7fSwgZGVmYXVsdHMpO1xuICAgIHN3aXBlci51c2VQYXJhbXMoc3dpcGVyUGFyYW1zKTsgLy8gRXh0ZW5kIGRlZmF1bHRzIHdpdGggcGFzc2VkIHBhcmFtc1xuXG4gICAgc3dpcGVyLnBhcmFtcyA9IGV4dGVuZCh7fSwgc3dpcGVyUGFyYW1zLCBleHRlbmRlZERlZmF1bHRzLCBwYXJhbXMpO1xuICAgIHN3aXBlci5vcmlnaW5hbFBhcmFtcyA9IGV4dGVuZCh7fSwgc3dpcGVyLnBhcmFtcyk7XG4gICAgc3dpcGVyLnBhc3NlZFBhcmFtcyA9IGV4dGVuZCh7fSwgcGFyYW1zKTsgLy8gYWRkIGV2ZW50IGxpc3RlbmVyc1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMgJiYgc3dpcGVyLnBhcmFtcy5vbikge1xuICAgICAgT2JqZWN0LmtleXMoc3dpcGVyLnBhcmFtcy5vbikuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnROYW1lKSB7XG4gICAgICAgIHN3aXBlci5vbihldmVudE5hbWUsIHN3aXBlci5wYXJhbXMub25bZXZlbnROYW1lXSk7XG4gICAgICB9KTtcbiAgICB9IC8vIFNhdmUgRG9tIGxpYlxuXG5cbiAgICBzd2lwZXIuJCA9ICQ7IC8vIEZpbmQgZWxcblxuICAgIHZhciAkZWwgPSAkKHN3aXBlci5wYXJhbXMuZWwpO1xuICAgIGVsID0gJGVsWzBdO1xuXG4gICAgaWYgKCFlbCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBpZiAoJGVsLmxlbmd0aCA+IDEpIHtcbiAgICAgIHZhciBzd2lwZXJzID0gW107XG4gICAgICAkZWwuZWFjaChmdW5jdGlvbiAoY29udGFpbmVyRWwpIHtcbiAgICAgICAgdmFyIG5ld1BhcmFtcyA9IGV4dGVuZCh7fSwgcGFyYW1zLCB7XG4gICAgICAgICAgZWw6IGNvbnRhaW5lckVsXG4gICAgICAgIH0pO1xuICAgICAgICBzd2lwZXJzLnB1c2gobmV3IFN3aXBlcihuZXdQYXJhbXMpKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHN3aXBlcnM7XG4gICAgfVxuXG4gICAgZWwuc3dpcGVyID0gc3dpcGVyOyAvLyBGaW5kIFdyYXBwZXJcblxuICAgIHZhciAkd3JhcHBlckVsO1xuXG4gICAgaWYgKGVsICYmIGVsLnNoYWRvd1Jvb3QgJiYgZWwuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKSB7XG4gICAgICAkd3JhcHBlckVsID0gJChlbC5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoXCIuXCIgKyBzd2lwZXIucGFyYW1zLndyYXBwZXJDbGFzcykpOyAvLyBDaGlsZHJlbiBuZWVkcyB0byByZXR1cm4gc2xvdCBpdGVtc1xuXG4gICAgICAkd3JhcHBlckVsLmNoaWxkcmVuID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuICRlbC5jaGlsZHJlbihvcHRpb25zKTtcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgICR3cmFwcGVyRWwgPSAkZWwuY2hpbGRyZW4oXCIuXCIgKyBzd2lwZXIucGFyYW1zLndyYXBwZXJDbGFzcyk7XG4gICAgfSAvLyBFeHRlbmQgU3dpcGVyXG5cblxuICAgIGV4dGVuZChzd2lwZXIsIHtcbiAgICAgICRlbDogJGVsLFxuICAgICAgZWw6IGVsLFxuICAgICAgJHdyYXBwZXJFbDogJHdyYXBwZXJFbCxcbiAgICAgIHdyYXBwZXJFbDogJHdyYXBwZXJFbFswXSxcbiAgICAgIC8vIENsYXNzZXNcbiAgICAgIGNsYXNzTmFtZXM6IFtdLFxuICAgICAgLy8gU2xpZGVzXG4gICAgICBzbGlkZXM6ICQoKSxcbiAgICAgIHNsaWRlc0dyaWQ6IFtdLFxuICAgICAgc25hcEdyaWQ6IFtdLFxuICAgICAgc2xpZGVzU2l6ZXNHcmlkOiBbXSxcbiAgICAgIC8vIGlzRGlyZWN0aW9uXG4gICAgICBpc0hvcml6b250YWw6IGZ1bmN0aW9uIGlzSG9yaXpvbnRhbCgpIHtcbiAgICAgICAgcmV0dXJuIHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCc7XG4gICAgICB9LFxuICAgICAgaXNWZXJ0aWNhbDogZnVuY3Rpb24gaXNWZXJ0aWNhbCgpIHtcbiAgICAgICAgcmV0dXJuIHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uID09PSAndmVydGljYWwnO1xuICAgICAgfSxcbiAgICAgIC8vIFJUTFxuICAgICAgcnRsOiBlbC5kaXIudG9Mb3dlckNhc2UoKSA9PT0gJ3J0bCcgfHwgJGVsLmNzcygnZGlyZWN0aW9uJykgPT09ICdydGwnLFxuICAgICAgcnRsVHJhbnNsYXRlOiBzd2lwZXIucGFyYW1zLmRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnICYmIChlbC5kaXIudG9Mb3dlckNhc2UoKSA9PT0gJ3J0bCcgfHwgJGVsLmNzcygnZGlyZWN0aW9uJykgPT09ICdydGwnKSxcbiAgICAgIHdyb25nUlRMOiAkd3JhcHBlckVsLmNzcygnZGlzcGxheScpID09PSAnLXdlYmtpdC1ib3gnLFxuICAgICAgLy8gSW5kZXhlc1xuICAgICAgYWN0aXZlSW5kZXg6IDAsXG4gICAgICByZWFsSW5kZXg6IDAsXG4gICAgICAvL1xuICAgICAgaXNCZWdpbm5pbmc6IHRydWUsXG4gICAgICBpc0VuZDogZmFsc2UsXG4gICAgICAvLyBQcm9wc1xuICAgICAgdHJhbnNsYXRlOiAwLFxuICAgICAgcHJldmlvdXNUcmFuc2xhdGU6IDAsXG4gICAgICBwcm9ncmVzczogMCxcbiAgICAgIHZlbG9jaXR5OiAwLFxuICAgICAgYW5pbWF0aW5nOiBmYWxzZSxcbiAgICAgIC8vIExvY2tzXG4gICAgICBhbGxvd1NsaWRlTmV4dDogc3dpcGVyLnBhcmFtcy5hbGxvd1NsaWRlTmV4dCxcbiAgICAgIGFsbG93U2xpZGVQcmV2OiBzd2lwZXIucGFyYW1zLmFsbG93U2xpZGVQcmV2LFxuICAgICAgLy8gVG91Y2ggRXZlbnRzXG4gICAgICB0b3VjaEV2ZW50czogZnVuY3Rpb24gdG91Y2hFdmVudHMoKSB7XG4gICAgICAgIHZhciB0b3VjaCA9IFsndG91Y2hzdGFydCcsICd0b3VjaG1vdmUnLCAndG91Y2hlbmQnLCAndG91Y2hjYW5jZWwnXTtcbiAgICAgICAgdmFyIGRlc2t0b3AgPSBbJ21vdXNlZG93bicsICdtb3VzZW1vdmUnLCAnbW91c2V1cCddO1xuXG4gICAgICAgIGlmIChzd2lwZXIuc3VwcG9ydC5wb2ludGVyRXZlbnRzKSB7XG4gICAgICAgICAgZGVza3RvcCA9IFsncG9pbnRlcmRvd24nLCAncG9pbnRlcm1vdmUnLCAncG9pbnRlcnVwJ107XG4gICAgICAgIH1cblxuICAgICAgICBzd2lwZXIudG91Y2hFdmVudHNUb3VjaCA9IHtcbiAgICAgICAgICBzdGFydDogdG91Y2hbMF0sXG4gICAgICAgICAgbW92ZTogdG91Y2hbMV0sXG4gICAgICAgICAgZW5kOiB0b3VjaFsyXSxcbiAgICAgICAgICBjYW5jZWw6IHRvdWNoWzNdXG4gICAgICAgIH07XG4gICAgICAgIHN3aXBlci50b3VjaEV2ZW50c0Rlc2t0b3AgPSB7XG4gICAgICAgICAgc3RhcnQ6IGRlc2t0b3BbMF0sXG4gICAgICAgICAgbW92ZTogZGVza3RvcFsxXSxcbiAgICAgICAgICBlbmQ6IGRlc2t0b3BbMl1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHN3aXBlci5zdXBwb3J0LnRvdWNoIHx8ICFzd2lwZXIucGFyYW1zLnNpbXVsYXRlVG91Y2ggPyBzd2lwZXIudG91Y2hFdmVudHNUb3VjaCA6IHN3aXBlci50b3VjaEV2ZW50c0Rlc2t0b3A7XG4gICAgICB9KCksXG4gICAgICB0b3VjaEV2ZW50c0RhdGE6IHtcbiAgICAgICAgaXNUb3VjaGVkOiB1bmRlZmluZWQsXG4gICAgICAgIGlzTW92ZWQ6IHVuZGVmaW5lZCxcbiAgICAgICAgYWxsb3dUb3VjaENhbGxiYWNrczogdW5kZWZpbmVkLFxuICAgICAgICB0b3VjaFN0YXJ0VGltZTogdW5kZWZpbmVkLFxuICAgICAgICBpc1Njcm9sbGluZzogdW5kZWZpbmVkLFxuICAgICAgICBjdXJyZW50VHJhbnNsYXRlOiB1bmRlZmluZWQsXG4gICAgICAgIHN0YXJ0VHJhbnNsYXRlOiB1bmRlZmluZWQsXG4gICAgICAgIGFsbG93VGhyZXNob2xkTW92ZTogdW5kZWZpbmVkLFxuICAgICAgICAvLyBGb3JtIGVsZW1lbnRzIHRvIG1hdGNoXG4gICAgICAgIGZvcm1FbGVtZW50czogJ2lucHV0LCBzZWxlY3QsIG9wdGlvbiwgdGV4dGFyZWEsIGJ1dHRvbiwgdmlkZW8sIGxhYmVsJyxcbiAgICAgICAgLy8gTGFzdCBjbGljayB0aW1lXG4gICAgICAgIGxhc3RDbGlja1RpbWU6IG5vdygpLFxuICAgICAgICBjbGlja1RpbWVvdXQ6IHVuZGVmaW5lZCxcbiAgICAgICAgLy8gVmVsb2NpdGllc1xuICAgICAgICB2ZWxvY2l0aWVzOiBbXSxcbiAgICAgICAgYWxsb3dNb21lbnR1bUJvdW5jZTogdW5kZWZpbmVkLFxuICAgICAgICBpc1RvdWNoRXZlbnQ6IHVuZGVmaW5lZCxcbiAgICAgICAgc3RhcnRNb3Zpbmc6IHVuZGVmaW5lZFxuICAgICAgfSxcbiAgICAgIC8vIENsaWNrc1xuICAgICAgYWxsb3dDbGljazogdHJ1ZSxcbiAgICAgIC8vIFRvdWNoZXNcbiAgICAgIGFsbG93VG91Y2hNb3ZlOiBzd2lwZXIucGFyYW1zLmFsbG93VG91Y2hNb3ZlLFxuICAgICAgdG91Y2hlczoge1xuICAgICAgICBzdGFydFg6IDAsXG4gICAgICAgIHN0YXJ0WTogMCxcbiAgICAgICAgY3VycmVudFg6IDAsXG4gICAgICAgIGN1cnJlbnRZOiAwLFxuICAgICAgICBkaWZmOiAwXG4gICAgICB9LFxuICAgICAgLy8gSW1hZ2VzXG4gICAgICBpbWFnZXNUb0xvYWQ6IFtdLFxuICAgICAgaW1hZ2VzTG9hZGVkOiAwXG4gICAgfSk7IC8vIEluc3RhbGwgTW9kdWxlc1xuXG4gICAgc3dpcGVyLnVzZU1vZHVsZXMoKTtcbiAgICBzd2lwZXIuZW1pdCgnX3N3aXBlcicpOyAvLyBJbml0XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5pbml0KSB7XG4gICAgICBzd2lwZXIuaW5pdCgpO1xuICAgIH0gLy8gUmV0dXJuIGFwcCBpbnN0YW5jZVxuXG5cbiAgICByZXR1cm4gc3dpcGVyO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN3aXBlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmVtaXRDb250YWluZXJDbGFzc2VzID0gZnVuY3Rpb24gZW1pdENvbnRhaW5lckNsYXNzZXMoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLl9lbWl0Q2xhc3NlcyB8fCAhc3dpcGVyLmVsKSByZXR1cm47XG4gICAgdmFyIGNsYXNzZXMgPSBzd2lwZXIuZWwuY2xhc3NOYW1lLnNwbGl0KCcgJykuZmlsdGVyKGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgICAgIHJldHVybiBjbGFzc05hbWUuaW5kZXhPZignc3dpcGVyLWNvbnRhaW5lcicpID09PSAwIHx8IGNsYXNzTmFtZS5pbmRleE9mKHN3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcykgPT09IDA7XG4gICAgfSk7XG4gICAgc3dpcGVyLmVtaXQoJ19jb250YWluZXJDbGFzc2VzJywgY2xhc3Nlcy5qb2luKCcgJykpO1xuICB9O1xuXG4gIF9wcm90by5lbWl0U2xpZGVzQ2xhc3NlcyA9IGZ1bmN0aW9uIGVtaXRTbGlkZXNDbGFzc2VzKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5fZW1pdENsYXNzZXMgfHwgIXN3aXBlci5lbCkgcmV0dXJuO1xuICAgIHN3aXBlci5zbGlkZXMuZWFjaChmdW5jdGlvbiAoc2xpZGVFbCkge1xuICAgICAgdmFyIGNsYXNzZXMgPSBzbGlkZUVsLmNsYXNzTmFtZS5zcGxpdCgnICcpLmZpbHRlcihmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICAgICAgIHJldHVybiBjbGFzc05hbWUuaW5kZXhPZignc3dpcGVyLXNsaWRlJykgPT09IDAgfHwgY2xhc3NOYW1lLmluZGV4T2Yoc3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzKSA9PT0gMDtcbiAgICAgIH0pO1xuICAgICAgc3dpcGVyLmVtaXQoJ19zbGlkZUNsYXNzJywgc2xpZGVFbCwgY2xhc3Nlcy5qb2luKCcgJykpO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5zbGlkZXNQZXJWaWV3RHluYW1pYyA9IGZ1bmN0aW9uIHNsaWRlc1BlclZpZXdEeW5hbWljKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgICBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzLFxuICAgICAgICBzbGlkZXNHcmlkID0gc3dpcGVyLnNsaWRlc0dyaWQsXG4gICAgICAgIHN3aXBlclNpemUgPSBzd2lwZXIuc2l6ZSxcbiAgICAgICAgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gICAgdmFyIHNwdiA9IDE7XG5cbiAgICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICB2YXIgc2xpZGVTaXplID0gc2xpZGVzW2FjdGl2ZUluZGV4XS5zd2lwZXJTbGlkZVNpemU7XG4gICAgICB2YXIgYnJlYWtMb29wO1xuXG4gICAgICBmb3IgKHZhciBpID0gYWN0aXZlSW5kZXggKyAxOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmIChzbGlkZXNbaV0gJiYgIWJyZWFrTG9vcCkge1xuICAgICAgICAgIHNsaWRlU2l6ZSArPSBzbGlkZXNbaV0uc3dpcGVyU2xpZGVTaXplO1xuICAgICAgICAgIHNwdiArPSAxO1xuICAgICAgICAgIGlmIChzbGlkZVNpemUgPiBzd2lwZXJTaXplKSBicmVha0xvb3AgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIF9pID0gYWN0aXZlSW5kZXggLSAxOyBfaSA+PSAwOyBfaSAtPSAxKSB7XG4gICAgICAgIGlmIChzbGlkZXNbX2ldICYmICFicmVha0xvb3ApIHtcbiAgICAgICAgICBzbGlkZVNpemUgKz0gc2xpZGVzW19pXS5zd2lwZXJTbGlkZVNpemU7XG4gICAgICAgICAgc3B2ICs9IDE7XG4gICAgICAgICAgaWYgKHNsaWRlU2l6ZSA+IHN3aXBlclNpemUpIGJyZWFrTG9vcCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yICh2YXIgX2kyID0gYWN0aXZlSW5kZXggKyAxOyBfaTIgPCBzbGlkZXMubGVuZ3RoOyBfaTIgKz0gMSkge1xuICAgICAgICBpZiAoc2xpZGVzR3JpZFtfaTJdIC0gc2xpZGVzR3JpZFthY3RpdmVJbmRleF0gPCBzd2lwZXJTaXplKSB7XG4gICAgICAgICAgc3B2ICs9IDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc3B2O1xuICB9O1xuXG4gIF9wcm90by51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgIHZhciBzbmFwR3JpZCA9IHN3aXBlci5zbmFwR3JpZCxcbiAgICAgICAgcGFyYW1zID0gc3dpcGVyLnBhcmFtczsgLy8gQnJlYWtwb2ludHNcblxuICAgIGlmIChwYXJhbXMuYnJlYWtwb2ludHMpIHtcbiAgICAgIHN3aXBlci5zZXRCcmVha3BvaW50KCk7XG4gICAgfVxuXG4gICAgc3dpcGVyLnVwZGF0ZVNpemUoKTtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKCk7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcblxuICAgIGZ1bmN0aW9uIHNldFRyYW5zbGF0ZSgpIHtcbiAgICAgIHZhciB0cmFuc2xhdGVWYWx1ZSA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyBzd2lwZXIudHJhbnNsYXRlICogLTEgOiBzd2lwZXIudHJhbnNsYXRlO1xuICAgICAgdmFyIG5ld1RyYW5zbGF0ZSA9IE1hdGgubWluKE1hdGgubWF4KHRyYW5zbGF0ZVZhbHVlLCBzd2lwZXIubWF4VHJhbnNsYXRlKCkpLCBzd2lwZXIubWluVHJhbnNsYXRlKCkpO1xuICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZShuZXdUcmFuc2xhdGUpO1xuICAgICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgIH1cblxuICAgIHZhciB0cmFuc2xhdGVkO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuZnJlZU1vZGUpIHtcbiAgICAgIHNldFRyYW5zbGF0ZSgpO1xuXG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5hdXRvSGVpZ2h0KSB7XG4gICAgICAgIHN3aXBlci51cGRhdGVBdXRvSGVpZ2h0KCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICgoc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgfHwgc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID4gMSkgJiYgc3dpcGVyLmlzRW5kICYmICFzd2lwZXIucGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICAgIHRyYW5zbGF0ZWQgPSBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIDEsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRyYW5zbGF0ZWQgPSBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXgsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0cmFuc2xhdGVkKSB7XG4gICAgICAgIHNldFRyYW5zbGF0ZSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzbmFwR3JpZCAhPT0gc3dpcGVyLnNuYXBHcmlkKSB7XG4gICAgICBzd2lwZXIuY2hlY2tPdmVyZmxvdygpO1xuICAgIH1cblxuICAgIHN3aXBlci5lbWl0KCd1cGRhdGUnKTtcbiAgfTtcblxuICBfcHJvdG8uY2hhbmdlRGlyZWN0aW9uID0gZnVuY3Rpb24gY2hhbmdlRGlyZWN0aW9uKG5ld0RpcmVjdGlvbiwgbmVlZFVwZGF0ZSkge1xuICAgIGlmIChuZWVkVXBkYXRlID09PSB2b2lkIDApIHtcbiAgICAgIG5lZWRVcGRhdGUgPSB0cnVlO1xuICAgIH1cblxuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBjdXJyZW50RGlyZWN0aW9uID0gc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb247XG5cbiAgICBpZiAoIW5ld0RpcmVjdGlvbikge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBuZXdEaXJlY3Rpb24gPSBjdXJyZW50RGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcgPyAndmVydGljYWwnIDogJ2hvcml6b250YWwnO1xuICAgIH1cblxuICAgIGlmIChuZXdEaXJlY3Rpb24gPT09IGN1cnJlbnREaXJlY3Rpb24gfHwgbmV3RGlyZWN0aW9uICE9PSAnaG9yaXpvbnRhbCcgJiYgbmV3RGlyZWN0aW9uICE9PSAndmVydGljYWwnKSB7XG4gICAgICByZXR1cm4gc3dpcGVyO1xuICAgIH1cblxuICAgIHN3aXBlci4kZWwucmVtb3ZlQ2xhc3MoXCJcIiArIHN3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcyArIGN1cnJlbnREaXJlY3Rpb24pLmFkZENsYXNzKFwiXCIgKyBzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MgKyBuZXdEaXJlY3Rpb24pO1xuICAgIHN3aXBlci5lbWl0Q29udGFpbmVyQ2xhc3NlcygpO1xuICAgIHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uID0gbmV3RGlyZWN0aW9uO1xuICAgIHN3aXBlci5zbGlkZXMuZWFjaChmdW5jdGlvbiAoc2xpZGVFbCkge1xuICAgICAgaWYgKG5ld0RpcmVjdGlvbiA9PT0gJ3ZlcnRpY2FsJykge1xuICAgICAgICBzbGlkZUVsLnN0eWxlLndpZHRoID0gJyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzbGlkZUVsLnN0eWxlLmhlaWdodCA9ICcnO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHN3aXBlci5lbWl0KCdjaGFuZ2VEaXJlY3Rpb24nKTtcbiAgICBpZiAobmVlZFVwZGF0ZSkgc3dpcGVyLnVwZGF0ZSgpO1xuICAgIHJldHVybiBzd2lwZXI7XG4gIH07XG5cbiAgX3Byb3RvLmluaXQgPSBmdW5jdGlvbiBpbml0KCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIGlmIChzd2lwZXIuaW5pdGlhbGl6ZWQpIHJldHVybjtcbiAgICBzd2lwZXIuZW1pdCgnYmVmb3JlSW5pdCcpOyAvLyBTZXQgYnJlYWtwb2ludFxuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuYnJlYWtwb2ludHMpIHtcbiAgICAgIHN3aXBlci5zZXRCcmVha3BvaW50KCk7XG4gICAgfSAvLyBBZGQgQ2xhc3Nlc1xuXG5cbiAgICBzd2lwZXIuYWRkQ2xhc3NlcygpOyAvLyBDcmVhdGUgbG9vcFxuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgc3dpcGVyLmxvb3BDcmVhdGUoKTtcbiAgICB9IC8vIFVwZGF0ZSBzaXplXG5cblxuICAgIHN3aXBlci51cGRhdGVTaXplKCk7IC8vIFVwZGF0ZSBzbGlkZXNcblxuICAgIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cpIHtcbiAgICAgIHN3aXBlci5jaGVja092ZXJmbG93KCk7XG4gICAgfSAvLyBTZXQgR3JhYiBDdXJzb3JcblxuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuZ3JhYkN1cnNvcikge1xuICAgICAgc3dpcGVyLnNldEdyYWJDdXJzb3IoKTtcbiAgICB9XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5wcmVsb2FkSW1hZ2VzKSB7XG4gICAgICBzd2lwZXIucHJlbG9hZEltYWdlcygpO1xuICAgIH0gLy8gU2xpZGUgVG8gSW5pdGlhbCBTbGlkZVxuXG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIucGFyYW1zLmluaXRpYWxTbGlkZSArIHN3aXBlci5sb29wZWRTbGlkZXMsIDAsIHN3aXBlci5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnBhcmFtcy5pbml0aWFsU2xpZGUsIDAsIHN3aXBlci5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0KTtcbiAgICB9IC8vIEF0dGFjaCBldmVudHNcblxuXG4gICAgc3dpcGVyLmF0dGFjaEV2ZW50cygpOyAvLyBJbml0IEZsYWdcblxuICAgIHN3aXBlci5pbml0aWFsaXplZCA9IHRydWU7IC8vIEVtaXRcblxuICAgIHN3aXBlci5lbWl0KCdpbml0Jyk7XG4gIH07XG5cbiAgX3Byb3RvLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95KGRlbGV0ZUluc3RhbmNlLCBjbGVhblN0eWxlcykge1xuICAgIGlmIChkZWxldGVJbnN0YW5jZSA9PT0gdm9pZCAwKSB7XG4gICAgICBkZWxldGVJbnN0YW5jZSA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKGNsZWFuU3R5bGVzID09PSB2b2lkIDApIHtcbiAgICAgIGNsZWFuU3R5bGVzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgICAgJGVsID0gc3dpcGVyLiRlbCxcbiAgICAgICAgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsLFxuICAgICAgICBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzO1xuXG4gICAgaWYgKHR5cGVvZiBzd2lwZXIucGFyYW1zID09PSAndW5kZWZpbmVkJyB8fCBzd2lwZXIuZGVzdHJveWVkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBzd2lwZXIuZW1pdCgnYmVmb3JlRGVzdHJveScpOyAvLyBJbml0IEZsYWdcblxuICAgIHN3aXBlci5pbml0aWFsaXplZCA9IGZhbHNlOyAvLyBEZXRhY2ggZXZlbnRzXG5cbiAgICBzd2lwZXIuZGV0YWNoRXZlbnRzKCk7IC8vIERlc3Ryb3kgbG9vcFxuXG4gICAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgICBzd2lwZXIubG9vcERlc3Ryb3koKTtcbiAgICB9IC8vIENsZWFudXAgc3R5bGVzXG5cblxuICAgIGlmIChjbGVhblN0eWxlcykge1xuICAgICAgc3dpcGVyLnJlbW92ZUNsYXNzZXMoKTtcbiAgICAgICRlbC5yZW1vdmVBdHRyKCdzdHlsZScpO1xuICAgICAgJHdyYXBwZXJFbC5yZW1vdmVBdHRyKCdzdHlsZScpO1xuXG4gICAgICBpZiAoc2xpZGVzICYmIHNsaWRlcy5sZW5ndGgpIHtcbiAgICAgICAgc2xpZGVzLnJlbW92ZUNsYXNzKFtwYXJhbXMuc2xpZGVWaXNpYmxlQ2xhc3MsIHBhcmFtcy5zbGlkZUFjdGl2ZUNsYXNzLCBwYXJhbXMuc2xpZGVOZXh0Q2xhc3MsIHBhcmFtcy5zbGlkZVByZXZDbGFzc10uam9pbignICcpKS5yZW1vdmVBdHRyKCdzdHlsZScpLnJlbW92ZUF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4Jyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgc3dpcGVyLmVtaXQoJ2Rlc3Ryb3knKTsgLy8gRGV0YWNoIGVtaXR0ZXIgZXZlbnRzXG5cbiAgICBPYmplY3Qua2V5cyhzd2lwZXIuZXZlbnRzTGlzdGVuZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudE5hbWUpIHtcbiAgICAgIHN3aXBlci5vZmYoZXZlbnROYW1lKTtcbiAgICB9KTtcblxuICAgIGlmIChkZWxldGVJbnN0YW5jZSAhPT0gZmFsc2UpIHtcbiAgICAgIHN3aXBlci4kZWxbMF0uc3dpcGVyID0gbnVsbDtcbiAgICAgIGRlbGV0ZVByb3BzKHN3aXBlcik7XG4gICAgfVxuXG4gICAgc3dpcGVyLmRlc3Ryb3llZCA9IHRydWU7XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgU3dpcGVyLmV4dGVuZERlZmF1bHRzID0gZnVuY3Rpb24gZXh0ZW5kRGVmYXVsdHMobmV3RGVmYXVsdHMpIHtcbiAgICBleHRlbmQoZXh0ZW5kZWREZWZhdWx0cywgbmV3RGVmYXVsdHMpO1xuICB9O1xuXG4gIFN3aXBlci5pbnN0YWxsTW9kdWxlID0gZnVuY3Rpb24gaW5zdGFsbE1vZHVsZShtb2R1bGUpIHtcbiAgICBpZiAoIVN3aXBlci5wcm90b3R5cGUubW9kdWxlcykgU3dpcGVyLnByb3RvdHlwZS5tb2R1bGVzID0ge307XG4gICAgdmFyIG5hbWUgPSBtb2R1bGUubmFtZSB8fCBPYmplY3Qua2V5cyhTd2lwZXIucHJvdG90eXBlLm1vZHVsZXMpLmxlbmd0aCArIFwiX1wiICsgbm93KCk7XG4gICAgU3dpcGVyLnByb3RvdHlwZS5tb2R1bGVzW25hbWVdID0gbW9kdWxlO1xuICB9O1xuXG4gIFN3aXBlci51c2UgPSBmdW5jdGlvbiB1c2UobW9kdWxlKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkobW9kdWxlKSkge1xuICAgICAgbW9kdWxlLmZvckVhY2goZnVuY3Rpb24gKG0pIHtcbiAgICAgICAgcmV0dXJuIFN3aXBlci5pbnN0YWxsTW9kdWxlKG0pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gU3dpcGVyO1xuICAgIH1cblxuICAgIFN3aXBlci5pbnN0YWxsTW9kdWxlKG1vZHVsZSk7XG4gICAgcmV0dXJuIFN3aXBlcjtcbiAgfTtcblxuICBfY3JlYXRlQ2xhc3MoU3dpcGVyLCBudWxsLCBbe1xuICAgIGtleTogXCJleHRlbmRlZERlZmF1bHRzXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gZXh0ZW5kZWREZWZhdWx0cztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZGVmYXVsdHNcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBkZWZhdWx0cztcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU3dpcGVyO1xufSgpO1xuXG5Td2lwZXIudXNlKFtSZXNpemUsIE9ic2VydmVyXSk7XG5leHBvcnQgZGVmYXVsdCBTd2lwZXI7IiwiaW1wb3J0IHsgZXh0ZW5kIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQge1xuICB1c2VQYXJhbXM6IGZ1bmN0aW9uIHVzZVBhcmFtcyhpbnN0YW5jZVBhcmFtcykge1xuICAgIHZhciBpbnN0YW5jZSA9IHRoaXM7XG4gICAgaWYgKCFpbnN0YW5jZS5tb2R1bGVzKSByZXR1cm47XG4gICAgT2JqZWN0LmtleXMoaW5zdGFuY2UubW9kdWxlcykuZm9yRWFjaChmdW5jdGlvbiAobW9kdWxlTmFtZSkge1xuICAgICAgdmFyIG1vZHVsZSA9IGluc3RhbmNlLm1vZHVsZXNbbW9kdWxlTmFtZV07IC8vIEV4dGVuZCBwYXJhbXNcblxuICAgICAgaWYgKG1vZHVsZS5wYXJhbXMpIHtcbiAgICAgICAgZXh0ZW5kKGluc3RhbmNlUGFyYW1zLCBtb2R1bGUucGFyYW1zKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbiAgdXNlTW9kdWxlczogZnVuY3Rpb24gdXNlTW9kdWxlcyhtb2R1bGVzUGFyYW1zKSB7XG4gICAgaWYgKG1vZHVsZXNQYXJhbXMgPT09IHZvaWQgMCkge1xuICAgICAgbW9kdWxlc1BhcmFtcyA9IHt9O1xuICAgIH1cblxuICAgIHZhciBpbnN0YW5jZSA9IHRoaXM7XG4gICAgaWYgKCFpbnN0YW5jZS5tb2R1bGVzKSByZXR1cm47XG4gICAgT2JqZWN0LmtleXMoaW5zdGFuY2UubW9kdWxlcykuZm9yRWFjaChmdW5jdGlvbiAobW9kdWxlTmFtZSkge1xuICAgICAgdmFyIG1vZHVsZSA9IGluc3RhbmNlLm1vZHVsZXNbbW9kdWxlTmFtZV07XG4gICAgICB2YXIgbW9kdWxlUGFyYW1zID0gbW9kdWxlc1BhcmFtc1ttb2R1bGVOYW1lXSB8fCB7fTsgLy8gQWRkIGV2ZW50IGxpc3RlbmVyc1xuXG4gICAgICBpZiAobW9kdWxlLm9uICYmIGluc3RhbmNlLm9uKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKG1vZHVsZS5vbikuZm9yRWFjaChmdW5jdGlvbiAobW9kdWxlRXZlbnROYW1lKSB7XG4gICAgICAgICAgaW5zdGFuY2Uub24obW9kdWxlRXZlbnROYW1lLCBtb2R1bGUub25bbW9kdWxlRXZlbnROYW1lXSk7XG4gICAgICAgIH0pO1xuICAgICAgfSAvLyBNb2R1bGUgY3JlYXRlIGNhbGxiYWNrXG5cblxuICAgICAgaWYgKG1vZHVsZS5jcmVhdGUpIHtcbiAgICAgICAgbW9kdWxlLmNyZWF0ZS5iaW5kKGluc3RhbmNlKShtb2R1bGVQYXJhbXMpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59OyIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVyc2NvcmUtZGFuZ2xlICovXG5leHBvcnQgZGVmYXVsdCB7XG4gIG9uOiBmdW5jdGlvbiBvbihldmVudHMsIGhhbmRsZXIsIHByaW9yaXR5KSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIGlmICh0eXBlb2YgaGFuZGxlciAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHNlbGY7XG4gICAgdmFyIG1ldGhvZCA9IHByaW9yaXR5ID8gJ3Vuc2hpZnQnIDogJ3B1c2gnO1xuICAgIGV2ZW50cy5zcGxpdCgnICcpLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XSkgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdID0gW107XG4gICAgICBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF1bbWV0aG9kXShoYW5kbGVyKTtcbiAgICB9KTtcbiAgICByZXR1cm4gc2VsZjtcbiAgfSxcbiAgb25jZTogZnVuY3Rpb24gb25jZShldmVudHMsIGhhbmRsZXIsIHByaW9yaXR5KSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIGlmICh0eXBlb2YgaGFuZGxlciAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHNlbGY7XG5cbiAgICBmdW5jdGlvbiBvbmNlSGFuZGxlcigpIHtcbiAgICAgIHNlbGYub2ZmKGV2ZW50cywgb25jZUhhbmRsZXIpO1xuXG4gICAgICBpZiAob25jZUhhbmRsZXIuX19lbWl0dGVyUHJveHkpIHtcbiAgICAgICAgZGVsZXRlIG9uY2VIYW5kbGVyLl9fZW1pdHRlclByb3h5O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgaGFuZGxlci5hcHBseShzZWxmLCBhcmdzKTtcbiAgICB9XG5cbiAgICBvbmNlSGFuZGxlci5fX2VtaXR0ZXJQcm94eSA9IGhhbmRsZXI7XG4gICAgcmV0dXJuIHNlbGYub24oZXZlbnRzLCBvbmNlSGFuZGxlciwgcHJpb3JpdHkpO1xuICB9LFxuICBvbkFueTogZnVuY3Rpb24gb25BbnkoaGFuZGxlciwgcHJpb3JpdHkpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgaWYgKHR5cGVvZiBoYW5kbGVyICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gc2VsZjtcbiAgICB2YXIgbWV0aG9kID0gcHJpb3JpdHkgPyAndW5zaGlmdCcgOiAncHVzaCc7XG5cbiAgICBpZiAoc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnMuaW5kZXhPZihoYW5kbGVyKSA8IDApIHtcbiAgICAgIHNlbGYuZXZlbnRzQW55TGlzdGVuZXJzW21ldGhvZF0oaGFuZGxlcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlbGY7XG4gIH0sXG4gIG9mZkFueTogZnVuY3Rpb24gb2ZmQW55KGhhbmRsZXIpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgaWYgKCFzZWxmLmV2ZW50c0FueUxpc3RlbmVycykgcmV0dXJuIHNlbGY7XG4gICAgdmFyIGluZGV4ID0gc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnMuaW5kZXhPZihoYW5kbGVyKTtcblxuICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICBzZWxmLmV2ZW50c0FueUxpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cblxuICAgIHJldHVybiBzZWxmO1xuICB9LFxuICBvZmY6IGZ1bmN0aW9uIG9mZihldmVudHMsIGhhbmRsZXIpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVycykgcmV0dXJuIHNlbGY7XG4gICAgZXZlbnRzLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdID0gW107XG4gICAgICB9IGVsc2UgaWYgKHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XSkge1xuICAgICAgICBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0uZm9yRWFjaChmdW5jdGlvbiAoZXZlbnRIYW5kbGVyLCBpbmRleCkge1xuICAgICAgICAgIGlmIChldmVudEhhbmRsZXIgPT09IGhhbmRsZXIgfHwgZXZlbnRIYW5kbGVyLl9fZW1pdHRlclByb3h5ICYmIGV2ZW50SGFuZGxlci5fX2VtaXR0ZXJQcm94eSA9PT0gaGFuZGxlcikge1xuICAgICAgICAgICAgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gc2VsZjtcbiAgfSxcbiAgZW1pdDogZnVuY3Rpb24gZW1pdCgpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVycykgcmV0dXJuIHNlbGY7XG4gICAgdmFyIGV2ZW50cztcbiAgICB2YXIgZGF0YTtcbiAgICB2YXIgY29udGV4dDtcblxuICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgYXJnc1swXSA9PT0gJ3N0cmluZycgfHwgQXJyYXkuaXNBcnJheShhcmdzWzBdKSkge1xuICAgICAgZXZlbnRzID0gYXJnc1swXTtcbiAgICAgIGRhdGEgPSBhcmdzLnNsaWNlKDEsIGFyZ3MubGVuZ3RoKTtcbiAgICAgIGNvbnRleHQgPSBzZWxmO1xuICAgIH0gZWxzZSB7XG4gICAgICBldmVudHMgPSBhcmdzWzBdLmV2ZW50cztcbiAgICAgIGRhdGEgPSBhcmdzWzBdLmRhdGE7XG4gICAgICBjb250ZXh0ID0gYXJnc1swXS5jb250ZXh0IHx8IHNlbGY7XG4gICAgfVxuXG4gICAgZGF0YS51bnNoaWZ0KGNvbnRleHQpO1xuICAgIHZhciBldmVudHNBcnJheSA9IEFycmF5LmlzQXJyYXkoZXZlbnRzKSA/IGV2ZW50cyA6IGV2ZW50cy5zcGxpdCgnICcpO1xuICAgIGV2ZW50c0FycmF5LmZvckVhY2goZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoc2VsZi5ldmVudHNMaXN0ZW5lcnMgJiYgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdKSB7XG4gICAgICAgIHZhciBoYW5kbGVycyA9IFtdO1xuICAgICAgICBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0uZm9yRWFjaChmdW5jdGlvbiAoZXZlbnRIYW5kbGVyKSB7XG4gICAgICAgICAgaGFuZGxlcnMucHVzaChldmVudEhhbmRsZXIpO1xuICAgICAgICB9KTtcbiAgICAgICAgaGFuZGxlcnMuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnRIYW5kbGVyKSB7XG4gICAgICAgICAgZXZlbnRIYW5kbGVyLmFwcGx5KGNvbnRleHQsIGRhdGEpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gc2VsZjtcbiAgfVxufTsiLCJpbXBvcnQgdXBkYXRlU2l6ZSBmcm9tICcuL3VwZGF0ZVNpemUnO1xuaW1wb3J0IHVwZGF0ZVNsaWRlcyBmcm9tICcuL3VwZGF0ZVNsaWRlcyc7XG5pbXBvcnQgdXBkYXRlQXV0b0hlaWdodCBmcm9tICcuL3VwZGF0ZUF1dG9IZWlnaHQnO1xuaW1wb3J0IHVwZGF0ZVNsaWRlc09mZnNldCBmcm9tICcuL3VwZGF0ZVNsaWRlc09mZnNldCc7XG5pbXBvcnQgdXBkYXRlU2xpZGVzUHJvZ3Jlc3MgZnJvbSAnLi91cGRhdGVTbGlkZXNQcm9ncmVzcyc7XG5pbXBvcnQgdXBkYXRlUHJvZ3Jlc3MgZnJvbSAnLi91cGRhdGVQcm9ncmVzcyc7XG5pbXBvcnQgdXBkYXRlU2xpZGVzQ2xhc3NlcyBmcm9tICcuL3VwZGF0ZVNsaWRlc0NsYXNzZXMnO1xuaW1wb3J0IHVwZGF0ZUFjdGl2ZUluZGV4IGZyb20gJy4vdXBkYXRlQWN0aXZlSW5kZXgnO1xuaW1wb3J0IHVwZGF0ZUNsaWNrZWRTbGlkZSBmcm9tICcuL3VwZGF0ZUNsaWNrZWRTbGlkZSc7XG5leHBvcnQgZGVmYXVsdCB7XG4gIHVwZGF0ZVNpemU6IHVwZGF0ZVNpemUsXG4gIHVwZGF0ZVNsaWRlczogdXBkYXRlU2xpZGVzLFxuICB1cGRhdGVBdXRvSGVpZ2h0OiB1cGRhdGVBdXRvSGVpZ2h0LFxuICB1cGRhdGVTbGlkZXNPZmZzZXQ6IHVwZGF0ZVNsaWRlc09mZnNldCxcbiAgdXBkYXRlU2xpZGVzUHJvZ3Jlc3M6IHVwZGF0ZVNsaWRlc1Byb2dyZXNzLFxuICB1cGRhdGVQcm9ncmVzczogdXBkYXRlUHJvZ3Jlc3MsXG4gIHVwZGF0ZVNsaWRlc0NsYXNzZXM6IHVwZGF0ZVNsaWRlc0NsYXNzZXMsXG4gIHVwZGF0ZUFjdGl2ZUluZGV4OiB1cGRhdGVBY3RpdmVJbmRleCxcbiAgdXBkYXRlQ2xpY2tlZFNsaWRlOiB1cGRhdGVDbGlja2VkU2xpZGVcbn07IiwiaW1wb3J0IHsgZXh0ZW5kIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXBkYXRlU2l6ZSgpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciB3aWR0aDtcbiAgdmFyIGhlaWdodDtcbiAgdmFyICRlbCA9IHN3aXBlci4kZWw7XG5cbiAgaWYgKHR5cGVvZiBzd2lwZXIucGFyYW1zLndpZHRoICE9PSAndW5kZWZpbmVkJyAmJiBzd2lwZXIucGFyYW1zLndpZHRoICE9PSBudWxsKSB7XG4gICAgd2lkdGggPSBzd2lwZXIucGFyYW1zLndpZHRoO1xuICB9IGVsc2Uge1xuICAgIHdpZHRoID0gJGVsWzBdLmNsaWVudFdpZHRoO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBzd2lwZXIucGFyYW1zLmhlaWdodCAhPT0gJ3VuZGVmaW5lZCcgJiYgc3dpcGVyLnBhcmFtcy53aWR0aCAhPT0gbnVsbCkge1xuICAgIGhlaWdodCA9IHN3aXBlci5wYXJhbXMuaGVpZ2h0O1xuICB9IGVsc2Uge1xuICAgIGhlaWdodCA9ICRlbFswXS5jbGllbnRIZWlnaHQ7XG4gIH1cblxuICBpZiAod2lkdGggPT09IDAgJiYgc3dpcGVyLmlzSG9yaXpvbnRhbCgpIHx8IGhlaWdodCA9PT0gMCAmJiBzd2lwZXIuaXNWZXJ0aWNhbCgpKSB7XG4gICAgcmV0dXJuO1xuICB9IC8vIFN1YnRyYWN0IHBhZGRpbmdzXG5cblxuICB3aWR0aCA9IHdpZHRoIC0gcGFyc2VJbnQoJGVsLmNzcygncGFkZGluZy1sZWZ0JykgfHwgMCwgMTApIC0gcGFyc2VJbnQoJGVsLmNzcygncGFkZGluZy1yaWdodCcpIHx8IDAsIDEwKTtcbiAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoJGVsLmNzcygncGFkZGluZy10b3AnKSB8fCAwLCAxMCkgLSBwYXJzZUludCgkZWwuY3NzKCdwYWRkaW5nLWJvdHRvbScpIHx8IDAsIDEwKTtcbiAgaWYgKE51bWJlci5pc05hTih3aWR0aCkpIHdpZHRoID0gMDtcbiAgaWYgKE51bWJlci5pc05hTihoZWlnaHQpKSBoZWlnaHQgPSAwO1xuICBleHRlbmQoc3dpcGVyLCB7XG4gICAgd2lkdGg6IHdpZHRoLFxuICAgIGhlaWdodDogaGVpZ2h0LFxuICAgIHNpemU6IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHdpZHRoIDogaGVpZ2h0XG4gIH0pO1xufSIsImltcG9ydCB7IGdldFdpbmRvdyB9IGZyb20gJ3Nzci13aW5kb3cnO1xuaW1wb3J0IHsgZXh0ZW5kIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXBkYXRlU2xpZGVzKCkge1xuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgdmFyICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbCxcbiAgICAgIHN3aXBlclNpemUgPSBzd2lwZXIuc2l6ZSxcbiAgICAgIHJ0bCA9IHN3aXBlci5ydGxUcmFuc2xhdGUsXG4gICAgICB3cm9uZ1JUTCA9IHN3aXBlci53cm9uZ1JUTDtcbiAgdmFyIGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gIHZhciBwcmV2aW91c1NsaWRlc0xlbmd0aCA9IGlzVmlydHVhbCA/IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggOiBzd2lwZXIuc2xpZGVzLmxlbmd0aDtcbiAgdmFyIHNsaWRlcyA9ICR3cmFwcGVyRWwuY2hpbGRyZW4oXCIuXCIgKyBzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3MpO1xuICB2YXIgc2xpZGVzTGVuZ3RoID0gaXNWaXJ0dWFsID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCA6IHNsaWRlcy5sZW5ndGg7XG4gIHZhciBzbmFwR3JpZCA9IFtdO1xuICB2YXIgc2xpZGVzR3JpZCA9IFtdO1xuICB2YXIgc2xpZGVzU2l6ZXNHcmlkID0gW107XG5cbiAgZnVuY3Rpb24gc2xpZGVzRm9yTWFyZ2luKHNsaWRlRWwsIHNsaWRlSW5kZXgpIHtcbiAgICBpZiAoIXBhcmFtcy5jc3NNb2RlKSByZXR1cm4gdHJ1ZTtcblxuICAgIGlmIChzbGlkZUluZGV4ID09PSBzbGlkZXMubGVuZ3RoIC0gMSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgdmFyIG9mZnNldEJlZm9yZSA9IHBhcmFtcy5zbGlkZXNPZmZzZXRCZWZvcmU7XG5cbiAgaWYgKHR5cGVvZiBvZmZzZXRCZWZvcmUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvZmZzZXRCZWZvcmUgPSBwYXJhbXMuc2xpZGVzT2Zmc2V0QmVmb3JlLmNhbGwoc3dpcGVyKTtcbiAgfVxuXG4gIHZhciBvZmZzZXRBZnRlciA9IHBhcmFtcy5zbGlkZXNPZmZzZXRBZnRlcjtcblxuICBpZiAodHlwZW9mIG9mZnNldEFmdGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb2Zmc2V0QWZ0ZXIgPSBwYXJhbXMuc2xpZGVzT2Zmc2V0QWZ0ZXIuY2FsbChzd2lwZXIpO1xuICB9XG5cbiAgdmFyIHByZXZpb3VzU25hcEdyaWRMZW5ndGggPSBzd2lwZXIuc25hcEdyaWQubGVuZ3RoO1xuICB2YXIgcHJldmlvdXNTbGlkZXNHcmlkTGVuZ3RoID0gc3dpcGVyLnNuYXBHcmlkLmxlbmd0aDtcbiAgdmFyIHNwYWNlQmV0d2VlbiA9IHBhcmFtcy5zcGFjZUJldHdlZW47XG4gIHZhciBzbGlkZVBvc2l0aW9uID0gLW9mZnNldEJlZm9yZTtcbiAgdmFyIHByZXZTbGlkZVNpemUgPSAwO1xuICB2YXIgaW5kZXggPSAwO1xuXG4gIGlmICh0eXBlb2Ygc3dpcGVyU2l6ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAodHlwZW9mIHNwYWNlQmV0d2VlbiA9PT0gJ3N0cmluZycgJiYgc3BhY2VCZXR3ZWVuLmluZGV4T2YoJyUnKSA+PSAwKSB7XG4gICAgc3BhY2VCZXR3ZWVuID0gcGFyc2VGbG9hdChzcGFjZUJldHdlZW4ucmVwbGFjZSgnJScsICcnKSkgLyAxMDAgKiBzd2lwZXJTaXplO1xuICB9XG5cbiAgc3dpcGVyLnZpcnR1YWxTaXplID0gLXNwYWNlQmV0d2VlbjsgLy8gcmVzZXQgbWFyZ2luc1xuXG4gIGlmIChydGwpIHNsaWRlcy5jc3Moe1xuICAgIG1hcmdpbkxlZnQ6ICcnLFxuICAgIG1hcmdpblRvcDogJydcbiAgfSk7ZWxzZSBzbGlkZXMuY3NzKHtcbiAgICBtYXJnaW5SaWdodDogJycsXG4gICAgbWFyZ2luQm90dG9tOiAnJ1xuICB9KTtcbiAgdmFyIHNsaWRlc051bWJlckV2ZW5Ub1Jvd3M7XG5cbiAgaWYgKHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4gPiAxKSB7XG4gICAgaWYgKE1hdGguZmxvb3Ioc2xpZGVzTGVuZ3RoIC8gcGFyYW1zLnNsaWRlc1BlckNvbHVtbikgPT09IHNsaWRlc0xlbmd0aCAvIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyQ29sdW1uKSB7XG4gICAgICBzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzID0gc2xpZGVzTGVuZ3RoO1xuICAgIH0gZWxzZSB7XG4gICAgICBzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzID0gTWF0aC5jZWlsKHNsaWRlc0xlbmd0aCAvIHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4pICogcGFyYW1zLnNsaWRlc1BlckNvbHVtbjtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLnNsaWRlc1BlclZpZXcgIT09ICdhdXRvJyAmJiBwYXJhbXMuc2xpZGVzUGVyQ29sdW1uRmlsbCA9PT0gJ3JvdycpIHtcbiAgICAgIHNsaWRlc051bWJlckV2ZW5Ub1Jvd3MgPSBNYXRoLm1heChzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzLCBwYXJhbXMuc2xpZGVzUGVyVmlldyAqIHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4pO1xuICAgIH1cbiAgfSAvLyBDYWxjIHNsaWRlc1xuXG5cbiAgdmFyIHNsaWRlU2l6ZTtcbiAgdmFyIHNsaWRlc1BlckNvbHVtbiA9IHBhcmFtcy5zbGlkZXNQZXJDb2x1bW47XG4gIHZhciBzbGlkZXNQZXJSb3cgPSBzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzIC8gc2xpZGVzUGVyQ29sdW1uO1xuICB2YXIgbnVtRnVsbENvbHVtbnMgPSBNYXRoLmZsb29yKHNsaWRlc0xlbmd0aCAvIHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4pO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpZGVzTGVuZ3RoOyBpICs9IDEpIHtcbiAgICBzbGlkZVNpemUgPSAwO1xuICAgIHZhciBzbGlkZSA9IHNsaWRlcy5lcShpKTtcblxuICAgIGlmIChwYXJhbXMuc2xpZGVzUGVyQ29sdW1uID4gMSkge1xuICAgICAgLy8gU2V0IHNsaWRlcyBvcmRlclxuICAgICAgdmFyIG5ld1NsaWRlT3JkZXJJbmRleCA9IHZvaWQgMDtcbiAgICAgIHZhciBjb2x1bW4gPSB2b2lkIDA7XG4gICAgICB2YXIgcm93ID0gdm9pZCAwO1xuXG4gICAgICBpZiAocGFyYW1zLnNsaWRlc1BlckNvbHVtbkZpbGwgPT09ICdyb3cnICYmIHBhcmFtcy5zbGlkZXNQZXJHcm91cCA+IDEpIHtcbiAgICAgICAgdmFyIGdyb3VwSW5kZXggPSBNYXRoLmZsb29yKGkgLyAocGFyYW1zLnNsaWRlc1Blckdyb3VwICogcGFyYW1zLnNsaWRlc1BlckNvbHVtbikpO1xuICAgICAgICB2YXIgc2xpZGVJbmRleEluR3JvdXAgPSBpIC0gcGFyYW1zLnNsaWRlc1BlckNvbHVtbiAqIHBhcmFtcy5zbGlkZXNQZXJHcm91cCAqIGdyb3VwSW5kZXg7XG4gICAgICAgIHZhciBjb2x1bW5zSW5Hcm91cCA9IGdyb3VwSW5kZXggPT09IDAgPyBwYXJhbXMuc2xpZGVzUGVyR3JvdXAgOiBNYXRoLm1pbihNYXRoLmNlaWwoKHNsaWRlc0xlbmd0aCAtIGdyb3VwSW5kZXggKiBzbGlkZXNQZXJDb2x1bW4gKiBwYXJhbXMuc2xpZGVzUGVyR3JvdXApIC8gc2xpZGVzUGVyQ29sdW1uKSwgcGFyYW1zLnNsaWRlc1Blckdyb3VwKTtcbiAgICAgICAgcm93ID0gTWF0aC5mbG9vcihzbGlkZUluZGV4SW5Hcm91cCAvIGNvbHVtbnNJbkdyb3VwKTtcbiAgICAgICAgY29sdW1uID0gc2xpZGVJbmRleEluR3JvdXAgLSByb3cgKiBjb2x1bW5zSW5Hcm91cCArIGdyb3VwSW5kZXggKiBwYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gICAgICAgIG5ld1NsaWRlT3JkZXJJbmRleCA9IGNvbHVtbiArIHJvdyAqIHNsaWRlc051bWJlckV2ZW5Ub1Jvd3MgLyBzbGlkZXNQZXJDb2x1bW47XG4gICAgICAgIHNsaWRlLmNzcyh7XG4gICAgICAgICAgJy13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXAnOiBuZXdTbGlkZU9yZGVySW5kZXgsXG4gICAgICAgICAgJy1tb3otYm94LW9yZGluYWwtZ3JvdXAnOiBuZXdTbGlkZU9yZGVySW5kZXgsXG4gICAgICAgICAgJy1tcy1mbGV4LW9yZGVyJzogbmV3U2xpZGVPcmRlckluZGV4LFxuICAgICAgICAgICctd2Via2l0LW9yZGVyJzogbmV3U2xpZGVPcmRlckluZGV4LFxuICAgICAgICAgIG9yZGVyOiBuZXdTbGlkZU9yZGVySW5kZXhcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKHBhcmFtcy5zbGlkZXNQZXJDb2x1bW5GaWxsID09PSAnY29sdW1uJykge1xuICAgICAgICBjb2x1bW4gPSBNYXRoLmZsb29yKGkgLyBzbGlkZXNQZXJDb2x1bW4pO1xuICAgICAgICByb3cgPSBpIC0gY29sdW1uICogc2xpZGVzUGVyQ29sdW1uO1xuXG4gICAgICAgIGlmIChjb2x1bW4gPiBudW1GdWxsQ29sdW1ucyB8fCBjb2x1bW4gPT09IG51bUZ1bGxDb2x1bW5zICYmIHJvdyA9PT0gc2xpZGVzUGVyQ29sdW1uIC0gMSkge1xuICAgICAgICAgIHJvdyArPSAxO1xuXG4gICAgICAgICAgaWYgKHJvdyA+PSBzbGlkZXNQZXJDb2x1bW4pIHtcbiAgICAgICAgICAgIHJvdyA9IDA7XG4gICAgICAgICAgICBjb2x1bW4gKz0gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJvdyA9IE1hdGguZmxvb3IoaSAvIHNsaWRlc1BlclJvdyk7XG4gICAgICAgIGNvbHVtbiA9IGkgLSByb3cgKiBzbGlkZXNQZXJSb3c7XG4gICAgICB9XG5cbiAgICAgIHNsaWRlLmNzcyhcIm1hcmdpbi1cIiArIChzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAndG9wJyA6ICdsZWZ0JyksIHJvdyAhPT0gMCAmJiBwYXJhbXMuc3BhY2VCZXR3ZWVuICYmIHBhcmFtcy5zcGFjZUJldHdlZW4gKyBcInB4XCIpO1xuICAgIH1cblxuICAgIGlmIChzbGlkZS5jc3MoJ2Rpc3BsYXknKSA9PT0gJ25vbmUnKSBjb250aW51ZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gICAgaWYgKHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycpIHtcbiAgICAgIHZhciBzbGlkZVN0eWxlcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHNsaWRlWzBdLCBudWxsKTtcbiAgICAgIHZhciBjdXJyZW50VHJhbnNmb3JtID0gc2xpZGVbMF0uc3R5bGUudHJhbnNmb3JtO1xuICAgICAgdmFyIGN1cnJlbnRXZWJLaXRUcmFuc2Zvcm0gPSBzbGlkZVswXS5zdHlsZS53ZWJraXRUcmFuc2Zvcm07XG5cbiAgICAgIGlmIChjdXJyZW50VHJhbnNmb3JtKSB7XG4gICAgICAgIHNsaWRlWzBdLnN0eWxlLnRyYW5zZm9ybSA9ICdub25lJztcbiAgICAgIH1cblxuICAgICAgaWYgKGN1cnJlbnRXZWJLaXRUcmFuc2Zvcm0pIHtcbiAgICAgICAgc2xpZGVbMF0uc3R5bGUud2Via2l0VHJhbnNmb3JtID0gJ25vbmUnO1xuICAgICAgfVxuXG4gICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykge1xuICAgICAgICBzbGlkZVNpemUgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBzbGlkZS5vdXRlcldpZHRoKHRydWUpIDogc2xpZGUub3V0ZXJIZWlnaHQodHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgICAgIHZhciB3aWR0aCA9IHBhcnNlRmxvYXQoc2xpZGVTdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnd2lkdGgnKSB8fCAwKTtcbiAgICAgICAgICB2YXIgcGFkZGluZ0xlZnQgPSBwYXJzZUZsb2F0KHNsaWRlU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ3BhZGRpbmctbGVmdCcpIHx8IDApO1xuICAgICAgICAgIHZhciBwYWRkaW5nUmlnaHQgPSBwYXJzZUZsb2F0KHNsaWRlU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ3BhZGRpbmctcmlnaHQnKSB8fCAwKTtcbiAgICAgICAgICB2YXIgbWFyZ2luTGVmdCA9IHBhcnNlRmxvYXQoc2xpZGVTdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnbWFyZ2luLWxlZnQnKSB8fCAwKTtcbiAgICAgICAgICB2YXIgbWFyZ2luUmlnaHQgPSBwYXJzZUZsb2F0KHNsaWRlU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ21hcmdpbi1yaWdodCcpIHx8IDApO1xuICAgICAgICAgIHZhciBib3hTaXppbmcgPSBzbGlkZVN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdib3gtc2l6aW5nJyk7XG5cbiAgICAgICAgICBpZiAoYm94U2l6aW5nICYmIGJveFNpemluZyA9PT0gJ2JvcmRlci1ib3gnKSB7XG4gICAgICAgICAgICBzbGlkZVNpemUgPSB3aWR0aCArIG1hcmdpbkxlZnQgKyBtYXJnaW5SaWdodDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2xpZGVTaXplID0gd2lkdGggKyBwYWRkaW5nTGVmdCArIHBhZGRpbmdSaWdodCArIG1hcmdpbkxlZnQgKyBtYXJnaW5SaWdodDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIGhlaWdodCA9IHBhcnNlRmxvYXQoc2xpZGVTdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnaGVpZ2h0JykgfHwgMCk7XG4gICAgICAgICAgdmFyIHBhZGRpbmdUb3AgPSBwYXJzZUZsb2F0KHNsaWRlU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ3BhZGRpbmctdG9wJykgfHwgMCk7XG4gICAgICAgICAgdmFyIHBhZGRpbmdCb3R0b20gPSBwYXJzZUZsb2F0KHNsaWRlU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ3BhZGRpbmctYm90dG9tJykgfHwgMCk7XG4gICAgICAgICAgdmFyIG1hcmdpblRvcCA9IHBhcnNlRmxvYXQoc2xpZGVTdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnbWFyZ2luLXRvcCcpIHx8IDApO1xuICAgICAgICAgIHZhciBtYXJnaW5Cb3R0b20gPSBwYXJzZUZsb2F0KHNsaWRlU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ21hcmdpbi1ib3R0b20nKSB8fCAwKTtcblxuICAgICAgICAgIHZhciBfYm94U2l6aW5nID0gc2xpZGVTdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnYm94LXNpemluZycpO1xuXG4gICAgICAgICAgaWYgKF9ib3hTaXppbmcgJiYgX2JveFNpemluZyA9PT0gJ2JvcmRlci1ib3gnKSB7XG4gICAgICAgICAgICBzbGlkZVNpemUgPSBoZWlnaHQgKyBtYXJnaW5Ub3AgKyBtYXJnaW5Cb3R0b207XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNsaWRlU2l6ZSA9IGhlaWdodCArIHBhZGRpbmdUb3AgKyBwYWRkaW5nQm90dG9tICsgbWFyZ2luVG9wICsgbWFyZ2luQm90dG9tO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoY3VycmVudFRyYW5zZm9ybSkge1xuICAgICAgICBzbGlkZVswXS5zdHlsZS50cmFuc2Zvcm0gPSBjdXJyZW50VHJhbnNmb3JtO1xuICAgICAgfVxuXG4gICAgICBpZiAoY3VycmVudFdlYktpdFRyYW5zZm9ybSkge1xuICAgICAgICBzbGlkZVswXS5zdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSBjdXJyZW50V2ViS2l0VHJhbnNmb3JtO1xuICAgICAgfVxuXG4gICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykgc2xpZGVTaXplID0gTWF0aC5mbG9vcihzbGlkZVNpemUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzbGlkZVNpemUgPSAoc3dpcGVyU2l6ZSAtIChwYXJhbXMuc2xpZGVzUGVyVmlldyAtIDEpICogc3BhY2VCZXR3ZWVuKSAvIHBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHNsaWRlU2l6ZSA9IE1hdGguZmxvb3Ioc2xpZGVTaXplKTtcblxuICAgICAgaWYgKHNsaWRlc1tpXSkge1xuICAgICAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICAgc2xpZGVzW2ldLnN0eWxlLndpZHRoID0gc2xpZGVTaXplICsgXCJweFwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNsaWRlc1tpXS5zdHlsZS5oZWlnaHQgPSBzbGlkZVNpemUgKyBcInB4XCI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc2xpZGVzW2ldKSB7XG4gICAgICBzbGlkZXNbaV0uc3dpcGVyU2xpZGVTaXplID0gc2xpZGVTaXplO1xuICAgIH1cblxuICAgIHNsaWRlc1NpemVzR3JpZC5wdXNoKHNsaWRlU2l6ZSk7XG5cbiAgICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICBzbGlkZVBvc2l0aW9uID0gc2xpZGVQb3NpdGlvbiArIHNsaWRlU2l6ZSAvIDIgKyBwcmV2U2xpZGVTaXplIC8gMiArIHNwYWNlQmV0d2VlbjtcbiAgICAgIGlmIChwcmV2U2xpZGVTaXplID09PSAwICYmIGkgIT09IDApIHNsaWRlUG9zaXRpb24gPSBzbGlkZVBvc2l0aW9uIC0gc3dpcGVyU2l6ZSAvIDIgLSBzcGFjZUJldHdlZW47XG4gICAgICBpZiAoaSA9PT0gMCkgc2xpZGVQb3NpdGlvbiA9IHNsaWRlUG9zaXRpb24gLSBzd2lwZXJTaXplIC8gMiAtIHNwYWNlQmV0d2VlbjtcbiAgICAgIGlmIChNYXRoLmFicyhzbGlkZVBvc2l0aW9uKSA8IDEgLyAxMDAwKSBzbGlkZVBvc2l0aW9uID0gMDtcbiAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSBzbGlkZVBvc2l0aW9uID0gTWF0aC5mbG9vcihzbGlkZVBvc2l0aW9uKTtcbiAgICAgIGlmIChpbmRleCAlIHBhcmFtcy5zbGlkZXNQZXJHcm91cCA9PT0gMCkgc25hcEdyaWQucHVzaChzbGlkZVBvc2l0aW9uKTtcbiAgICAgIHNsaWRlc0dyaWQucHVzaChzbGlkZVBvc2l0aW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHNsaWRlUG9zaXRpb24gPSBNYXRoLmZsb29yKHNsaWRlUG9zaXRpb24pO1xuICAgICAgaWYgKChpbmRleCAtIE1hdGgubWluKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwLCBpbmRleCkpICUgc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCA9PT0gMCkgc25hcEdyaWQucHVzaChzbGlkZVBvc2l0aW9uKTtcbiAgICAgIHNsaWRlc0dyaWQucHVzaChzbGlkZVBvc2l0aW9uKTtcbiAgICAgIHNsaWRlUG9zaXRpb24gPSBzbGlkZVBvc2l0aW9uICsgc2xpZGVTaXplICsgc3BhY2VCZXR3ZWVuO1xuICAgIH1cblxuICAgIHN3aXBlci52aXJ0dWFsU2l6ZSArPSBzbGlkZVNpemUgKyBzcGFjZUJldHdlZW47XG4gICAgcHJldlNsaWRlU2l6ZSA9IHNsaWRlU2l6ZTtcbiAgICBpbmRleCArPSAxO1xuICB9XG5cbiAgc3dpcGVyLnZpcnR1YWxTaXplID0gTWF0aC5tYXgoc3dpcGVyLnZpcnR1YWxTaXplLCBzd2lwZXJTaXplKSArIG9mZnNldEFmdGVyO1xuICB2YXIgbmV3U2xpZGVzR3JpZDtcblxuICBpZiAocnRsICYmIHdyb25nUlRMICYmIChwYXJhbXMuZWZmZWN0ID09PSAnc2xpZGUnIHx8IHBhcmFtcy5lZmZlY3QgPT09ICdjb3ZlcmZsb3cnKSkge1xuICAgICR3cmFwcGVyRWwuY3NzKHtcbiAgICAgIHdpZHRoOiBzd2lwZXIudmlydHVhbFNpemUgKyBwYXJhbXMuc3BhY2VCZXR3ZWVuICsgXCJweFwiXG4gICAgfSk7XG4gIH1cblxuICBpZiAocGFyYW1zLnNldFdyYXBwZXJTaXplKSB7XG4gICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkgJHdyYXBwZXJFbC5jc3Moe1xuICAgICAgd2lkdGg6IHN3aXBlci52aXJ0dWFsU2l6ZSArIHBhcmFtcy5zcGFjZUJldHdlZW4gKyBcInB4XCJcbiAgICB9KTtlbHNlICR3cmFwcGVyRWwuY3NzKHtcbiAgICAgIGhlaWdodDogc3dpcGVyLnZpcnR1YWxTaXplICsgcGFyYW1zLnNwYWNlQmV0d2VlbiArIFwicHhcIlxuICAgIH0pO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4gPiAxKSB7XG4gICAgc3dpcGVyLnZpcnR1YWxTaXplID0gKHNsaWRlU2l6ZSArIHBhcmFtcy5zcGFjZUJldHdlZW4pICogc2xpZGVzTnVtYmVyRXZlblRvUm93cztcbiAgICBzd2lwZXIudmlydHVhbFNpemUgPSBNYXRoLmNlaWwoc3dpcGVyLnZpcnR1YWxTaXplIC8gcGFyYW1zLnNsaWRlc1BlckNvbHVtbikgLSBwYXJhbXMuc3BhY2VCZXR3ZWVuO1xuICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpICR3cmFwcGVyRWwuY3NzKHtcbiAgICAgIHdpZHRoOiBzd2lwZXIudmlydHVhbFNpemUgKyBwYXJhbXMuc3BhY2VCZXR3ZWVuICsgXCJweFwiXG4gICAgfSk7ZWxzZSAkd3JhcHBlckVsLmNzcyh7XG4gICAgICBoZWlnaHQ6IHN3aXBlci52aXJ0dWFsU2l6ZSArIHBhcmFtcy5zcGFjZUJldHdlZW4gKyBcInB4XCJcbiAgICB9KTtcblxuICAgIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIG5ld1NsaWRlc0dyaWQgPSBbXTtcblxuICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IHNuYXBHcmlkLmxlbmd0aDsgX2kgKz0gMSkge1xuICAgICAgICB2YXIgc2xpZGVzR3JpZEl0ZW0gPSBzbmFwR3JpZFtfaV07XG4gICAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSBzbGlkZXNHcmlkSXRlbSA9IE1hdGguZmxvb3Ioc2xpZGVzR3JpZEl0ZW0pO1xuICAgICAgICBpZiAoc25hcEdyaWRbX2ldIDwgc3dpcGVyLnZpcnR1YWxTaXplICsgc25hcEdyaWRbMF0pIG5ld1NsaWRlc0dyaWQucHVzaChzbGlkZXNHcmlkSXRlbSk7XG4gICAgICB9XG5cbiAgICAgIHNuYXBHcmlkID0gbmV3U2xpZGVzR3JpZDtcbiAgICB9XG4gIH0gLy8gUmVtb3ZlIGxhc3QgZ3JpZCBlbGVtZW50cyBkZXBlbmRpbmcgb24gd2lkdGhcblxuXG4gIGlmICghcGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgbmV3U2xpZGVzR3JpZCA9IFtdO1xuXG4gICAgZm9yICh2YXIgX2kyID0gMDsgX2kyIDwgc25hcEdyaWQubGVuZ3RoOyBfaTIgKz0gMSkge1xuICAgICAgdmFyIF9zbGlkZXNHcmlkSXRlbSA9IHNuYXBHcmlkW19pMl07XG4gICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3RocykgX3NsaWRlc0dyaWRJdGVtID0gTWF0aC5mbG9vcihfc2xpZGVzR3JpZEl0ZW0pO1xuXG4gICAgICBpZiAoc25hcEdyaWRbX2kyXSA8PSBzd2lwZXIudmlydHVhbFNpemUgLSBzd2lwZXJTaXplKSB7XG4gICAgICAgIG5ld1NsaWRlc0dyaWQucHVzaChfc2xpZGVzR3JpZEl0ZW0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHNuYXBHcmlkID0gbmV3U2xpZGVzR3JpZDtcblxuICAgIGlmIChNYXRoLmZsb29yKHN3aXBlci52aXJ0dWFsU2l6ZSAtIHN3aXBlclNpemUpIC0gTWF0aC5mbG9vcihzbmFwR3JpZFtzbmFwR3JpZC5sZW5ndGggLSAxXSkgPiAxKSB7XG4gICAgICBzbmFwR3JpZC5wdXNoKHN3aXBlci52aXJ0dWFsU2l6ZSAtIHN3aXBlclNpemUpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChzbmFwR3JpZC5sZW5ndGggPT09IDApIHNuYXBHcmlkID0gWzBdO1xuXG4gIGlmIChwYXJhbXMuc3BhY2VCZXR3ZWVuICE9PSAwKSB7XG4gICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgaWYgKHJ0bCkgc2xpZGVzLmZpbHRlcihzbGlkZXNGb3JNYXJnaW4pLmNzcyh7XG4gICAgICAgIG1hcmdpbkxlZnQ6IHNwYWNlQmV0d2VlbiArIFwicHhcIlxuICAgICAgfSk7ZWxzZSBzbGlkZXMuZmlsdGVyKHNsaWRlc0Zvck1hcmdpbikuY3NzKHtcbiAgICAgICAgbWFyZ2luUmlnaHQ6IHNwYWNlQmV0d2VlbiArIFwicHhcIlxuICAgICAgfSk7XG4gICAgfSBlbHNlIHNsaWRlcy5maWx0ZXIoc2xpZGVzRm9yTWFyZ2luKS5jc3Moe1xuICAgICAgbWFyZ2luQm90dG9tOiBzcGFjZUJldHdlZW4gKyBcInB4XCJcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgcGFyYW1zLmNlbnRlcmVkU2xpZGVzQm91bmRzKSB7XG4gICAgdmFyIGFsbFNsaWRlc1NpemUgPSAwO1xuICAgIHNsaWRlc1NpemVzR3JpZC5mb3JFYWNoKGZ1bmN0aW9uIChzbGlkZVNpemVWYWx1ZSkge1xuICAgICAgYWxsU2xpZGVzU2l6ZSArPSBzbGlkZVNpemVWYWx1ZSArIChwYXJhbXMuc3BhY2VCZXR3ZWVuID8gcGFyYW1zLnNwYWNlQmV0d2VlbiA6IDApO1xuICAgIH0pO1xuICAgIGFsbFNsaWRlc1NpemUgLT0gcGFyYW1zLnNwYWNlQmV0d2VlbjtcbiAgICB2YXIgbWF4U25hcCA9IGFsbFNsaWRlc1NpemUgLSBzd2lwZXJTaXplO1xuICAgIHNuYXBHcmlkID0gc25hcEdyaWQubWFwKGZ1bmN0aW9uIChzbmFwKSB7XG4gICAgICBpZiAoc25hcCA8IDApIHJldHVybiAtb2Zmc2V0QmVmb3JlO1xuICAgICAgaWYgKHNuYXAgPiBtYXhTbmFwKSByZXR1cm4gbWF4U25hcCArIG9mZnNldEFmdGVyO1xuICAgICAgcmV0dXJuIHNuYXA7XG4gICAgfSk7XG4gIH1cblxuICBpZiAocGFyYW1zLmNlbnRlckluc3VmZmljaWVudFNsaWRlcykge1xuICAgIHZhciBfYWxsU2xpZGVzU2l6ZSA9IDA7XG4gICAgc2xpZGVzU2l6ZXNHcmlkLmZvckVhY2goZnVuY3Rpb24gKHNsaWRlU2l6ZVZhbHVlKSB7XG4gICAgICBfYWxsU2xpZGVzU2l6ZSArPSBzbGlkZVNpemVWYWx1ZSArIChwYXJhbXMuc3BhY2VCZXR3ZWVuID8gcGFyYW1zLnNwYWNlQmV0d2VlbiA6IDApO1xuICAgIH0pO1xuICAgIF9hbGxTbGlkZXNTaXplIC09IHBhcmFtcy5zcGFjZUJldHdlZW47XG5cbiAgICBpZiAoX2FsbFNsaWRlc1NpemUgPCBzd2lwZXJTaXplKSB7XG4gICAgICB2YXIgYWxsU2xpZGVzT2Zmc2V0ID0gKHN3aXBlclNpemUgLSBfYWxsU2xpZGVzU2l6ZSkgLyAyO1xuICAgICAgc25hcEdyaWQuZm9yRWFjaChmdW5jdGlvbiAoc25hcCwgc25hcEluZGV4KSB7XG4gICAgICAgIHNuYXBHcmlkW3NuYXBJbmRleF0gPSBzbmFwIC0gYWxsU2xpZGVzT2Zmc2V0O1xuICAgICAgfSk7XG4gICAgICBzbGlkZXNHcmlkLmZvckVhY2goZnVuY3Rpb24gKHNuYXAsIHNuYXBJbmRleCkge1xuICAgICAgICBzbGlkZXNHcmlkW3NuYXBJbmRleF0gPSBzbmFwICsgYWxsU2xpZGVzT2Zmc2V0O1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZXh0ZW5kKHN3aXBlciwge1xuICAgIHNsaWRlczogc2xpZGVzLFxuICAgIHNuYXBHcmlkOiBzbmFwR3JpZCxcbiAgICBzbGlkZXNHcmlkOiBzbGlkZXNHcmlkLFxuICAgIHNsaWRlc1NpemVzR3JpZDogc2xpZGVzU2l6ZXNHcmlkXG4gIH0pO1xuXG4gIGlmIChzbGlkZXNMZW5ndGggIT09IHByZXZpb3VzU2xpZGVzTGVuZ3RoKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3NsaWRlc0xlbmd0aENoYW5nZScpO1xuICB9XG5cbiAgaWYgKHNuYXBHcmlkLmxlbmd0aCAhPT0gcHJldmlvdXNTbmFwR3JpZExlbmd0aCkge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cpIHN3aXBlci5jaGVja092ZXJmbG93KCk7XG4gICAgc3dpcGVyLmVtaXQoJ3NuYXBHcmlkTGVuZ3RoQ2hhbmdlJyk7XG4gIH1cblxuICBpZiAoc2xpZGVzR3JpZC5sZW5ndGggIT09IHByZXZpb3VzU2xpZGVzR3JpZExlbmd0aCkge1xuICAgIHN3aXBlci5lbWl0KCdzbGlkZXNHcmlkTGVuZ3RoQ2hhbmdlJyk7XG4gIH1cblxuICBpZiAocGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MgfHwgcGFyYW1zLndhdGNoU2xpZGVzVmlzaWJpbGl0eSkge1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXNPZmZzZXQoKTtcbiAgfVxufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVwZGF0ZUF1dG9IZWlnaHQoc3BlZWQpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciBhY3RpdmVTbGlkZXMgPSBbXTtcbiAgdmFyIG5ld0hlaWdodCA9IDA7XG4gIHZhciBpO1xuXG4gIGlmICh0eXBlb2Ygc3BlZWQgPT09ICdudW1iZXInKSB7XG4gICAgc3dpcGVyLnNldFRyYW5zaXRpb24oc3BlZWQpO1xuICB9IGVsc2UgaWYgKHNwZWVkID09PSB0cnVlKSB7XG4gICAgc3dpcGVyLnNldFRyYW5zaXRpb24oc3dpcGVyLnBhcmFtcy5zcGVlZCk7XG4gIH0gLy8gRmluZCBzbGlkZXMgY3VycmVudGx5IGluIHZpZXdcblxuXG4gIGlmIChzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcgIT09ICdhdXRvJyAmJiBzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcgPiAxKSB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIHN3aXBlci52aXNpYmxlU2xpZGVzLmVhY2goZnVuY3Rpb24gKHNsaWRlKSB7XG4gICAgICAgIGFjdGl2ZVNsaWRlcy5wdXNoKHNsaWRlKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgTWF0aC5jZWlsKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyk7IGkgKz0gMSkge1xuICAgICAgICB2YXIgaW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXggKyBpO1xuICAgICAgICBpZiAoaW5kZXggPiBzd2lwZXIuc2xpZGVzLmxlbmd0aCkgYnJlYWs7XG4gICAgICAgIGFjdGl2ZVNsaWRlcy5wdXNoKHN3aXBlci5zbGlkZXMuZXEoaW5kZXgpWzBdKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYWN0aXZlU2xpZGVzLnB1c2goc3dpcGVyLnNsaWRlcy5lcShzd2lwZXIuYWN0aXZlSW5kZXgpWzBdKTtcbiAgfSAvLyBGaW5kIG5ldyBoZWlnaHQgZnJvbSBoaWdoZXN0IHNsaWRlIGluIHZpZXdcblxuXG4gIGZvciAoaSA9IDA7IGkgPCBhY3RpdmVTbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAodHlwZW9mIGFjdGl2ZVNsaWRlc1tpXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZhciBoZWlnaHQgPSBhY3RpdmVTbGlkZXNbaV0ub2Zmc2V0SGVpZ2h0O1xuICAgICAgbmV3SGVpZ2h0ID0gaGVpZ2h0ID4gbmV3SGVpZ2h0ID8gaGVpZ2h0IDogbmV3SGVpZ2h0O1xuICAgIH1cbiAgfSAvLyBVcGRhdGUgSGVpZ2h0XG5cblxuICBpZiAobmV3SGVpZ2h0KSBzd2lwZXIuJHdyYXBwZXJFbC5jc3MoJ2hlaWdodCcsIG5ld0hlaWdodCArIFwicHhcIik7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXBkYXRlU2xpZGVzT2Zmc2V0KCkge1xuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIHNsaWRlcyA9IHN3aXBlci5zbGlkZXM7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBzbGlkZXNbaV0uc3dpcGVyU2xpZGVPZmZzZXQgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBzbGlkZXNbaV0ub2Zmc2V0TGVmdCA6IHNsaWRlc1tpXS5vZmZzZXRUb3A7XG4gIH1cbn0iLCJpbXBvcnQgJCBmcm9tICcuLi8uLi8uLi91dGlscy9kb20nO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXBkYXRlU2xpZGVzUHJvZ3Jlc3ModHJhbnNsYXRlKSB7XG4gIGlmICh0cmFuc2xhdGUgPT09IHZvaWQgMCkge1xuICAgIHRyYW5zbGF0ZSA9IHRoaXMgJiYgdGhpcy50cmFuc2xhdGUgfHwgMDtcbiAgfVxuXG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgdmFyIHNsaWRlcyA9IHN3aXBlci5zbGlkZXMsXG4gICAgICBydGwgPSBzd2lwZXIucnRsVHJhbnNsYXRlO1xuICBpZiAoc2xpZGVzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICBpZiAodHlwZW9mIHNsaWRlc1swXS5zd2lwZXJTbGlkZU9mZnNldCA9PT0gJ3VuZGVmaW5lZCcpIHN3aXBlci51cGRhdGVTbGlkZXNPZmZzZXQoKTtcbiAgdmFyIG9mZnNldENlbnRlciA9IC10cmFuc2xhdGU7XG4gIGlmIChydGwpIG9mZnNldENlbnRlciA9IHRyYW5zbGF0ZTsgLy8gVmlzaWJsZSBTbGlkZXNcblxuICBzbGlkZXMucmVtb3ZlQ2xhc3MocGFyYW1zLnNsaWRlVmlzaWJsZUNsYXNzKTtcbiAgc3dpcGVyLnZpc2libGVTbGlkZXNJbmRleGVzID0gW107XG4gIHN3aXBlci52aXNpYmxlU2xpZGVzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB2YXIgc2xpZGUgPSBzbGlkZXNbaV07XG4gICAgdmFyIHNsaWRlUHJvZ3Jlc3MgPSAob2Zmc2V0Q2VudGVyICsgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcyA/IHN3aXBlci5taW5UcmFuc2xhdGUoKSA6IDApIC0gc2xpZGUuc3dpcGVyU2xpZGVPZmZzZXQpIC8gKHNsaWRlLnN3aXBlclNsaWRlU2l6ZSArIHBhcmFtcy5zcGFjZUJldHdlZW4pO1xuXG4gICAgaWYgKHBhcmFtcy53YXRjaFNsaWRlc1Zpc2liaWxpdHkgfHwgcGFyYW1zLmNlbnRlcmVkU2xpZGVzICYmIHBhcmFtcy5hdXRvSGVpZ2h0KSB7XG4gICAgICB2YXIgc2xpZGVCZWZvcmUgPSAtKG9mZnNldENlbnRlciAtIHNsaWRlLnN3aXBlclNsaWRlT2Zmc2V0KTtcbiAgICAgIHZhciBzbGlkZUFmdGVyID0gc2xpZGVCZWZvcmUgKyBzd2lwZXIuc2xpZGVzU2l6ZXNHcmlkW2ldO1xuICAgICAgdmFyIGlzVmlzaWJsZSA9IHNsaWRlQmVmb3JlID49IDAgJiYgc2xpZGVCZWZvcmUgPCBzd2lwZXIuc2l6ZSAtIDEgfHwgc2xpZGVBZnRlciA+IDEgJiYgc2xpZGVBZnRlciA8PSBzd2lwZXIuc2l6ZSB8fCBzbGlkZUJlZm9yZSA8PSAwICYmIHNsaWRlQWZ0ZXIgPj0gc3dpcGVyLnNpemU7XG5cbiAgICAgIGlmIChpc1Zpc2libGUpIHtcbiAgICAgICAgc3dpcGVyLnZpc2libGVTbGlkZXMucHVzaChzbGlkZSk7XG4gICAgICAgIHN3aXBlci52aXNpYmxlU2xpZGVzSW5kZXhlcy5wdXNoKGkpO1xuICAgICAgICBzbGlkZXMuZXEoaSkuYWRkQ2xhc3MocGFyYW1zLnNsaWRlVmlzaWJsZUNsYXNzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzbGlkZS5wcm9ncmVzcyA9IHJ0bCA/IC1zbGlkZVByb2dyZXNzIDogc2xpZGVQcm9ncmVzcztcbiAgfVxuXG4gIHN3aXBlci52aXNpYmxlU2xpZGVzID0gJChzd2lwZXIudmlzaWJsZVNsaWRlcyk7XG59IiwiaW1wb3J0IHsgZXh0ZW5kIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXBkYXRlUHJvZ3Jlc3ModHJhbnNsYXRlKSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuXG4gIGlmICh0eXBlb2YgdHJhbnNsYXRlID09PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBtdWx0aXBsaWVyID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSA/IC0xIDogMTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5cbiAgICB0cmFuc2xhdGUgPSBzd2lwZXIgJiYgc3dpcGVyLnRyYW5zbGF0ZSAmJiBzd2lwZXIudHJhbnNsYXRlICogbXVsdGlwbGllciB8fCAwO1xuICB9XG5cbiAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gIHZhciB0cmFuc2xhdGVzRGlmZiA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgdmFyIHByb2dyZXNzID0gc3dpcGVyLnByb2dyZXNzLFxuICAgICAgaXNCZWdpbm5pbmcgPSBzd2lwZXIuaXNCZWdpbm5pbmcsXG4gICAgICBpc0VuZCA9IHN3aXBlci5pc0VuZDtcbiAgdmFyIHdhc0JlZ2lubmluZyA9IGlzQmVnaW5uaW5nO1xuICB2YXIgd2FzRW5kID0gaXNFbmQ7XG5cbiAgaWYgKHRyYW5zbGF0ZXNEaWZmID09PSAwKSB7XG4gICAgcHJvZ3Jlc3MgPSAwO1xuICAgIGlzQmVnaW5uaW5nID0gdHJ1ZTtcbiAgICBpc0VuZCA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgcHJvZ3Jlc3MgPSAodHJhbnNsYXRlIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSAvIHRyYW5zbGF0ZXNEaWZmO1xuICAgIGlzQmVnaW5uaW5nID0gcHJvZ3Jlc3MgPD0gMDtcbiAgICBpc0VuZCA9IHByb2dyZXNzID49IDE7XG4gIH1cblxuICBleHRlbmQoc3dpcGVyLCB7XG4gICAgcHJvZ3Jlc3M6IHByb2dyZXNzLFxuICAgIGlzQmVnaW5uaW5nOiBpc0JlZ2lubmluZyxcbiAgICBpc0VuZDogaXNFbmRcbiAgfSk7XG4gIGlmIChwYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyB8fCBwYXJhbXMud2F0Y2hTbGlkZXNWaXNpYmlsaXR5IHx8IHBhcmFtcy5jZW50ZXJlZFNsaWRlcyAmJiBwYXJhbXMuYXV0b0hlaWdodCkgc3dpcGVyLnVwZGF0ZVNsaWRlc1Byb2dyZXNzKHRyYW5zbGF0ZSk7XG5cbiAgaWYgKGlzQmVnaW5uaW5nICYmICF3YXNCZWdpbm5pbmcpIHtcbiAgICBzd2lwZXIuZW1pdCgncmVhY2hCZWdpbm5pbmcgdG9FZGdlJyk7XG4gIH1cblxuICBpZiAoaXNFbmQgJiYgIXdhc0VuZCkge1xuICAgIHN3aXBlci5lbWl0KCdyZWFjaEVuZCB0b0VkZ2UnKTtcbiAgfVxuXG4gIGlmICh3YXNCZWdpbm5pbmcgJiYgIWlzQmVnaW5uaW5nIHx8IHdhc0VuZCAmJiAhaXNFbmQpIHtcbiAgICBzd2lwZXIuZW1pdCgnZnJvbUVkZ2UnKTtcbiAgfVxuXG4gIHN3aXBlci5lbWl0KCdwcm9ncmVzcycsIHByb2dyZXNzKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1cGRhdGVTbGlkZXNDbGFzc2VzKCkge1xuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIHNsaWRlcyA9IHN3aXBlci5zbGlkZXMsXG4gICAgICBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsLFxuICAgICAgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXgsXG4gICAgICByZWFsSW5kZXggPSBzd2lwZXIucmVhbEluZGV4O1xuICB2YXIgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgcGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcbiAgc2xpZGVzLnJlbW92ZUNsYXNzKHBhcmFtcy5zbGlkZUFjdGl2ZUNsYXNzICsgXCIgXCIgKyBwYXJhbXMuc2xpZGVOZXh0Q2xhc3MgKyBcIiBcIiArIHBhcmFtcy5zbGlkZVByZXZDbGFzcyArIFwiIFwiICsgcGFyYW1zLnNsaWRlRHVwbGljYXRlQWN0aXZlQ2xhc3MgKyBcIiBcIiArIHBhcmFtcy5zbGlkZUR1cGxpY2F0ZU5leHRDbGFzcyArIFwiIFwiICsgcGFyYW1zLnNsaWRlRHVwbGljYXRlUHJldkNsYXNzKTtcbiAgdmFyIGFjdGl2ZVNsaWRlO1xuXG4gIGlmIChpc1ZpcnR1YWwpIHtcbiAgICBhY3RpdmVTbGlkZSA9IHN3aXBlci4kd3JhcHBlckVsLmZpbmQoXCIuXCIgKyBwYXJhbXMuc2xpZGVDbGFzcyArIFwiW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVxcXCJcIiArIGFjdGl2ZUluZGV4ICsgXCJcXFwiXVwiKTtcbiAgfSBlbHNlIHtcbiAgICBhY3RpdmVTbGlkZSA9IHNsaWRlcy5lcShhY3RpdmVJbmRleCk7XG4gIH0gLy8gQWN0aXZlIGNsYXNzZXNcblxuXG4gIGFjdGl2ZVNsaWRlLmFkZENsYXNzKHBhcmFtcy5zbGlkZUFjdGl2ZUNsYXNzKTtcblxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICAvLyBEdXBsaWNhdGUgdG8gYWxsIGxvb3BlZCBzbGlkZXNcbiAgICBpZiAoYWN0aXZlU2xpZGUuaGFzQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKSB7XG4gICAgICAkd3JhcHBlckVsLmNoaWxkcmVuKFwiLlwiICsgcGFyYW1zLnNsaWRlQ2xhc3MgKyBcIjpub3QoLlwiICsgcGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MgKyBcIilbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XFxcIlwiICsgcmVhbEluZGV4ICsgXCJcXFwiXVwiKS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVBY3RpdmVDbGFzcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICR3cmFwcGVyRWwuY2hpbGRyZW4oXCIuXCIgKyBwYXJhbXMuc2xpZGVDbGFzcyArIFwiLlwiICsgcGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MgKyBcIltkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiXCIgKyByZWFsSW5kZXggKyBcIlxcXCJdXCIpLmFkZENsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUFjdGl2ZUNsYXNzKTtcbiAgICB9XG4gIH0gLy8gTmV4dCBTbGlkZVxuXG5cbiAgdmFyIG5leHRTbGlkZSA9IGFjdGl2ZVNsaWRlLm5leHRBbGwoXCIuXCIgKyBwYXJhbXMuc2xpZGVDbGFzcykuZXEoMCkuYWRkQ2xhc3MocGFyYW1zLnNsaWRlTmV4dENsYXNzKTtcblxuICBpZiAocGFyYW1zLmxvb3AgJiYgbmV4dFNsaWRlLmxlbmd0aCA9PT0gMCkge1xuICAgIG5leHRTbGlkZSA9IHNsaWRlcy5lcSgwKTtcbiAgICBuZXh0U2xpZGUuYWRkQ2xhc3MocGFyYW1zLnNsaWRlTmV4dENsYXNzKTtcbiAgfSAvLyBQcmV2IFNsaWRlXG5cblxuICB2YXIgcHJldlNsaWRlID0gYWN0aXZlU2xpZGUucHJldkFsbChcIi5cIiArIHBhcmFtcy5zbGlkZUNsYXNzKS5lcSgwKS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVQcmV2Q2xhc3MpO1xuXG4gIGlmIChwYXJhbXMubG9vcCAmJiBwcmV2U2xpZGUubGVuZ3RoID09PSAwKSB7XG4gICAgcHJldlNsaWRlID0gc2xpZGVzLmVxKC0xKTtcbiAgICBwcmV2U2xpZGUuYWRkQ2xhc3MocGFyYW1zLnNsaWRlUHJldkNsYXNzKTtcbiAgfVxuXG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIC8vIER1cGxpY2F0ZSB0byBhbGwgbG9vcGVkIHNsaWRlc1xuICAgIGlmIChuZXh0U2xpZGUuaGFzQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKSB7XG4gICAgICAkd3JhcHBlckVsLmNoaWxkcmVuKFwiLlwiICsgcGFyYW1zLnNsaWRlQ2xhc3MgKyBcIjpub3QoLlwiICsgcGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MgKyBcIilbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XFxcIlwiICsgbmV4dFNsaWRlLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JykgKyBcIlxcXCJdXCIpLmFkZENsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZU5leHRDbGFzcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICR3cmFwcGVyRWwuY2hpbGRyZW4oXCIuXCIgKyBwYXJhbXMuc2xpZGVDbGFzcyArIFwiLlwiICsgcGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MgKyBcIltkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiXCIgKyBuZXh0U2xpZGUuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSArIFwiXFxcIl1cIikuYWRkQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlTmV4dENsYXNzKTtcbiAgICB9XG5cbiAgICBpZiAocHJldlNsaWRlLmhhc0NsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSkge1xuICAgICAgJHdyYXBwZXJFbC5jaGlsZHJlbihcIi5cIiArIHBhcmFtcy5zbGlkZUNsYXNzICsgXCI6bm90KC5cIiArIHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzICsgXCIpW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVxcXCJcIiArIHByZXZTbGlkZS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpICsgXCJcXFwiXVwiKS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVQcmV2Q2xhc3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICAkd3JhcHBlckVsLmNoaWxkcmVuKFwiLlwiICsgcGFyYW1zLnNsaWRlQ2xhc3MgKyBcIi5cIiArIHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzICsgXCJbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XFxcIlwiICsgcHJldlNsaWRlLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JykgKyBcIlxcXCJdXCIpLmFkZENsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZVByZXZDbGFzcyk7XG4gICAgfVxuICB9XG5cbiAgc3dpcGVyLmVtaXRTbGlkZXNDbGFzc2VzKCk7XG59IiwiaW1wb3J0IHsgZXh0ZW5kIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXBkYXRlQWN0aXZlSW5kZXgobmV3QWN0aXZlSW5kZXgpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciB0cmFuc2xhdGUgPSBzd2lwZXIucnRsVHJhbnNsYXRlID8gc3dpcGVyLnRyYW5zbGF0ZSA6IC1zd2lwZXIudHJhbnNsYXRlO1xuICB2YXIgc2xpZGVzR3JpZCA9IHN3aXBlci5zbGlkZXNHcmlkLFxuICAgICAgc25hcEdyaWQgPSBzd2lwZXIuc25hcEdyaWQsXG4gICAgICBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgcHJldmlvdXNJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleCxcbiAgICAgIHByZXZpb3VzUmVhbEluZGV4ID0gc3dpcGVyLnJlYWxJbmRleCxcbiAgICAgIHByZXZpb3VzU25hcEluZGV4ID0gc3dpcGVyLnNuYXBJbmRleDtcbiAgdmFyIGFjdGl2ZUluZGV4ID0gbmV3QWN0aXZlSW5kZXg7XG4gIHZhciBzbmFwSW5kZXg7XG5cbiAgaWYgKHR5cGVvZiBhY3RpdmVJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWRlc0dyaWQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmICh0eXBlb2Ygc2xpZGVzR3JpZFtpICsgMV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGlmICh0cmFuc2xhdGUgPj0gc2xpZGVzR3JpZFtpXSAmJiB0cmFuc2xhdGUgPCBzbGlkZXNHcmlkW2kgKyAxXSAtIChzbGlkZXNHcmlkW2kgKyAxXSAtIHNsaWRlc0dyaWRbaV0pIC8gMikge1xuICAgICAgICAgIGFjdGl2ZUluZGV4ID0gaTtcbiAgICAgICAgfSBlbHNlIGlmICh0cmFuc2xhdGUgPj0gc2xpZGVzR3JpZFtpXSAmJiB0cmFuc2xhdGUgPCBzbGlkZXNHcmlkW2kgKyAxXSkge1xuICAgICAgICAgIGFjdGl2ZUluZGV4ID0gaSArIDE7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHJhbnNsYXRlID49IHNsaWRlc0dyaWRbaV0pIHtcbiAgICAgICAgYWN0aXZlSW5kZXggPSBpO1xuICAgICAgfVxuICAgIH0gLy8gTm9ybWFsaXplIHNsaWRlSW5kZXhcblxuXG4gICAgaWYgKHBhcmFtcy5ub3JtYWxpemVTbGlkZUluZGV4KSB7XG4gICAgICBpZiAoYWN0aXZlSW5kZXggPCAwIHx8IHR5cGVvZiBhY3RpdmVJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIGFjdGl2ZUluZGV4ID0gMDtcbiAgICB9XG4gIH1cblxuICBpZiAoc25hcEdyaWQuaW5kZXhPZih0cmFuc2xhdGUpID49IDApIHtcbiAgICBzbmFwSW5kZXggPSBzbmFwR3JpZC5pbmRleE9mKHRyYW5zbGF0ZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHNraXAgPSBNYXRoLm1pbihwYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwLCBhY3RpdmVJbmRleCk7XG4gICAgc25hcEluZGV4ID0gc2tpcCArIE1hdGguZmxvb3IoKGFjdGl2ZUluZGV4IC0gc2tpcCkgLyBwYXJhbXMuc2xpZGVzUGVyR3JvdXApO1xuICB9XG5cbiAgaWYgKHNuYXBJbmRleCA+PSBzbmFwR3JpZC5sZW5ndGgpIHNuYXBJbmRleCA9IHNuYXBHcmlkLmxlbmd0aCAtIDE7XG5cbiAgaWYgKGFjdGl2ZUluZGV4ID09PSBwcmV2aW91c0luZGV4KSB7XG4gICAgaWYgKHNuYXBJbmRleCAhPT0gcHJldmlvdXNTbmFwSW5kZXgpIHtcbiAgICAgIHN3aXBlci5zbmFwSW5kZXggPSBzbmFwSW5kZXg7XG4gICAgICBzd2lwZXIuZW1pdCgnc25hcEluZGV4Q2hhbmdlJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuO1xuICB9IC8vIEdldCByZWFsIGluZGV4XG5cblxuICB2YXIgcmVhbEluZGV4ID0gcGFyc2VJbnQoc3dpcGVyLnNsaWRlcy5lcShhY3RpdmVJbmRleCkuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSB8fCBhY3RpdmVJbmRleCwgMTApO1xuICBleHRlbmQoc3dpcGVyLCB7XG4gICAgc25hcEluZGV4OiBzbmFwSW5kZXgsXG4gICAgcmVhbEluZGV4OiByZWFsSW5kZXgsXG4gICAgcHJldmlvdXNJbmRleDogcHJldmlvdXNJbmRleCxcbiAgICBhY3RpdmVJbmRleDogYWN0aXZlSW5kZXhcbiAgfSk7XG4gIHN3aXBlci5lbWl0KCdhY3RpdmVJbmRleENoYW5nZScpO1xuICBzd2lwZXIuZW1pdCgnc25hcEluZGV4Q2hhbmdlJyk7XG5cbiAgaWYgKHByZXZpb3VzUmVhbEluZGV4ICE9PSByZWFsSW5kZXgpIHtcbiAgICBzd2lwZXIuZW1pdCgncmVhbEluZGV4Q2hhbmdlJyk7XG4gIH1cblxuICBpZiAoc3dpcGVyLmluaXRpYWxpemVkIHx8IHN3aXBlci5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0KSB7XG4gICAgc3dpcGVyLmVtaXQoJ3NsaWRlQ2hhbmdlJyk7XG4gIH1cbn0iLCJpbXBvcnQgJCBmcm9tICcuLi8uLi8uLi91dGlscy9kb20nO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXBkYXRlQ2xpY2tlZFNsaWRlKGUpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICB2YXIgc2xpZGUgPSAkKGUudGFyZ2V0KS5jbG9zZXN0KFwiLlwiICsgcGFyYW1zLnNsaWRlQ2xhc3MpWzBdO1xuICB2YXIgc2xpZGVGb3VuZCA9IGZhbHNlO1xuXG4gIGlmIChzbGlkZSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3dpcGVyLnNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKHN3aXBlci5zbGlkZXNbaV0gPT09IHNsaWRlKSBzbGlkZUZvdW5kID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBpZiAoc2xpZGUgJiYgc2xpZGVGb3VuZCkge1xuICAgIHN3aXBlci5jbGlja2VkU2xpZGUgPSBzbGlkZTtcblxuICAgIGlmIChzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkge1xuICAgICAgc3dpcGVyLmNsaWNrZWRJbmRleCA9IHBhcnNlSW50KCQoc2xpZGUpLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JyksIDEwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLmNsaWNrZWRJbmRleCA9ICQoc2xpZGUpLmluZGV4KCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHN3aXBlci5jbGlja2VkU2xpZGUgPSB1bmRlZmluZWQ7XG4gICAgc3dpcGVyLmNsaWNrZWRJbmRleCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAocGFyYW1zLnNsaWRlVG9DbGlja2VkU2xpZGUgJiYgc3dpcGVyLmNsaWNrZWRJbmRleCAhPT0gdW5kZWZpbmVkICYmIHN3aXBlci5jbGlja2VkSW5kZXggIT09IHN3aXBlci5hY3RpdmVJbmRleCkge1xuICAgIHN3aXBlci5zbGlkZVRvQ2xpY2tlZFNsaWRlKCk7XG4gIH1cbn0iLCJpbXBvcnQgZ2V0VHJhbnNsYXRlIGZyb20gJy4vZ2V0VHJhbnNsYXRlJztcbmltcG9ydCBzZXRUcmFuc2xhdGUgZnJvbSAnLi9zZXRUcmFuc2xhdGUnO1xuaW1wb3J0IG1pblRyYW5zbGF0ZSBmcm9tICcuL21pblRyYW5zbGF0ZSc7XG5pbXBvcnQgbWF4VHJhbnNsYXRlIGZyb20gJy4vbWF4VHJhbnNsYXRlJztcbmltcG9ydCB0cmFuc2xhdGVUbyBmcm9tICcuL3RyYW5zbGF0ZVRvJztcbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ2V0VHJhbnNsYXRlOiBnZXRUcmFuc2xhdGUsXG4gIHNldFRyYW5zbGF0ZTogc2V0VHJhbnNsYXRlLFxuICBtaW5UcmFuc2xhdGU6IG1pblRyYW5zbGF0ZSxcbiAgbWF4VHJhbnNsYXRlOiBtYXhUcmFuc2xhdGUsXG4gIHRyYW5zbGF0ZVRvOiB0cmFuc2xhdGVUb1xufTsiLCJpbXBvcnQgeyBnZXRUcmFuc2xhdGUgfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlscyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRTd2lwZXJUcmFuc2xhdGUoYXhpcykge1xuICBpZiAoYXhpcyA9PT0gdm9pZCAwKSB7XG4gICAgYXhpcyA9IHRoaXMuaXNIb3Jpem9udGFsKCkgPyAneCcgOiAneSc7XG4gIH1cblxuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMsXG4gICAgICBydGwgPSBzd2lwZXIucnRsVHJhbnNsYXRlLFxuICAgICAgdHJhbnNsYXRlID0gc3dpcGVyLnRyYW5zbGF0ZSxcbiAgICAgICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbDtcblxuICBpZiAocGFyYW1zLnZpcnR1YWxUcmFuc2xhdGUpIHtcbiAgICByZXR1cm4gcnRsID8gLXRyYW5zbGF0ZSA6IHRyYW5zbGF0ZTtcbiAgfVxuXG4gIGlmIChwYXJhbXMuY3NzTW9kZSkge1xuICAgIHJldHVybiB0cmFuc2xhdGU7XG4gIH1cblxuICB2YXIgY3VycmVudFRyYW5zbGF0ZSA9IGdldFRyYW5zbGF0ZSgkd3JhcHBlckVsWzBdLCBheGlzKTtcbiAgaWYgKHJ0bCkgY3VycmVudFRyYW5zbGF0ZSA9IC1jdXJyZW50VHJhbnNsYXRlO1xuICByZXR1cm4gY3VycmVudFRyYW5zbGF0ZSB8fCAwO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNldFRyYW5zbGF0ZSh0cmFuc2xhdGUsIGJ5Q29udHJvbGxlcikge1xuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIHJ0bCA9IHN3aXBlci5ydGxUcmFuc2xhdGUsXG4gICAgICBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsLFxuICAgICAgd3JhcHBlckVsID0gc3dpcGVyLndyYXBwZXJFbCxcbiAgICAgIHByb2dyZXNzID0gc3dpcGVyLnByb2dyZXNzO1xuICB2YXIgeCA9IDA7XG4gIHZhciB5ID0gMDtcbiAgdmFyIHogPSAwO1xuXG4gIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICB4ID0gcnRsID8gLXRyYW5zbGF0ZSA6IHRyYW5zbGF0ZTtcbiAgfSBlbHNlIHtcbiAgICB5ID0gdHJhbnNsYXRlO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHtcbiAgICB4ID0gTWF0aC5mbG9vcih4KTtcbiAgICB5ID0gTWF0aC5mbG9vcih5KTtcbiAgfVxuXG4gIGlmIChwYXJhbXMuY3NzTW9kZSkge1xuICAgIHdyYXBwZXJFbFtzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnc2Nyb2xsTGVmdCcgOiAnc2Nyb2xsVG9wJ10gPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAteCA6IC15O1xuICB9IGVsc2UgaWYgKCFwYXJhbXMudmlydHVhbFRyYW5zbGF0ZSkge1xuICAgICR3cmFwcGVyRWwudHJhbnNmb3JtKFwidHJhbnNsYXRlM2QoXCIgKyB4ICsgXCJweCwgXCIgKyB5ICsgXCJweCwgXCIgKyB6ICsgXCJweClcIik7XG4gIH1cblxuICBzd2lwZXIucHJldmlvdXNUcmFuc2xhdGUgPSBzd2lwZXIudHJhbnNsYXRlO1xuICBzd2lwZXIudHJhbnNsYXRlID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8geCA6IHk7IC8vIENoZWNrIGlmIHdlIG5lZWQgdG8gdXBkYXRlIHByb2dyZXNzXG5cbiAgdmFyIG5ld1Byb2dyZXNzO1xuICB2YXIgdHJhbnNsYXRlc0RpZmYgPSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgLSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG5cbiAgaWYgKHRyYW5zbGF0ZXNEaWZmID09PSAwKSB7XG4gICAgbmV3UHJvZ3Jlc3MgPSAwO1xuICB9IGVsc2Uge1xuICAgIG5ld1Byb2dyZXNzID0gKHRyYW5zbGF0ZSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSkgLyB0cmFuc2xhdGVzRGlmZjtcbiAgfVxuXG4gIGlmIChuZXdQcm9ncmVzcyAhPT0gcHJvZ3Jlc3MpIHtcbiAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3ModHJhbnNsYXRlKTtcbiAgfVxuXG4gIHN3aXBlci5lbWl0KCdzZXRUcmFuc2xhdGUnLCBzd2lwZXIudHJhbnNsYXRlLCBieUNvbnRyb2xsZXIpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1pblRyYW5zbGF0ZSgpIHtcbiAgcmV0dXJuIC10aGlzLnNuYXBHcmlkWzBdO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1heFRyYW5zbGF0ZSgpIHtcbiAgcmV0dXJuIC10aGlzLnNuYXBHcmlkW3RoaXMuc25hcEdyaWQubGVuZ3RoIC0gMV07XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHJhbnNsYXRlVG8odHJhbnNsYXRlLCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCB0cmFuc2xhdGVCb3VuZHMsIGludGVybmFsKSB7XG4gIGlmICh0cmFuc2xhdGUgPT09IHZvaWQgMCkge1xuICAgIHRyYW5zbGF0ZSA9IDA7XG4gIH1cblxuICBpZiAoc3BlZWQgPT09IHZvaWQgMCkge1xuICAgIHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQ7XG4gIH1cblxuICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHtcbiAgICBydW5DYWxsYmFja3MgPSB0cnVlO1xuICB9XG5cbiAgaWYgKHRyYW5zbGF0ZUJvdW5kcyA9PT0gdm9pZCAwKSB7XG4gICAgdHJhbnNsYXRlQm91bmRzID0gdHJ1ZTtcbiAgfVxuXG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgIHdyYXBwZXJFbCA9IHN3aXBlci53cmFwcGVyRWw7XG5cbiAgaWYgKHN3aXBlci5hbmltYXRpbmcgJiYgcGFyYW1zLnByZXZlbnRJbnRlcmFjdGlvbk9uVHJhbnNpdGlvbikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBtaW5UcmFuc2xhdGUgPSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gIHZhciBtYXhUcmFuc2xhdGUgPSBzd2lwZXIubWF4VHJhbnNsYXRlKCk7XG4gIHZhciBuZXdUcmFuc2xhdGU7XG4gIGlmICh0cmFuc2xhdGVCb3VuZHMgJiYgdHJhbnNsYXRlID4gbWluVHJhbnNsYXRlKSBuZXdUcmFuc2xhdGUgPSBtaW5UcmFuc2xhdGU7ZWxzZSBpZiAodHJhbnNsYXRlQm91bmRzICYmIHRyYW5zbGF0ZSA8IG1heFRyYW5zbGF0ZSkgbmV3VHJhbnNsYXRlID0gbWF4VHJhbnNsYXRlO2Vsc2UgbmV3VHJhbnNsYXRlID0gdHJhbnNsYXRlOyAvLyBVcGRhdGUgcHJvZ3Jlc3NcblxuICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MobmV3VHJhbnNsYXRlKTtcblxuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICB2YXIgaXNIID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpO1xuXG4gICAgaWYgKHNwZWVkID09PSAwKSB7XG4gICAgICB3cmFwcGVyRWxbaXNIID8gJ3Njcm9sbExlZnQnIDogJ3Njcm9sbFRvcCddID0gLW5ld1RyYW5zbGF0ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBpZiAod3JhcHBlckVsLnNjcm9sbFRvKSB7XG4gICAgICAgIHZhciBfd3JhcHBlckVsJHNjcm9sbFRvO1xuXG4gICAgICAgIHdyYXBwZXJFbC5zY3JvbGxUbygoX3dyYXBwZXJFbCRzY3JvbGxUbyA9IHt9LCBfd3JhcHBlckVsJHNjcm9sbFRvW2lzSCA/ICdsZWZ0JyA6ICd0b3AnXSA9IC1uZXdUcmFuc2xhdGUsIF93cmFwcGVyRWwkc2Nyb2xsVG8uYmVoYXZpb3IgPSAnc21vb3RoJywgX3dyYXBwZXJFbCRzY3JvbGxUbykpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd3JhcHBlckVsW2lzSCA/ICdzY3JvbGxMZWZ0JyA6ICdzY3JvbGxUb3AnXSA9IC1uZXdUcmFuc2xhdGU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoc3BlZWQgPT09IDApIHtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbigwKTtcbiAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKG5ld1RyYW5zbGF0ZSk7XG5cbiAgICBpZiAocnVuQ2FsbGJhY2tzKSB7XG4gICAgICBzd2lwZXIuZW1pdCgnYmVmb3JlVHJhbnNpdGlvblN0YXJ0Jywgc3BlZWQsIGludGVybmFsKTtcbiAgICAgIHN3aXBlci5lbWl0KCd0cmFuc2l0aW9uRW5kJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKHNwZWVkKTtcbiAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKG5ld1RyYW5zbGF0ZSk7XG5cbiAgICBpZiAocnVuQ2FsbGJhY2tzKSB7XG4gICAgICBzd2lwZXIuZW1pdCgnYmVmb3JlVHJhbnNpdGlvblN0YXJ0Jywgc3BlZWQsIGludGVybmFsKTtcbiAgICAgIHN3aXBlci5lbWl0KCd0cmFuc2l0aW9uU3RhcnQnKTtcbiAgICB9XG5cbiAgICBpZiAoIXN3aXBlci5hbmltYXRpbmcpIHtcbiAgICAgIHN3aXBlci5hbmltYXRpbmcgPSB0cnVlO1xuXG4gICAgICBpZiAoIXN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpIHtcbiAgICAgICAgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uIHRyYW5zaXRpb25FbmQoZSkge1xuICAgICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgICAgICBpZiAoZS50YXJnZXQgIT09IHRoaXMpIHJldHVybjtcbiAgICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbFswXS5yZW1vdmVFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCk7XG4gICAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWxbMF0ucmVtb3ZlRXZlbnRMaXN0ZW5lcignd2Via2l0VHJhbnNpdGlvbkVuZCcsIHN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpO1xuICAgICAgICAgIHN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQgPSBudWxsO1xuICAgICAgICAgIGRlbGV0ZSBzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kO1xuXG4gICAgICAgICAgaWYgKHJ1bkNhbGxiYWNrcykge1xuICAgICAgICAgICAgc3dpcGVyLmVtaXQoJ3RyYW5zaXRpb25FbmQnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLmFkZEV2ZW50TGlzdGVuZXIoJ3dlYmtpdFRyYW5zaXRpb25FbmQnLCBzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn0iLCJpbXBvcnQgc2V0VHJhbnNpdGlvbiBmcm9tICcuL3NldFRyYW5zaXRpb24nO1xuaW1wb3J0IHRyYW5zaXRpb25TdGFydCBmcm9tICcuL3RyYW5zaXRpb25TdGFydCc7XG5pbXBvcnQgdHJhbnNpdGlvbkVuZCBmcm9tICcuL3RyYW5zaXRpb25FbmQnO1xuZXhwb3J0IGRlZmF1bHQge1xuICBzZXRUcmFuc2l0aW9uOiBzZXRUcmFuc2l0aW9uLFxuICB0cmFuc2l0aW9uU3RhcnQ6IHRyYW5zaXRpb25TdGFydCxcbiAgdHJhbnNpdGlvbkVuZDogdHJhbnNpdGlvbkVuZFxufTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uLCBieUNvbnRyb2xsZXIpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG5cbiAgaWYgKCFzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICBzd2lwZXIuJHdyYXBwZXJFbC50cmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgfVxuXG4gIHN3aXBlci5lbWl0KCdzZXRUcmFuc2l0aW9uJywgZHVyYXRpb24sIGJ5Q29udHJvbGxlcik7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHJhbnNpdGlvblN0YXJ0KHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKSB7XG4gIGlmIChydW5DYWxsYmFja3MgPT09IHZvaWQgMCkge1xuICAgIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gIH1cblxuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4LFxuICAgICAgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgIHByZXZpb3VzSW5kZXggPSBzd2lwZXIucHJldmlvdXNJbmRleDtcbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSByZXR1cm47XG5cbiAgaWYgKHBhcmFtcy5hdXRvSGVpZ2h0KSB7XG4gICAgc3dpcGVyLnVwZGF0ZUF1dG9IZWlnaHQoKTtcbiAgfVxuXG4gIHZhciBkaXIgPSBkaXJlY3Rpb247XG5cbiAgaWYgKCFkaXIpIHtcbiAgICBpZiAoYWN0aXZlSW5kZXggPiBwcmV2aW91c0luZGV4KSBkaXIgPSAnbmV4dCc7ZWxzZSBpZiAoYWN0aXZlSW5kZXggPCBwcmV2aW91c0luZGV4KSBkaXIgPSAncHJldic7ZWxzZSBkaXIgPSAncmVzZXQnO1xuICB9XG5cbiAgc3dpcGVyLmVtaXQoJ3RyYW5zaXRpb25TdGFydCcpO1xuXG4gIGlmIChydW5DYWxsYmFja3MgJiYgYWN0aXZlSW5kZXggIT09IHByZXZpb3VzSW5kZXgpIHtcbiAgICBpZiAoZGlyID09PSAncmVzZXQnKSB7XG4gICAgICBzd2lwZXIuZW1pdCgnc2xpZGVSZXNldFRyYW5zaXRpb25TdGFydCcpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHN3aXBlci5lbWl0KCdzbGlkZUNoYW5nZVRyYW5zaXRpb25TdGFydCcpO1xuXG4gICAgaWYgKGRpciA9PT0gJ25leHQnKSB7XG4gICAgICBzd2lwZXIuZW1pdCgnc2xpZGVOZXh0VHJhbnNpdGlvblN0YXJ0Jyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5lbWl0KCdzbGlkZVByZXZUcmFuc2l0aW9uU3RhcnQnKTtcbiAgICB9XG4gIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0cmFuc2l0aW9uRW5kKHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKSB7XG4gIGlmIChydW5DYWxsYmFja3MgPT09IHZvaWQgMCkge1xuICAgIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gIH1cblxuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4LFxuICAgICAgcHJldmlvdXNJbmRleCA9IHN3aXBlci5wcmV2aW91c0luZGV4LFxuICAgICAgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgc3dpcGVyLmFuaW1hdGluZyA9IGZhbHNlO1xuICBpZiAocGFyYW1zLmNzc01vZGUpIHJldHVybjtcbiAgc3dpcGVyLnNldFRyYW5zaXRpb24oMCk7XG4gIHZhciBkaXIgPSBkaXJlY3Rpb247XG5cbiAgaWYgKCFkaXIpIHtcbiAgICBpZiAoYWN0aXZlSW5kZXggPiBwcmV2aW91c0luZGV4KSBkaXIgPSAnbmV4dCc7ZWxzZSBpZiAoYWN0aXZlSW5kZXggPCBwcmV2aW91c0luZGV4KSBkaXIgPSAncHJldic7ZWxzZSBkaXIgPSAncmVzZXQnO1xuICB9XG5cbiAgc3dpcGVyLmVtaXQoJ3RyYW5zaXRpb25FbmQnKTtcblxuICBpZiAocnVuQ2FsbGJhY2tzICYmIGFjdGl2ZUluZGV4ICE9PSBwcmV2aW91c0luZGV4KSB7XG4gICAgaWYgKGRpciA9PT0gJ3Jlc2V0Jykge1xuICAgICAgc3dpcGVyLmVtaXQoJ3NsaWRlUmVzZXRUcmFuc2l0aW9uRW5kJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc3dpcGVyLmVtaXQoJ3NsaWRlQ2hhbmdlVHJhbnNpdGlvbkVuZCcpO1xuXG4gICAgaWYgKGRpciA9PT0gJ25leHQnKSB7XG4gICAgICBzd2lwZXIuZW1pdCgnc2xpZGVOZXh0VHJhbnNpdGlvbkVuZCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuZW1pdCgnc2xpZGVQcmV2VHJhbnNpdGlvbkVuZCcpO1xuICAgIH1cbiAgfVxufSIsImltcG9ydCBzbGlkZVRvIGZyb20gJy4vc2xpZGVUbyc7XG5pbXBvcnQgc2xpZGVUb0xvb3AgZnJvbSAnLi9zbGlkZVRvTG9vcCc7XG5pbXBvcnQgc2xpZGVOZXh0IGZyb20gJy4vc2xpZGVOZXh0JztcbmltcG9ydCBzbGlkZVByZXYgZnJvbSAnLi9zbGlkZVByZXYnO1xuaW1wb3J0IHNsaWRlUmVzZXQgZnJvbSAnLi9zbGlkZVJlc2V0JztcbmltcG9ydCBzbGlkZVRvQ2xvc2VzdCBmcm9tICcuL3NsaWRlVG9DbG9zZXN0JztcbmltcG9ydCBzbGlkZVRvQ2xpY2tlZFNsaWRlIGZyb20gJy4vc2xpZGVUb0NsaWNrZWRTbGlkZSc7XG5leHBvcnQgZGVmYXVsdCB7XG4gIHNsaWRlVG86IHNsaWRlVG8sXG4gIHNsaWRlVG9Mb29wOiBzbGlkZVRvTG9vcCxcbiAgc2xpZGVOZXh0OiBzbGlkZU5leHQsXG4gIHNsaWRlUHJldjogc2xpZGVQcmV2LFxuICBzbGlkZVJlc2V0OiBzbGlkZVJlc2V0LFxuICBzbGlkZVRvQ2xvc2VzdDogc2xpZGVUb0Nsb3Nlc3QsXG4gIHNsaWRlVG9DbGlja2VkU2xpZGU6IHNsaWRlVG9DbGlja2VkU2xpZGVcbn07IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2xpZGVUbyhpbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpIHtcbiAgaWYgKGluZGV4ID09PSB2b2lkIDApIHtcbiAgICBpbmRleCA9IDA7XG4gIH1cblxuICBpZiAoc3BlZWQgPT09IHZvaWQgMCkge1xuICAgIHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQ7XG4gIH1cblxuICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHtcbiAgICBydW5DYWxsYmFja3MgPSB0cnVlO1xuICB9XG5cbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciBzbGlkZUluZGV4ID0gaW5kZXg7XG4gIGlmIChzbGlkZUluZGV4IDwgMCkgc2xpZGVJbmRleCA9IDA7XG4gIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgc25hcEdyaWQgPSBzd2lwZXIuc25hcEdyaWQsXG4gICAgICBzbGlkZXNHcmlkID0gc3dpcGVyLnNsaWRlc0dyaWQsXG4gICAgICBwcmV2aW91c0luZGV4ID0gc3dpcGVyLnByZXZpb3VzSW5kZXgsXG4gICAgICBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleCxcbiAgICAgIHJ0bCA9IHN3aXBlci5ydGxUcmFuc2xhdGUsXG4gICAgICB3cmFwcGVyRWwgPSBzd2lwZXIud3JhcHBlckVsO1xuXG4gIGlmIChzd2lwZXIuYW5pbWF0aW5nICYmIHBhcmFtcy5wcmV2ZW50SW50ZXJhY3Rpb25PblRyYW5zaXRpb24pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgc2tpcCA9IE1hdGgubWluKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwLCBzbGlkZUluZGV4KTtcbiAgdmFyIHNuYXBJbmRleCA9IHNraXAgKyBNYXRoLmZsb29yKChzbGlkZUluZGV4IC0gc2tpcCkgLyBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwKTtcbiAgaWYgKHNuYXBJbmRleCA+PSBzbmFwR3JpZC5sZW5ndGgpIHNuYXBJbmRleCA9IHNuYXBHcmlkLmxlbmd0aCAtIDE7XG5cbiAgaWYgKChhY3RpdmVJbmRleCB8fCBwYXJhbXMuaW5pdGlhbFNsaWRlIHx8IDApID09PSAocHJldmlvdXNJbmRleCB8fCAwKSAmJiBydW5DYWxsYmFja3MpIHtcbiAgICBzd2lwZXIuZW1pdCgnYmVmb3JlU2xpZGVDaGFuZ2VTdGFydCcpO1xuICB9XG5cbiAgdmFyIHRyYW5zbGF0ZSA9IC1zbmFwR3JpZFtzbmFwSW5kZXhdOyAvLyBVcGRhdGUgcHJvZ3Jlc3NcblxuICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3ModHJhbnNsYXRlKTsgLy8gTm9ybWFsaXplIHNsaWRlSW5kZXhcblxuICBpZiAocGFyYW1zLm5vcm1hbGl6ZVNsaWRlSW5kZXgpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWRlc0dyaWQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmICgtTWF0aC5mbG9vcih0cmFuc2xhdGUgKiAxMDApID49IE1hdGguZmxvb3Ioc2xpZGVzR3JpZFtpXSAqIDEwMCkpIHtcbiAgICAgICAgc2xpZGVJbmRleCA9IGk7XG4gICAgICB9XG4gICAgfVxuICB9IC8vIERpcmVjdGlvbnMgbG9ja3NcblxuXG4gIGlmIChzd2lwZXIuaW5pdGlhbGl6ZWQgJiYgc2xpZGVJbmRleCAhPT0gYWN0aXZlSW5kZXgpIHtcbiAgICBpZiAoIXN3aXBlci5hbGxvd1NsaWRlTmV4dCAmJiB0cmFuc2xhdGUgPCBzd2lwZXIudHJhbnNsYXRlICYmIHRyYW5zbGF0ZSA8IHN3aXBlci5taW5UcmFuc2xhdGUoKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICghc3dpcGVyLmFsbG93U2xpZGVQcmV2ICYmIHRyYW5zbGF0ZSA+IHN3aXBlci50cmFuc2xhdGUgJiYgdHJhbnNsYXRlID4gc3dpcGVyLm1heFRyYW5zbGF0ZSgpKSB7XG4gICAgICBpZiAoKGFjdGl2ZUluZGV4IHx8IDApICE9PSBzbGlkZUluZGV4KSByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgdmFyIGRpcmVjdGlvbjtcbiAgaWYgKHNsaWRlSW5kZXggPiBhY3RpdmVJbmRleCkgZGlyZWN0aW9uID0gJ25leHQnO2Vsc2UgaWYgKHNsaWRlSW5kZXggPCBhY3RpdmVJbmRleCkgZGlyZWN0aW9uID0gJ3ByZXYnO2Vsc2UgZGlyZWN0aW9uID0gJ3Jlc2V0JzsgLy8gVXBkYXRlIEluZGV4XG5cbiAgaWYgKHJ0bCAmJiAtdHJhbnNsYXRlID09PSBzd2lwZXIudHJhbnNsYXRlIHx8ICFydGwgJiYgdHJhbnNsYXRlID09PSBzd2lwZXIudHJhbnNsYXRlKSB7XG4gICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KHNsaWRlSW5kZXgpOyAvLyBVcGRhdGUgSGVpZ2h0XG5cbiAgICBpZiAocGFyYW1zLmF1dG9IZWlnaHQpIHtcbiAgICAgIHN3aXBlci51cGRhdGVBdXRvSGVpZ2h0KCk7XG4gICAgfVxuXG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcblxuICAgIGlmIChwYXJhbXMuZWZmZWN0ICE9PSAnc2xpZGUnKSB7XG4gICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKHRyYW5zbGF0ZSk7XG4gICAgfVxuXG4gICAgaWYgKGRpcmVjdGlvbiAhPT0gJ3Jlc2V0Jykge1xuICAgICAgc3dpcGVyLnRyYW5zaXRpb25TdGFydChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gICAgICBzd2lwZXIudHJhbnNpdGlvbkVuZChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgdmFyIGlzSCA9IHN3aXBlci5pc0hvcml6b250YWwoKTtcbiAgICB2YXIgdCA9IC10cmFuc2xhdGU7XG5cbiAgICBpZiAocnRsKSB7XG4gICAgICB0ID0gd3JhcHBlckVsLnNjcm9sbFdpZHRoIC0gd3JhcHBlckVsLm9mZnNldFdpZHRoIC0gdDtcbiAgICB9XG5cbiAgICBpZiAoc3BlZWQgPT09IDApIHtcbiAgICAgIHdyYXBwZXJFbFtpc0ggPyAnc2Nyb2xsTGVmdCcgOiAnc2Nyb2xsVG9wJ10gPSB0O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIGlmICh3cmFwcGVyRWwuc2Nyb2xsVG8pIHtcbiAgICAgICAgdmFyIF93cmFwcGVyRWwkc2Nyb2xsVG87XG5cbiAgICAgICAgd3JhcHBlckVsLnNjcm9sbFRvKChfd3JhcHBlckVsJHNjcm9sbFRvID0ge30sIF93cmFwcGVyRWwkc2Nyb2xsVG9baXNIID8gJ2xlZnQnIDogJ3RvcCddID0gdCwgX3dyYXBwZXJFbCRzY3JvbGxUby5iZWhhdmlvciA9ICdzbW9vdGgnLCBfd3JhcHBlckVsJHNjcm9sbFRvKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3cmFwcGVyRWxbaXNIID8gJ3Njcm9sbExlZnQnIDogJ3Njcm9sbFRvcCddID0gdDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmIChzcGVlZCA9PT0gMCkge1xuICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKDApO1xuICAgIHN3aXBlci5zZXRUcmFuc2xhdGUodHJhbnNsYXRlKTtcbiAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoc2xpZGVJbmRleCk7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICBzd2lwZXIuZW1pdCgnYmVmb3JlVHJhbnNpdGlvblN0YXJ0Jywgc3BlZWQsIGludGVybmFsKTtcbiAgICBzd2lwZXIudHJhbnNpdGlvblN0YXJ0KHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKTtcbiAgICBzd2lwZXIudHJhbnNpdGlvbkVuZChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLnNldFRyYW5zaXRpb24oc3BlZWQpO1xuICAgIHN3aXBlci5zZXRUcmFuc2xhdGUodHJhbnNsYXRlKTtcbiAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoc2xpZGVJbmRleCk7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICBzd2lwZXIuZW1pdCgnYmVmb3JlVHJhbnNpdGlvblN0YXJ0Jywgc3BlZWQsIGludGVybmFsKTtcbiAgICBzd2lwZXIudHJhbnNpdGlvblN0YXJ0KHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKTtcblxuICAgIGlmICghc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgc3dpcGVyLmFuaW1hdGluZyA9IHRydWU7XG5cbiAgICAgIGlmICghc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKSB7XG4gICAgICAgIHN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uIHRyYW5zaXRpb25FbmQoZSkge1xuICAgICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgICAgICBpZiAoZS50YXJnZXQgIT09IHRoaXMpIHJldHVybjtcbiAgICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbFswXS5yZW1vdmVFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbFswXS5yZW1vdmVFdmVudExpc3RlbmVyKCd3ZWJraXRUcmFuc2l0aW9uRW5kJywgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgICAgICAgICBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQgPSBudWxsO1xuICAgICAgICAgIGRlbGV0ZSBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQ7XG4gICAgICAgICAgc3dpcGVyLnRyYW5zaXRpb25FbmQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pO1xuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbFswXS5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLmFkZEV2ZW50TGlzdGVuZXIoJ3dlYmtpdFRyYW5zaXRpb25FbmQnLCBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNsaWRlVG9Mb29wKGluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCkge1xuICBpZiAoaW5kZXggPT09IHZvaWQgMCkge1xuICAgIGluZGV4ID0gMDtcbiAgfVxuXG4gIGlmIChzcGVlZCA9PT0gdm9pZCAwKSB7XG4gICAgc3BlZWQgPSB0aGlzLnBhcmFtcy5zcGVlZDtcbiAgfVxuXG4gIGlmIChydW5DYWxsYmFja3MgPT09IHZvaWQgMCkge1xuICAgIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gIH1cblxuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIG5ld0luZGV4ID0gaW5kZXg7XG5cbiAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgIG5ld0luZGV4ICs9IHN3aXBlci5sb29wZWRTbGlkZXM7XG4gIH1cblxuICByZXR1cm4gc3dpcGVyLnNsaWRlVG8obmV3SW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbn0iLCIvKiBlc2xpbnQgbm8tdW51c2VkLXZhcnM6IFwib2ZmXCIgKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNsaWRlTmV4dChzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCkge1xuICBpZiAoc3BlZWQgPT09IHZvaWQgMCkge1xuICAgIHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQ7XG4gIH1cblxuICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHtcbiAgICBydW5DYWxsYmFja3MgPSB0cnVlO1xuICB9XG5cbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgYW5pbWF0aW5nID0gc3dpcGVyLmFuaW1hdGluZztcbiAgdmFyIGluY3JlbWVudCA9IHN3aXBlci5hY3RpdmVJbmRleCA8IHBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAgPyAxIDogcGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuXG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIGlmIChhbmltYXRpbmcgJiYgcGFyYW1zLmxvb3BQcmV2ZW50c1NsaWRlKSByZXR1cm4gZmFsc2U7XG4gICAgc3dpcGVyLmxvb3BGaXgoKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5cbiAgICBzd2lwZXIuX2NsaWVudExlZnQgPSBzd2lwZXIuJHdyYXBwZXJFbFswXS5jbGllbnRMZWZ0O1xuICB9XG5cbiAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCArIGluY3JlbWVudCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xufSIsIi8qIGVzbGludCBuby11bnVzZWQtdmFyczogXCJvZmZcIiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2xpZGVQcmV2KHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKSB7XG4gIGlmIChzcGVlZCA9PT0gdm9pZCAwKSB7XG4gICAgc3BlZWQgPSB0aGlzLnBhcmFtcy5zcGVlZDtcbiAgfVxuXG4gIGlmIChydW5DYWxsYmFja3MgPT09IHZvaWQgMCkge1xuICAgIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gIH1cblxuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMsXG4gICAgICBhbmltYXRpbmcgPSBzd2lwZXIuYW5pbWF0aW5nLFxuICAgICAgc25hcEdyaWQgPSBzd2lwZXIuc25hcEdyaWQsXG4gICAgICBzbGlkZXNHcmlkID0gc3dpcGVyLnNsaWRlc0dyaWQsXG4gICAgICBydGxUcmFuc2xhdGUgPSBzd2lwZXIucnRsVHJhbnNsYXRlO1xuXG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIGlmIChhbmltYXRpbmcgJiYgcGFyYW1zLmxvb3BQcmV2ZW50c1NsaWRlKSByZXR1cm4gZmFsc2U7XG4gICAgc3dpcGVyLmxvb3BGaXgoKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5cbiAgICBzd2lwZXIuX2NsaWVudExlZnQgPSBzd2lwZXIuJHdyYXBwZXJFbFswXS5jbGllbnRMZWZ0O1xuICB9XG5cbiAgdmFyIHRyYW5zbGF0ZSA9IHJ0bFRyYW5zbGF0ZSA/IHN3aXBlci50cmFuc2xhdGUgOiAtc3dpcGVyLnRyYW5zbGF0ZTtcblxuICBmdW5jdGlvbiBub3JtYWxpemUodmFsKSB7XG4gICAgaWYgKHZhbCA8IDApIHJldHVybiAtTWF0aC5mbG9vcihNYXRoLmFicyh2YWwpKTtcbiAgICByZXR1cm4gTWF0aC5mbG9vcih2YWwpO1xuICB9XG5cbiAgdmFyIG5vcm1hbGl6ZWRUcmFuc2xhdGUgPSBub3JtYWxpemUodHJhbnNsYXRlKTtcbiAgdmFyIG5vcm1hbGl6ZWRTbmFwR3JpZCA9IHNuYXBHcmlkLm1hcChmdW5jdGlvbiAodmFsKSB7XG4gICAgcmV0dXJuIG5vcm1hbGl6ZSh2YWwpO1xuICB9KTtcbiAgdmFyIGN1cnJlbnRTbmFwID0gc25hcEdyaWRbbm9ybWFsaXplZFNuYXBHcmlkLmluZGV4T2Yobm9ybWFsaXplZFRyYW5zbGF0ZSldO1xuICB2YXIgcHJldlNuYXAgPSBzbmFwR3JpZFtub3JtYWxpemVkU25hcEdyaWQuaW5kZXhPZihub3JtYWxpemVkVHJhbnNsYXRlKSAtIDFdO1xuXG4gIGlmICh0eXBlb2YgcHJldlNuYXAgPT09ICd1bmRlZmluZWQnICYmIHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgc25hcEdyaWQuZm9yRWFjaChmdW5jdGlvbiAoc25hcCkge1xuICAgICAgaWYgKCFwcmV2U25hcCAmJiBub3JtYWxpemVkVHJhbnNsYXRlID49IHNuYXApIHByZXZTbmFwID0gc25hcDtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBwcmV2SW5kZXg7XG5cbiAgaWYgKHR5cGVvZiBwcmV2U25hcCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBwcmV2SW5kZXggPSBzbGlkZXNHcmlkLmluZGV4T2YocHJldlNuYXApO1xuICAgIGlmIChwcmV2SW5kZXggPCAwKSBwcmV2SW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXggLSAxO1xuICB9XG5cbiAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKHByZXZJbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xufSIsIi8qIGVzbGludCBuby11bnVzZWQtdmFyczogXCJvZmZcIiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2xpZGVSZXNldChzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCkge1xuICBpZiAoc3BlZWQgPT09IHZvaWQgMCkge1xuICAgIHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQ7XG4gIH1cblxuICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHtcbiAgICBydW5DYWxsYmFja3MgPSB0cnVlO1xuICB9XG5cbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHJldHVybiBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbn0iLCIvKiBlc2xpbnQgbm8tdW51c2VkLXZhcnM6IFwib2ZmXCIgKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNsaWRlVG9DbG9zZXN0KHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsLCB0aHJlc2hvbGQpIHtcbiAgaWYgKHNwZWVkID09PSB2b2lkIDApIHtcbiAgICBzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkO1xuICB9XG5cbiAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgfVxuXG4gIGlmICh0aHJlc2hvbGQgPT09IHZvaWQgMCkge1xuICAgIHRocmVzaG9sZCA9IDAuNTtcbiAgfVxuXG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgaW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gIHZhciBza2lwID0gTWF0aC5taW4oc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAsIGluZGV4KTtcbiAgdmFyIHNuYXBJbmRleCA9IHNraXAgKyBNYXRoLmZsb29yKChpbmRleCAtIHNraXApIC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gIHZhciB0cmFuc2xhdGUgPSBzd2lwZXIucnRsVHJhbnNsYXRlID8gc3dpcGVyLnRyYW5zbGF0ZSA6IC1zd2lwZXIudHJhbnNsYXRlO1xuXG4gIGlmICh0cmFuc2xhdGUgPj0gc3dpcGVyLnNuYXBHcmlkW3NuYXBJbmRleF0pIHtcbiAgICAvLyBUaGUgY3VycmVudCB0cmFuc2xhdGUgaXMgb24gb3IgYWZ0ZXIgdGhlIGN1cnJlbnQgc25hcCBpbmRleCwgc28gdGhlIGNob2ljZVxuICAgIC8vIGlzIGJldHdlZW4gdGhlIGN1cnJlbnQgaW5kZXggYW5kIHRoZSBvbmUgYWZ0ZXIgaXQuXG4gICAgdmFyIGN1cnJlbnRTbmFwID0gc3dpcGVyLnNuYXBHcmlkW3NuYXBJbmRleF07XG4gICAgdmFyIG5leHRTbmFwID0gc3dpcGVyLnNuYXBHcmlkW3NuYXBJbmRleCArIDFdO1xuXG4gICAgaWYgKHRyYW5zbGF0ZSAtIGN1cnJlbnRTbmFwID4gKG5leHRTbmFwIC0gY3VycmVudFNuYXApICogdGhyZXNob2xkKSB7XG4gICAgICBpbmRleCArPSBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBUaGUgY3VycmVudCB0cmFuc2xhdGUgaXMgYmVmb3JlIHRoZSBjdXJyZW50IHNuYXAgaW5kZXgsIHNvIHRoZSBjaG9pY2VcbiAgICAvLyBpcyBiZXR3ZWVuIHRoZSBjdXJyZW50IGluZGV4IGFuZCB0aGUgb25lIGJlZm9yZSBpdC5cbiAgICB2YXIgcHJldlNuYXAgPSBzd2lwZXIuc25hcEdyaWRbc25hcEluZGV4IC0gMV07XG4gICAgdmFyIF9jdXJyZW50U25hcCA9IHN3aXBlci5zbmFwR3JpZFtzbmFwSW5kZXhdO1xuXG4gICAgaWYgKHRyYW5zbGF0ZSAtIHByZXZTbmFwIDw9IChfY3VycmVudFNuYXAgLSBwcmV2U25hcCkgKiB0aHJlc2hvbGQpIHtcbiAgICAgIGluZGV4IC09IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gICAgfVxuICB9XG5cbiAgaW5kZXggPSBNYXRoLm1heChpbmRleCwgMCk7XG4gIGluZGV4ID0gTWF0aC5taW4oaW5kZXgsIHN3aXBlci5zbGlkZXNHcmlkLmxlbmd0aCAtIDEpO1xuICByZXR1cm4gc3dpcGVyLnNsaWRlVG8oaW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbn0iLCJpbXBvcnQgJCBmcm9tICcuLi8uLi8uLi91dGlscy9kb20nO1xuaW1wb3J0IHsgbmV4dFRpY2sgfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlscyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzbGlkZVRvQ2xpY2tlZFNsaWRlKCkge1xuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMsXG4gICAgICAkd3JhcHBlckVsID0gc3dpcGVyLiR3cmFwcGVyRWw7XG4gIHZhciBzbGlkZXNQZXJWaWV3ID0gcGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyA/IHN3aXBlci5zbGlkZXNQZXJWaWV3RHluYW1pYygpIDogcGFyYW1zLnNsaWRlc1BlclZpZXc7XG4gIHZhciBzbGlkZVRvSW5kZXggPSBzd2lwZXIuY2xpY2tlZEluZGV4O1xuICB2YXIgcmVhbEluZGV4O1xuXG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIGlmIChzd2lwZXIuYW5pbWF0aW5nKSByZXR1cm47XG4gICAgcmVhbEluZGV4ID0gcGFyc2VJbnQoJChzd2lwZXIuY2xpY2tlZFNsaWRlKS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpLCAxMCk7XG5cbiAgICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICBpZiAoc2xpZGVUb0luZGV4IDwgc3dpcGVyLmxvb3BlZFNsaWRlcyAtIHNsaWRlc1BlclZpZXcgLyAyIHx8IHNsaWRlVG9JbmRleCA+IHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gc3dpcGVyLmxvb3BlZFNsaWRlcyArIHNsaWRlc1BlclZpZXcgLyAyKSB7XG4gICAgICAgIHN3aXBlci5sb29wRml4KCk7XG4gICAgICAgIHNsaWRlVG9JbmRleCA9ICR3cmFwcGVyRWwuY2hpbGRyZW4oXCIuXCIgKyBwYXJhbXMuc2xpZGVDbGFzcyArIFwiW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVxcXCJcIiArIHJlYWxJbmRleCArIFwiXFxcIl06bm90KC5cIiArIHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzICsgXCIpXCIpLmVxKDApLmluZGV4KCk7XG4gICAgICAgIG5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhzbGlkZVRvSW5kZXgpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzbGlkZVRvSW5kZXggPiBzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIHNsaWRlc1BlclZpZXcpIHtcbiAgICAgIHN3aXBlci5sb29wRml4KCk7XG4gICAgICBzbGlkZVRvSW5kZXggPSAkd3JhcHBlckVsLmNoaWxkcmVuKFwiLlwiICsgcGFyYW1zLnNsaWRlQ2xhc3MgKyBcIltkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiXCIgKyByZWFsSW5kZXggKyBcIlxcXCJdOm5vdCguXCIgKyBwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcyArIFwiKVwiKS5lcSgwKS5pbmRleCgpO1xuICAgICAgbmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzbGlkZVRvSW5kZXgpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gIH1cbn0iLCJpbXBvcnQgbG9vcENyZWF0ZSBmcm9tICcuL2xvb3BDcmVhdGUnO1xuaW1wb3J0IGxvb3BGaXggZnJvbSAnLi9sb29wRml4JztcbmltcG9ydCBsb29wRGVzdHJveSBmcm9tICcuL2xvb3BEZXN0cm95JztcbmV4cG9ydCBkZWZhdWx0IHtcbiAgbG9vcENyZWF0ZTogbG9vcENyZWF0ZSxcbiAgbG9vcEZpeDogbG9vcEZpeCxcbiAgbG9vcERlc3Ryb3k6IGxvb3BEZXN0cm95XG59OyIsImltcG9ydCB7IGdldERvY3VtZW50IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG5pbXBvcnQgJCBmcm9tICcuLi8uLi8uLi91dGlscy9kb20nO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbG9vcENyZWF0ZSgpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsOyAvLyBSZW1vdmUgZHVwbGljYXRlZCBzbGlkZXNcblxuICAkd3JhcHBlckVsLmNoaWxkcmVuKFwiLlwiICsgcGFyYW1zLnNsaWRlQ2xhc3MgKyBcIi5cIiArIHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKS5yZW1vdmUoKTtcbiAgdmFyIHNsaWRlcyA9ICR3cmFwcGVyRWwuY2hpbGRyZW4oXCIuXCIgKyBwYXJhbXMuc2xpZGVDbGFzcyk7XG5cbiAgaWYgKHBhcmFtcy5sb29wRmlsbEdyb3VwV2l0aEJsYW5rKSB7XG4gICAgdmFyIGJsYW5rU2xpZGVzTnVtID0gcGFyYW1zLnNsaWRlc1Blckdyb3VwIC0gc2xpZGVzLmxlbmd0aCAlIHBhcmFtcy5zbGlkZXNQZXJHcm91cDtcblxuICAgIGlmIChibGFua1NsaWRlc051bSAhPT0gcGFyYW1zLnNsaWRlc1Blckdyb3VwKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJsYW5rU2xpZGVzTnVtOyBpICs9IDEpIHtcbiAgICAgICAgdmFyIGJsYW5rTm9kZSA9ICQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpLmFkZENsYXNzKHBhcmFtcy5zbGlkZUNsYXNzICsgXCIgXCIgKyBwYXJhbXMuc2xpZGVCbGFua0NsYXNzKTtcbiAgICAgICAgJHdyYXBwZXJFbC5hcHBlbmQoYmxhbmtOb2RlKTtcbiAgICAgIH1cblxuICAgICAgc2xpZGVzID0gJHdyYXBwZXJFbC5jaGlsZHJlbihcIi5cIiArIHBhcmFtcy5zbGlkZUNsYXNzKTtcbiAgICB9XG4gIH1cblxuICBpZiAocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyAmJiAhcGFyYW1zLmxvb3BlZFNsaWRlcykgcGFyYW1zLmxvb3BlZFNsaWRlcyA9IHNsaWRlcy5sZW5ndGg7XG4gIHN3aXBlci5sb29wZWRTbGlkZXMgPSBNYXRoLmNlaWwocGFyc2VGbG9hdChwYXJhbXMubG9vcGVkU2xpZGVzIHx8IHBhcmFtcy5zbGlkZXNQZXJWaWV3LCAxMCkpO1xuICBzd2lwZXIubG9vcGVkU2xpZGVzICs9IHBhcmFtcy5sb29wQWRkaXRpb25hbFNsaWRlcztcblxuICBpZiAoc3dpcGVyLmxvb3BlZFNsaWRlcyA+IHNsaWRlcy5sZW5ndGgpIHtcbiAgICBzd2lwZXIubG9vcGVkU2xpZGVzID0gc2xpZGVzLmxlbmd0aDtcbiAgfVxuXG4gIHZhciBwcmVwZW5kU2xpZGVzID0gW107XG4gIHZhciBhcHBlbmRTbGlkZXMgPSBbXTtcbiAgc2xpZGVzLmVhY2goZnVuY3Rpb24gKGVsLCBpbmRleCkge1xuICAgIHZhciBzbGlkZSA9ICQoZWwpO1xuXG4gICAgaWYgKGluZGV4IDwgc3dpcGVyLmxvb3BlZFNsaWRlcykge1xuICAgICAgYXBwZW5kU2xpZGVzLnB1c2goZWwpO1xuICAgIH1cblxuICAgIGlmIChpbmRleCA8IHNsaWRlcy5sZW5ndGggJiYgaW5kZXggPj0gc2xpZGVzLmxlbmd0aCAtIHN3aXBlci5sb29wZWRTbGlkZXMpIHtcbiAgICAgIHByZXBlbmRTbGlkZXMucHVzaChlbCk7XG4gICAgfVxuXG4gICAgc2xpZGUuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnLCBpbmRleCk7XG4gIH0pO1xuXG4gIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcHBlbmRTbGlkZXMubGVuZ3RoOyBfaSArPSAxKSB7XG4gICAgJHdyYXBwZXJFbC5hcHBlbmQoJChhcHBlbmRTbGlkZXNbX2ldLmNsb25lTm9kZSh0cnVlKSkuYWRkQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKTtcbiAgfVxuXG4gIGZvciAodmFyIF9pMiA9IHByZXBlbmRTbGlkZXMubGVuZ3RoIC0gMTsgX2kyID49IDA7IF9pMiAtPSAxKSB7XG4gICAgJHdyYXBwZXJFbC5wcmVwZW5kKCQocHJlcGVuZFNsaWRlc1tfaTJdLmNsb25lTm9kZSh0cnVlKSkuYWRkQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKTtcbiAgfVxufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxvb3BGaXgoKSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICBzd2lwZXIuZW1pdCgnYmVmb3JlTG9vcEZpeCcpO1xuICB2YXIgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXgsXG4gICAgICBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzLFxuICAgICAgbG9vcGVkU2xpZGVzID0gc3dpcGVyLmxvb3BlZFNsaWRlcyxcbiAgICAgIGFsbG93U2xpZGVQcmV2ID0gc3dpcGVyLmFsbG93U2xpZGVQcmV2LFxuICAgICAgYWxsb3dTbGlkZU5leHQgPSBzd2lwZXIuYWxsb3dTbGlkZU5leHQsXG4gICAgICBzbmFwR3JpZCA9IHN3aXBlci5zbmFwR3JpZCxcbiAgICAgIHJ0bCA9IHN3aXBlci5ydGxUcmFuc2xhdGU7XG4gIHZhciBuZXdJbmRleDtcbiAgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID0gdHJ1ZTtcbiAgc3dpcGVyLmFsbG93U2xpZGVOZXh0ID0gdHJ1ZTtcbiAgdmFyIHNuYXBUcmFuc2xhdGUgPSAtc25hcEdyaWRbYWN0aXZlSW5kZXhdO1xuICB2YXIgZGlmZiA9IHNuYXBUcmFuc2xhdGUgLSBzd2lwZXIuZ2V0VHJhbnNsYXRlKCk7IC8vIEZpeCBGb3IgTmVnYXRpdmUgT3ZlcnNsaWRpbmdcblxuICBpZiAoYWN0aXZlSW5kZXggPCBsb29wZWRTbGlkZXMpIHtcbiAgICBuZXdJbmRleCA9IHNsaWRlcy5sZW5ndGggLSBsb29wZWRTbGlkZXMgKiAzICsgYWN0aXZlSW5kZXg7XG4gICAgbmV3SW5kZXggKz0gbG9vcGVkU2xpZGVzO1xuICAgIHZhciBzbGlkZUNoYW5nZWQgPSBzd2lwZXIuc2xpZGVUbyhuZXdJbmRleCwgMCwgZmFsc2UsIHRydWUpO1xuXG4gICAgaWYgKHNsaWRlQ2hhbmdlZCAmJiBkaWZmICE9PSAwKSB7XG4gICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKChydGwgPyAtc3dpcGVyLnRyYW5zbGF0ZSA6IHN3aXBlci50cmFuc2xhdGUpIC0gZGlmZik7XG4gICAgfVxuICB9IGVsc2UgaWYgKGFjdGl2ZUluZGV4ID49IHNsaWRlcy5sZW5ndGggLSBsb29wZWRTbGlkZXMpIHtcbiAgICAvLyBGaXggRm9yIFBvc2l0aXZlIE92ZXJzbGlkaW5nXG4gICAgbmV3SW5kZXggPSAtc2xpZGVzLmxlbmd0aCArIGFjdGl2ZUluZGV4ICsgbG9vcGVkU2xpZGVzO1xuICAgIG5ld0luZGV4ICs9IGxvb3BlZFNsaWRlcztcblxuICAgIHZhciBfc2xpZGVDaGFuZ2VkID0gc3dpcGVyLnNsaWRlVG8obmV3SW5kZXgsIDAsIGZhbHNlLCB0cnVlKTtcblxuICAgIGlmIChfc2xpZGVDaGFuZ2VkICYmIGRpZmYgIT09IDApIHtcbiAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUoKHJ0bCA/IC1zd2lwZXIudHJhbnNsYXRlIDogc3dpcGVyLnRyYW5zbGF0ZSkgLSBkaWZmKTtcbiAgICB9XG4gIH1cblxuICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSBhbGxvd1NsaWRlUHJldjtcbiAgc3dpcGVyLmFsbG93U2xpZGVOZXh0ID0gYWxsb3dTbGlkZU5leHQ7XG4gIHN3aXBlci5lbWl0KCdsb29wRml4Jyk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbG9vcERlc3Ryb3koKSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsLFxuICAgICAgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgIHNsaWRlcyA9IHN3aXBlci5zbGlkZXM7XG4gICR3cmFwcGVyRWwuY2hpbGRyZW4oXCIuXCIgKyBwYXJhbXMuc2xpZGVDbGFzcyArIFwiLlwiICsgcGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MgKyBcIiwuXCIgKyBwYXJhbXMuc2xpZGVDbGFzcyArIFwiLlwiICsgcGFyYW1zLnNsaWRlQmxhbmtDbGFzcykucmVtb3ZlKCk7XG4gIHNsaWRlcy5yZW1vdmVBdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpO1xufSIsImltcG9ydCBzZXRHcmFiQ3Vyc29yIGZyb20gJy4vc2V0R3JhYkN1cnNvcic7XG5pbXBvcnQgdW5zZXRHcmFiQ3Vyc29yIGZyb20gJy4vdW5zZXRHcmFiQ3Vyc29yJztcbmV4cG9ydCBkZWZhdWx0IHtcbiAgc2V0R3JhYkN1cnNvcjogc2V0R3JhYkN1cnNvcixcbiAgdW5zZXRHcmFiQ3Vyc29yOiB1bnNldEdyYWJDdXJzb3Jcbn07IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0R3JhYkN1cnNvcihtb3ZpbmcpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIGlmIChzd2lwZXIuc3VwcG9ydC50b3VjaCB8fCAhc3dpcGVyLnBhcmFtcy5zaW11bGF0ZVRvdWNoIHx8IHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzd2lwZXIuaXNMb2NrZWQgfHwgc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSByZXR1cm47XG4gIHZhciBlbCA9IHN3aXBlci5lbDtcbiAgZWwuc3R5bGUuY3Vyc29yID0gJ21vdmUnO1xuICBlbC5zdHlsZS5jdXJzb3IgPSBtb3ZpbmcgPyAnLXdlYmtpdC1ncmFiYmluZycgOiAnLXdlYmtpdC1ncmFiJztcbiAgZWwuc3R5bGUuY3Vyc29yID0gbW92aW5nID8gJy1tb3otZ3JhYmJpbicgOiAnLW1vei1ncmFiJztcbiAgZWwuc3R5bGUuY3Vyc29yID0gbW92aW5nID8gJ2dyYWJiaW5nJyA6ICdncmFiJztcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1bnNldEdyYWJDdXJzb3IoKSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuXG4gIGlmIChzd2lwZXIuc3VwcG9ydC50b3VjaCB8fCBzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc3dpcGVyLmlzTG9ja2VkIHx8IHN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHN3aXBlci5lbC5zdHlsZS5jdXJzb3IgPSAnJztcbn0iLCJpbXBvcnQgYXBwZW5kU2xpZGUgZnJvbSAnLi9hcHBlbmRTbGlkZSc7XG5pbXBvcnQgcHJlcGVuZFNsaWRlIGZyb20gJy4vcHJlcGVuZFNsaWRlJztcbmltcG9ydCBhZGRTbGlkZSBmcm9tICcuL2FkZFNsaWRlJztcbmltcG9ydCByZW1vdmVTbGlkZSBmcm9tICcuL3JlbW92ZVNsaWRlJztcbmltcG9ydCByZW1vdmVBbGxTbGlkZXMgZnJvbSAnLi9yZW1vdmVBbGxTbGlkZXMnO1xuZXhwb3J0IGRlZmF1bHQge1xuICBhcHBlbmRTbGlkZTogYXBwZW5kU2xpZGUsXG4gIHByZXBlbmRTbGlkZTogcHJlcGVuZFNsaWRlLFxuICBhZGRTbGlkZTogYWRkU2xpZGUsXG4gIHJlbW92ZVNsaWRlOiByZW1vdmVTbGlkZSxcbiAgcmVtb3ZlQWxsU2xpZGVzOiByZW1vdmVBbGxTbGlkZXNcbn07IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYXBwZW5kU2xpZGUoc2xpZGVzKSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsLFxuICAgICAgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcblxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBzd2lwZXIubG9vcERlc3Ryb3koKTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygc2xpZGVzID09PSAnb2JqZWN0JyAmJiAnbGVuZ3RoJyBpbiBzbGlkZXMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKHNsaWRlc1tpXSkgJHdyYXBwZXJFbC5hcHBlbmQoc2xpZGVzW2ldKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgJHdyYXBwZXJFbC5hcHBlbmQoc2xpZGVzKTtcbiAgfVxuXG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIHN3aXBlci5sb29wQ3JlYXRlKCk7XG4gIH1cblxuICBpZiAoIShwYXJhbXMub2JzZXJ2ZXIgJiYgc3dpcGVyLnN1cHBvcnQub2JzZXJ2ZXIpKSB7XG4gICAgc3dpcGVyLnVwZGF0ZSgpO1xuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcHJlcGVuZFNsaWRlKHNsaWRlcykge1xuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMsXG4gICAgICAkd3JhcHBlckVsID0gc3dpcGVyLiR3cmFwcGVyRWwsXG4gICAgICBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcblxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBzd2lwZXIubG9vcERlc3Ryb3koKTtcbiAgfVxuXG4gIHZhciBuZXdBY3RpdmVJbmRleCA9IGFjdGl2ZUluZGV4ICsgMTtcblxuICBpZiAodHlwZW9mIHNsaWRlcyA9PT0gJ29iamVjdCcgJiYgJ2xlbmd0aCcgaW4gc2xpZGVzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmIChzbGlkZXNbaV0pICR3cmFwcGVyRWwucHJlcGVuZChzbGlkZXNbaV0pO1xuICAgIH1cblxuICAgIG5ld0FjdGl2ZUluZGV4ID0gYWN0aXZlSW5kZXggKyBzbGlkZXMubGVuZ3RoO1xuICB9IGVsc2Uge1xuICAgICR3cmFwcGVyRWwucHJlcGVuZChzbGlkZXMpO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgc3dpcGVyLmxvb3BDcmVhdGUoKTtcbiAgfVxuXG4gIGlmICghKHBhcmFtcy5vYnNlcnZlciAmJiBzd2lwZXIuc3VwcG9ydC5vYnNlcnZlcikpIHtcbiAgICBzd2lwZXIudXBkYXRlKCk7XG4gIH1cblxuICBzd2lwZXIuc2xpZGVUbyhuZXdBY3RpdmVJbmRleCwgMCwgZmFsc2UpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZFNsaWRlKGluZGV4LCBzbGlkZXMpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciAkd3JhcHBlckVsID0gc3dpcGVyLiR3cmFwcGVyRWwsXG4gICAgICBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gIHZhciBhY3RpdmVJbmRleEJ1ZmZlciA9IGFjdGl2ZUluZGV4O1xuXG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIGFjdGl2ZUluZGV4QnVmZmVyIC09IHN3aXBlci5sb29wZWRTbGlkZXM7XG4gICAgc3dpcGVyLmxvb3BEZXN0cm95KCk7XG4gICAgc3dpcGVyLnNsaWRlcyA9ICR3cmFwcGVyRWwuY2hpbGRyZW4oXCIuXCIgKyBwYXJhbXMuc2xpZGVDbGFzcyk7XG4gIH1cblxuICB2YXIgYmFzZUxlbmd0aCA9IHN3aXBlci5zbGlkZXMubGVuZ3RoO1xuXG4gIGlmIChpbmRleCA8PSAwKSB7XG4gICAgc3dpcGVyLnByZXBlbmRTbGlkZShzbGlkZXMpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChpbmRleCA+PSBiYXNlTGVuZ3RoKSB7XG4gICAgc3dpcGVyLmFwcGVuZFNsaWRlKHNsaWRlcyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIG5ld0FjdGl2ZUluZGV4ID0gYWN0aXZlSW5kZXhCdWZmZXIgPiBpbmRleCA/IGFjdGl2ZUluZGV4QnVmZmVyICsgMSA6IGFjdGl2ZUluZGV4QnVmZmVyO1xuICB2YXIgc2xpZGVzQnVmZmVyID0gW107XG5cbiAgZm9yICh2YXIgaSA9IGJhc2VMZW5ndGggLSAxOyBpID49IGluZGV4OyBpIC09IDEpIHtcbiAgICB2YXIgY3VycmVudFNsaWRlID0gc3dpcGVyLnNsaWRlcy5lcShpKTtcbiAgICBjdXJyZW50U2xpZGUucmVtb3ZlKCk7XG4gICAgc2xpZGVzQnVmZmVyLnVuc2hpZnQoY3VycmVudFNsaWRlKTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygc2xpZGVzID09PSAnb2JqZWN0JyAmJiAnbGVuZ3RoJyBpbiBzbGlkZXMpIHtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgc2xpZGVzLmxlbmd0aDsgX2kgKz0gMSkge1xuICAgICAgaWYgKHNsaWRlc1tfaV0pICR3cmFwcGVyRWwuYXBwZW5kKHNsaWRlc1tfaV0pO1xuICAgIH1cblxuICAgIG5ld0FjdGl2ZUluZGV4ID0gYWN0aXZlSW5kZXhCdWZmZXIgPiBpbmRleCA/IGFjdGl2ZUluZGV4QnVmZmVyICsgc2xpZGVzLmxlbmd0aCA6IGFjdGl2ZUluZGV4QnVmZmVyO1xuICB9IGVsc2Uge1xuICAgICR3cmFwcGVyRWwuYXBwZW5kKHNsaWRlcyk7XG4gIH1cblxuICBmb3IgKHZhciBfaTIgPSAwOyBfaTIgPCBzbGlkZXNCdWZmZXIubGVuZ3RoOyBfaTIgKz0gMSkge1xuICAgICR3cmFwcGVyRWwuYXBwZW5kKHNsaWRlc0J1ZmZlcltfaTJdKTtcbiAgfVxuXG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIHN3aXBlci5sb29wQ3JlYXRlKCk7XG4gIH1cblxuICBpZiAoIShwYXJhbXMub2JzZXJ2ZXIgJiYgc3dpcGVyLnN1cHBvcnQub2JzZXJ2ZXIpKSB7XG4gICAgc3dpcGVyLnVwZGF0ZSgpO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgc3dpcGVyLnNsaWRlVG8obmV3QWN0aXZlSW5kZXggKyBzd2lwZXIubG9vcGVkU2xpZGVzLCAwLCBmYWxzZSk7XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLnNsaWRlVG8obmV3QWN0aXZlSW5kZXgsIDAsIGZhbHNlKTtcbiAgfVxufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlbW92ZVNsaWRlKHNsaWRlc0luZGV4ZXMpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsLFxuICAgICAgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gIHZhciBhY3RpdmVJbmRleEJ1ZmZlciA9IGFjdGl2ZUluZGV4O1xuXG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIGFjdGl2ZUluZGV4QnVmZmVyIC09IHN3aXBlci5sb29wZWRTbGlkZXM7XG4gICAgc3dpcGVyLmxvb3BEZXN0cm95KCk7XG4gICAgc3dpcGVyLnNsaWRlcyA9ICR3cmFwcGVyRWwuY2hpbGRyZW4oXCIuXCIgKyBwYXJhbXMuc2xpZGVDbGFzcyk7XG4gIH1cblxuICB2YXIgbmV3QWN0aXZlSW5kZXggPSBhY3RpdmVJbmRleEJ1ZmZlcjtcbiAgdmFyIGluZGV4VG9SZW1vdmU7XG5cbiAgaWYgKHR5cGVvZiBzbGlkZXNJbmRleGVzID09PSAnb2JqZWN0JyAmJiAnbGVuZ3RoJyBpbiBzbGlkZXNJbmRleGVzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGlkZXNJbmRleGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpbmRleFRvUmVtb3ZlID0gc2xpZGVzSW5kZXhlc1tpXTtcbiAgICAgIGlmIChzd2lwZXIuc2xpZGVzW2luZGV4VG9SZW1vdmVdKSBzd2lwZXIuc2xpZGVzLmVxKGluZGV4VG9SZW1vdmUpLnJlbW92ZSgpO1xuICAgICAgaWYgKGluZGV4VG9SZW1vdmUgPCBuZXdBY3RpdmVJbmRleCkgbmV3QWN0aXZlSW5kZXggLT0gMTtcbiAgICB9XG5cbiAgICBuZXdBY3RpdmVJbmRleCA9IE1hdGgubWF4KG5ld0FjdGl2ZUluZGV4LCAwKTtcbiAgfSBlbHNlIHtcbiAgICBpbmRleFRvUmVtb3ZlID0gc2xpZGVzSW5kZXhlcztcbiAgICBpZiAoc3dpcGVyLnNsaWRlc1tpbmRleFRvUmVtb3ZlXSkgc3dpcGVyLnNsaWRlcy5lcShpbmRleFRvUmVtb3ZlKS5yZW1vdmUoKTtcbiAgICBpZiAoaW5kZXhUb1JlbW92ZSA8IG5ld0FjdGl2ZUluZGV4KSBuZXdBY3RpdmVJbmRleCAtPSAxO1xuICAgIG5ld0FjdGl2ZUluZGV4ID0gTWF0aC5tYXgobmV3QWN0aXZlSW5kZXgsIDApO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgc3dpcGVyLmxvb3BDcmVhdGUoKTtcbiAgfVxuXG4gIGlmICghKHBhcmFtcy5vYnNlcnZlciAmJiBzd2lwZXIuc3VwcG9ydC5vYnNlcnZlcikpIHtcbiAgICBzd2lwZXIudXBkYXRlKCk7XG4gIH1cblxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBzd2lwZXIuc2xpZGVUbyhuZXdBY3RpdmVJbmRleCArIHN3aXBlci5sb29wZWRTbGlkZXMsIDAsIGZhbHNlKTtcbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIuc2xpZGVUbyhuZXdBY3RpdmVJbmRleCwgMCwgZmFsc2UpO1xuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVtb3ZlQWxsU2xpZGVzKCkge1xuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIHNsaWRlc0luZGV4ZXMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN3aXBlci5zbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBzbGlkZXNJbmRleGVzLnB1c2goaSk7XG4gIH1cblxuICBzd2lwZXIucmVtb3ZlU2xpZGUoc2xpZGVzSW5kZXhlcyk7XG59IiwiaW1wb3J0IHNldEJyZWFrcG9pbnQgZnJvbSAnLi9zZXRCcmVha3BvaW50JztcbmltcG9ydCBnZXRCcmVha3BvaW50IGZyb20gJy4vZ2V0QnJlYWtwb2ludCc7XG5leHBvcnQgZGVmYXVsdCB7XG4gIHNldEJyZWFrcG9pbnQ6IHNldEJyZWFrcG9pbnQsXG4gIGdldEJyZWFrcG9pbnQ6IGdldEJyZWFrcG9pbnRcbn07IiwiaW1wb3J0IHsgZXh0ZW5kIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0QnJlYWtwb2ludCgpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleCxcbiAgICAgIGluaXRpYWxpemVkID0gc3dpcGVyLmluaXRpYWxpemVkLFxuICAgICAgX3N3aXBlciRsb29wZWRTbGlkZXMgPSBzd2lwZXIubG9vcGVkU2xpZGVzLFxuICAgICAgbG9vcGVkU2xpZGVzID0gX3N3aXBlciRsb29wZWRTbGlkZXMgPT09IHZvaWQgMCA/IDAgOiBfc3dpcGVyJGxvb3BlZFNsaWRlcyxcbiAgICAgIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMsXG4gICAgICAkZWwgPSBzd2lwZXIuJGVsO1xuICB2YXIgYnJlYWtwb2ludHMgPSBwYXJhbXMuYnJlYWtwb2ludHM7XG4gIGlmICghYnJlYWtwb2ludHMgfHwgYnJlYWtwb2ludHMgJiYgT2JqZWN0LmtleXMoYnJlYWtwb2ludHMpLmxlbmd0aCA9PT0gMCkgcmV0dXJuOyAvLyBHZXQgYnJlYWtwb2ludCBmb3Igd2luZG93IHdpZHRoIGFuZCB1cGRhdGUgcGFyYW1ldGVyc1xuXG4gIHZhciBicmVha3BvaW50ID0gc3dpcGVyLmdldEJyZWFrcG9pbnQoYnJlYWtwb2ludHMpO1xuXG4gIGlmIChicmVha3BvaW50ICYmIHN3aXBlci5jdXJyZW50QnJlYWtwb2ludCAhPT0gYnJlYWtwb2ludCkge1xuICAgIHZhciBicmVha3BvaW50T25seVBhcmFtcyA9IGJyZWFrcG9pbnQgaW4gYnJlYWtwb2ludHMgPyBicmVha3BvaW50c1ticmVha3BvaW50XSA6IHVuZGVmaW5lZDtcblxuICAgIGlmIChicmVha3BvaW50T25seVBhcmFtcykge1xuICAgICAgWydzbGlkZXNQZXJWaWV3JywgJ3NwYWNlQmV0d2VlbicsICdzbGlkZXNQZXJHcm91cCcsICdzbGlkZXNQZXJHcm91cFNraXAnLCAnc2xpZGVzUGVyQ29sdW1uJ10uZm9yRWFjaChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgdmFyIHBhcmFtVmFsdWUgPSBicmVha3BvaW50T25seVBhcmFtc1twYXJhbV07XG4gICAgICAgIGlmICh0eXBlb2YgcGFyYW1WYWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybjtcblxuICAgICAgICBpZiAocGFyYW0gPT09ICdzbGlkZXNQZXJWaWV3JyAmJiAocGFyYW1WYWx1ZSA9PT0gJ0FVVE8nIHx8IHBhcmFtVmFsdWUgPT09ICdhdXRvJykpIHtcbiAgICAgICAgICBicmVha3BvaW50T25seVBhcmFtc1twYXJhbV0gPSAnYXV0byc7XG4gICAgICAgIH0gZWxzZSBpZiAocGFyYW0gPT09ICdzbGlkZXNQZXJWaWV3Jykge1xuICAgICAgICAgIGJyZWFrcG9pbnRPbmx5UGFyYW1zW3BhcmFtXSA9IHBhcnNlRmxvYXQocGFyYW1WYWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYnJlYWtwb2ludE9ubHlQYXJhbXNbcGFyYW1dID0gcGFyc2VJbnQocGFyYW1WYWx1ZSwgMTApO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgYnJlYWtwb2ludFBhcmFtcyA9IGJyZWFrcG9pbnRPbmx5UGFyYW1zIHx8IHN3aXBlci5vcmlnaW5hbFBhcmFtcztcbiAgICB2YXIgd2FzTXVsdGlSb3cgPSBwYXJhbXMuc2xpZGVzUGVyQ29sdW1uID4gMTtcbiAgICB2YXIgaXNNdWx0aVJvdyA9IGJyZWFrcG9pbnRQYXJhbXMuc2xpZGVzUGVyQ29sdW1uID4gMTtcblxuICAgIGlmICh3YXNNdWx0aVJvdyAmJiAhaXNNdWx0aVJvdykge1xuICAgICAgJGVsLnJlbW92ZUNsYXNzKHBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzICsgXCJtdWx0aXJvdyBcIiArIHBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzICsgXCJtdWx0aXJvdy1jb2x1bW5cIik7XG4gICAgICBzd2lwZXIuZW1pdENvbnRhaW5lckNsYXNzZXMoKTtcbiAgICB9IGVsc2UgaWYgKCF3YXNNdWx0aVJvdyAmJiBpc011bHRpUm93KSB7XG4gICAgICAkZWwuYWRkQ2xhc3MocGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MgKyBcIm11bHRpcm93XCIpO1xuXG4gICAgICBpZiAoYnJlYWtwb2ludFBhcmFtcy5zbGlkZXNQZXJDb2x1bW5GaWxsID09PSAnY29sdW1uJykge1xuICAgICAgICAkZWwuYWRkQ2xhc3MocGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MgKyBcIm11bHRpcm93LWNvbHVtblwiKTtcbiAgICAgIH1cblxuICAgICAgc3dpcGVyLmVtaXRDb250YWluZXJDbGFzc2VzKCk7XG4gICAgfVxuXG4gICAgdmFyIGRpcmVjdGlvbkNoYW5nZWQgPSBicmVha3BvaW50UGFyYW1zLmRpcmVjdGlvbiAmJiBicmVha3BvaW50UGFyYW1zLmRpcmVjdGlvbiAhPT0gcGFyYW1zLmRpcmVjdGlvbjtcbiAgICB2YXIgbmVlZHNSZUxvb3AgPSBwYXJhbXMubG9vcCAmJiAoYnJlYWtwb2ludFBhcmFtcy5zbGlkZXNQZXJWaWV3ICE9PSBwYXJhbXMuc2xpZGVzUGVyVmlldyB8fCBkaXJlY3Rpb25DaGFuZ2VkKTtcblxuICAgIGlmIChkaXJlY3Rpb25DaGFuZ2VkICYmIGluaXRpYWxpemVkKSB7XG4gICAgICBzd2lwZXIuY2hhbmdlRGlyZWN0aW9uKCk7XG4gICAgfVxuXG4gICAgZXh0ZW5kKHN3aXBlci5wYXJhbXMsIGJyZWFrcG9pbnRQYXJhbXMpO1xuICAgIGV4dGVuZChzd2lwZXIsIHtcbiAgICAgIGFsbG93VG91Y2hNb3ZlOiBzd2lwZXIucGFyYW1zLmFsbG93VG91Y2hNb3ZlLFxuICAgICAgYWxsb3dTbGlkZU5leHQ6IHN3aXBlci5wYXJhbXMuYWxsb3dTbGlkZU5leHQsXG4gICAgICBhbGxvd1NsaWRlUHJldjogc3dpcGVyLnBhcmFtcy5hbGxvd1NsaWRlUHJldlxuICAgIH0pO1xuICAgIHN3aXBlci5jdXJyZW50QnJlYWtwb2ludCA9IGJyZWFrcG9pbnQ7XG5cbiAgICBpZiAobmVlZHNSZUxvb3AgJiYgaW5pdGlhbGl6ZWQpIHtcbiAgICAgIHN3aXBlci5sb29wRGVzdHJveSgpO1xuICAgICAgc3dpcGVyLmxvb3BDcmVhdGUoKTtcbiAgICAgIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcbiAgICAgIHN3aXBlci5zbGlkZVRvKGFjdGl2ZUluZGV4IC0gbG9vcGVkU2xpZGVzICsgc3dpcGVyLmxvb3BlZFNsaWRlcywgMCwgZmFsc2UpO1xuICAgIH1cblxuICAgIHN3aXBlci5lbWl0KCdicmVha3BvaW50JywgYnJlYWtwb2ludFBhcmFtcyk7XG4gIH1cbn0iLCJpbXBvcnQgeyBnZXRXaW5kb3cgfSBmcm9tICdzc3Itd2luZG93JztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEJyZWFrcG9pbnRzKGJyZWFrcG9pbnRzKSB7XG4gIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coKTsgLy8gR2V0IGJyZWFrcG9pbnQgZm9yIHdpbmRvdyB3aWR0aFxuXG4gIGlmICghYnJlYWtwb2ludHMpIHJldHVybiB1bmRlZmluZWQ7XG4gIHZhciBicmVha3BvaW50ID0gZmFsc2U7XG4gIHZhciBwb2ludHMgPSBPYmplY3Qua2V5cyhicmVha3BvaW50cykubWFwKGZ1bmN0aW9uIChwb2ludCkge1xuICAgIGlmICh0eXBlb2YgcG9pbnQgPT09ICdzdHJpbmcnICYmIHBvaW50LmluZGV4T2YoJ0AnKSA9PT0gMCkge1xuICAgICAgdmFyIG1pblJhdGlvID0gcGFyc2VGbG9hdChwb2ludC5zdWJzdHIoMSkpO1xuICAgICAgdmFyIHZhbHVlID0gd2luZG93LmlubmVySGVpZ2h0ICogbWluUmF0aW87XG4gICAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgIHBvaW50OiBwb2ludFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IHBvaW50LFxuICAgICAgcG9pbnQ6IHBvaW50XG4gICAgfTtcbiAgfSk7XG4gIHBvaW50cy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KGEudmFsdWUsIDEwKSAtIHBhcnNlSW50KGIudmFsdWUsIDEwKTtcbiAgfSk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwb2ludHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB2YXIgX3BvaW50cyRpID0gcG9pbnRzW2ldLFxuICAgICAgICBwb2ludCA9IF9wb2ludHMkaS5wb2ludCxcbiAgICAgICAgdmFsdWUgPSBfcG9pbnRzJGkudmFsdWU7XG5cbiAgICBpZiAodmFsdWUgPD0gd2luZG93LmlubmVyV2lkdGgpIHtcbiAgICAgIGJyZWFrcG9pbnQgPSBwb2ludDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnJlYWtwb2ludCB8fCAnbWF4Jztcbn0iLCJpbXBvcnQgYWRkQ2xhc3NlcyBmcm9tICcuL2FkZENsYXNzZXMnO1xuaW1wb3J0IHJlbW92ZUNsYXNzZXMgZnJvbSAnLi9yZW1vdmVDbGFzc2VzJztcbmV4cG9ydCBkZWZhdWx0IHtcbiAgYWRkQ2xhc3NlczogYWRkQ2xhc3NlcyxcbiAgcmVtb3ZlQ2xhc3NlczogcmVtb3ZlQ2xhc3Nlc1xufTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGRDbGFzc2VzKCkge1xuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIGNsYXNzTmFtZXMgPSBzd2lwZXIuY2xhc3NOYW1lcyxcbiAgICAgIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMsXG4gICAgICBydGwgPSBzd2lwZXIucnRsLFxuICAgICAgJGVsID0gc3dpcGVyLiRlbCxcbiAgICAgIGRldmljZSA9IHN3aXBlci5kZXZpY2U7XG4gIHZhciBzdWZmaXhlcyA9IFtdO1xuICBzdWZmaXhlcy5wdXNoKCdpbml0aWFsaXplZCcpO1xuICBzdWZmaXhlcy5wdXNoKHBhcmFtcy5kaXJlY3Rpb24pO1xuXG4gIGlmIChwYXJhbXMuZnJlZU1vZGUpIHtcbiAgICBzdWZmaXhlcy5wdXNoKCdmcmVlLW1vZGUnKTtcbiAgfVxuXG4gIGlmIChwYXJhbXMuYXV0b0hlaWdodCkge1xuICAgIHN1ZmZpeGVzLnB1c2goJ2F1dG9oZWlnaHQnKTtcbiAgfVxuXG4gIGlmIChydGwpIHtcbiAgICBzdWZmaXhlcy5wdXNoKCdydGwnKTtcbiAgfVxuXG4gIGlmIChwYXJhbXMuc2xpZGVzUGVyQ29sdW1uID4gMSkge1xuICAgIHN1ZmZpeGVzLnB1c2goJ211bHRpcm93Jyk7XG5cbiAgICBpZiAocGFyYW1zLnNsaWRlc1BlckNvbHVtbkZpbGwgPT09ICdjb2x1bW4nKSB7XG4gICAgICBzdWZmaXhlcy5wdXNoKCdtdWx0aXJvdy1jb2x1bW4nKTtcbiAgICB9XG4gIH1cblxuICBpZiAoZGV2aWNlLmFuZHJvaWQpIHtcbiAgICBzdWZmaXhlcy5wdXNoKCdhbmRyb2lkJyk7XG4gIH1cblxuICBpZiAoZGV2aWNlLmlvcykge1xuICAgIHN1ZmZpeGVzLnB1c2goJ2lvcycpO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgc3VmZml4ZXMucHVzaCgnY3NzLW1vZGUnKTtcbiAgfVxuXG4gIHN1ZmZpeGVzLmZvckVhY2goZnVuY3Rpb24gKHN1ZmZpeCkge1xuICAgIGNsYXNzTmFtZXMucHVzaChwYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcyArIHN1ZmZpeCk7XG4gIH0pO1xuICAkZWwuYWRkQ2xhc3MoY2xhc3NOYW1lcy5qb2luKCcgJykpO1xuICBzd2lwZXIuZW1pdENvbnRhaW5lckNsYXNzZXMoKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZW1vdmVDbGFzc2VzKCkge1xuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyICRlbCA9IHN3aXBlci4kZWwsXG4gICAgICBjbGFzc05hbWVzID0gc3dpcGVyLmNsYXNzTmFtZXM7XG4gICRlbC5yZW1vdmVDbGFzcyhjbGFzc05hbWVzLmpvaW4oJyAnKSk7XG4gIHN3aXBlci5lbWl0Q29udGFpbmVyQ2xhc3NlcygpO1xufSIsImltcG9ydCBsb2FkSW1hZ2UgZnJvbSAnLi9sb2FkSW1hZ2UnO1xuaW1wb3J0IHByZWxvYWRJbWFnZXMgZnJvbSAnLi9wcmVsb2FkSW1hZ2VzJztcbmV4cG9ydCBkZWZhdWx0IHtcbiAgbG9hZEltYWdlOiBsb2FkSW1hZ2UsXG4gIHByZWxvYWRJbWFnZXM6IHByZWxvYWRJbWFnZXNcbn07IiwiaW1wb3J0IHsgZ2V0V2luZG93IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG5pbXBvcnQgJCBmcm9tICcuLi8uLi8uLi91dGlscy9kb20nO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbG9hZEltYWdlKGltYWdlRWwsIHNyYywgc3Jjc2V0LCBzaXplcywgY2hlY2tGb3JDb21wbGV0ZSwgY2FsbGJhY2spIHtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICB2YXIgaW1hZ2U7XG5cbiAgZnVuY3Rpb24gb25SZWFkeSgpIHtcbiAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKCk7XG4gIH1cblxuICB2YXIgaXNQaWN0dXJlID0gJChpbWFnZUVsKS5wYXJlbnQoJ3BpY3R1cmUnKVswXTtcblxuICBpZiAoIWlzUGljdHVyZSAmJiAoIWltYWdlRWwuY29tcGxldGUgfHwgIWNoZWNrRm9yQ29tcGxldGUpKSB7XG4gICAgaWYgKHNyYykge1xuICAgICAgaW1hZ2UgPSBuZXcgd2luZG93LkltYWdlKCk7XG4gICAgICBpbWFnZS5vbmxvYWQgPSBvblJlYWR5O1xuICAgICAgaW1hZ2Uub25lcnJvciA9IG9uUmVhZHk7XG5cbiAgICAgIGlmIChzaXplcykge1xuICAgICAgICBpbWFnZS5zaXplcyA9IHNpemVzO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3Jjc2V0KSB7XG4gICAgICAgIGltYWdlLnNyY3NldCA9IHNyY3NldDtcbiAgICAgIH1cblxuICAgICAgaWYgKHNyYykge1xuICAgICAgICBpbWFnZS5zcmMgPSBzcmM7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG9uUmVhZHkoKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gaW1hZ2UgYWxyZWFkeSBsb2FkZWQuLi5cbiAgICBvblJlYWR5KCk7XG4gIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwcmVsb2FkSW1hZ2VzKCkge1xuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgc3dpcGVyLmltYWdlc1RvTG9hZCA9IHN3aXBlci4kZWwuZmluZCgnaW1nJyk7XG5cbiAgZnVuY3Rpb24gb25SZWFkeSgpIHtcbiAgICBpZiAodHlwZW9mIHN3aXBlciA9PT0gJ3VuZGVmaW5lZCcgfHwgc3dpcGVyID09PSBudWxsIHx8ICFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgIGlmIChzd2lwZXIuaW1hZ2VzTG9hZGVkICE9PSB1bmRlZmluZWQpIHN3aXBlci5pbWFnZXNMb2FkZWQgKz0gMTtcblxuICAgIGlmIChzd2lwZXIuaW1hZ2VzTG9hZGVkID09PSBzd2lwZXIuaW1hZ2VzVG9Mb2FkLmxlbmd0aCkge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMudXBkYXRlT25JbWFnZXNSZWFkeSkgc3dpcGVyLnVwZGF0ZSgpO1xuICAgICAgc3dpcGVyLmVtaXQoJ2ltYWdlc1JlYWR5Jyk7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzd2lwZXIuaW1hZ2VzVG9Mb2FkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdmFyIGltYWdlRWwgPSBzd2lwZXIuaW1hZ2VzVG9Mb2FkW2ldO1xuICAgIHN3aXBlci5sb2FkSW1hZ2UoaW1hZ2VFbCwgaW1hZ2VFbC5jdXJyZW50U3JjIHx8IGltYWdlRWwuZ2V0QXR0cmlidXRlKCdzcmMnKSwgaW1hZ2VFbC5zcmNzZXQgfHwgaW1hZ2VFbC5nZXRBdHRyaWJ1dGUoJ3NyY3NldCcpLCBpbWFnZUVsLnNpemVzIHx8IGltYWdlRWwuZ2V0QXR0cmlidXRlKCdzaXplcycpLCB0cnVlLCBvblJlYWR5KTtcbiAgfVxufSIsImZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbmltcG9ydCAkIGZyb20gJy4uLy4uL3V0aWxzL2RvbSc7XG5pbXBvcnQgeyBleHRlbmQsIGJpbmRNb2R1bGVNZXRob2RzIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xudmFyIFBhZ2luYXRpb24gPSB7XG4gIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgIC8vIFJlbmRlciB8fCBVcGRhdGUgUGFnaW5hdGlvbiBidWxsZXRzL2l0ZW1zXG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHJ0bCA9IHN3aXBlci5ydGw7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICBpZiAoIXBhcmFtcy5lbCB8fCAhc3dpcGVyLnBhZ2luYXRpb24uZWwgfHwgIXN3aXBlci5wYWdpbmF0aW9uLiRlbCB8fCBzd2lwZXIucGFnaW5hdGlvbi4kZWwubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgdmFyIHNsaWRlc0xlbmd0aCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCA6IHN3aXBlci5zbGlkZXMubGVuZ3RoO1xuICAgIHZhciAkZWwgPSBzd2lwZXIucGFnaW5hdGlvbi4kZWw7IC8vIEN1cnJlbnQvVG90YWxcblxuICAgIHZhciBjdXJyZW50O1xuICAgIHZhciB0b3RhbCA9IHN3aXBlci5wYXJhbXMubG9vcCA/IE1hdGguY2VpbCgoc2xpZGVzTGVuZ3RoIC0gc3dpcGVyLmxvb3BlZFNsaWRlcyAqIDIpIC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCkgOiBzd2lwZXIuc25hcEdyaWQubGVuZ3RoO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgY3VycmVudCA9IE1hdGguY2VpbCgoc3dpcGVyLmFjdGl2ZUluZGV4IC0gc3dpcGVyLmxvb3BlZFNsaWRlcykgLyBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwKTtcblxuICAgICAgaWYgKGN1cnJlbnQgPiBzbGlkZXNMZW5ndGggLSAxIC0gc3dpcGVyLmxvb3BlZFNsaWRlcyAqIDIpIHtcbiAgICAgICAgY3VycmVudCAtPSBzbGlkZXNMZW5ndGggLSBzd2lwZXIubG9vcGVkU2xpZGVzICogMjtcbiAgICAgIH1cblxuICAgICAgaWYgKGN1cnJlbnQgPiB0b3RhbCAtIDEpIGN1cnJlbnQgLT0gdG90YWw7XG4gICAgICBpZiAoY3VycmVudCA8IDAgJiYgc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uVHlwZSAhPT0gJ2J1bGxldHMnKSBjdXJyZW50ID0gdG90YWwgKyBjdXJyZW50O1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHN3aXBlci5zbmFwSW5kZXggIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjdXJyZW50ID0gc3dpcGVyLnNuYXBJbmRleDtcbiAgICB9IGVsc2Uge1xuICAgICAgY3VycmVudCA9IHN3aXBlci5hY3RpdmVJbmRleCB8fCAwO1xuICAgIH0gLy8gVHlwZXNcblxuXG4gICAgaWYgKHBhcmFtcy50eXBlID09PSAnYnVsbGV0cycgJiYgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cyAmJiBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzLmxlbmd0aCA+IDApIHtcbiAgICAgIHZhciBidWxsZXRzID0gc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cztcbiAgICAgIHZhciBmaXJzdEluZGV4O1xuICAgICAgdmFyIGxhc3RJbmRleDtcbiAgICAgIHZhciBtaWRJbmRleDtcblxuICAgICAgaWYgKHBhcmFtcy5keW5hbWljQnVsbGV0cykge1xuICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRTaXplID0gYnVsbGV0cy5lcSgwKVtzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnb3V0ZXJXaWR0aCcgOiAnb3V0ZXJIZWlnaHQnXSh0cnVlKTtcbiAgICAgICAgJGVsLmNzcyhzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnd2lkdGgnIDogJ2hlaWdodCcsIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldFNpemUgKiAocGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyArIDQpICsgXCJweFwiKTtcblxuICAgICAgICBpZiAocGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyA+IDEgJiYgc3dpcGVyLnByZXZpb3VzSW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLmR5bmFtaWNCdWxsZXRJbmRleCArPSBjdXJyZW50IC0gc3dpcGVyLnByZXZpb3VzSW5kZXg7XG5cbiAgICAgICAgICBpZiAoc3dpcGVyLnBhZ2luYXRpb24uZHluYW1pY0J1bGxldEluZGV4ID4gcGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyAtIDEpIHtcbiAgICAgICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLmR5bmFtaWNCdWxsZXRJbmRleCA9IHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgLSAxO1xuICAgICAgICAgIH0gZWxzZSBpZiAoc3dpcGVyLnBhZ2luYXRpb24uZHluYW1pY0J1bGxldEluZGV4IDwgMCkge1xuICAgICAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24uZHluYW1pY0J1bGxldEluZGV4ID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmaXJzdEluZGV4ID0gY3VycmVudCAtIHN3aXBlci5wYWdpbmF0aW9uLmR5bmFtaWNCdWxsZXRJbmRleDtcbiAgICAgICAgbGFzdEluZGV4ID0gZmlyc3RJbmRleCArIChNYXRoLm1pbihidWxsZXRzLmxlbmd0aCwgcGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cykgLSAxKTtcbiAgICAgICAgbWlkSW5kZXggPSAobGFzdEluZGV4ICsgZmlyc3RJbmRleCkgLyAyO1xuICAgICAgfVxuXG4gICAgICBidWxsZXRzLnJlbW92ZUNsYXNzKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyArIFwiIFwiICsgcGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzICsgXCItbmV4dCBcIiArIHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyArIFwiLW5leHQtbmV4dCBcIiArIHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyArIFwiLXByZXYgXCIgKyBwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MgKyBcIi1wcmV2LXByZXYgXCIgKyBwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MgKyBcIi1tYWluXCIpO1xuXG4gICAgICBpZiAoJGVsLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgYnVsbGV0cy5lYWNoKGZ1bmN0aW9uIChidWxsZXQpIHtcbiAgICAgICAgICB2YXIgJGJ1bGxldCA9ICQoYnVsbGV0KTtcbiAgICAgICAgICB2YXIgYnVsbGV0SW5kZXggPSAkYnVsbGV0LmluZGV4KCk7XG5cbiAgICAgICAgICBpZiAoYnVsbGV0SW5kZXggPT09IGN1cnJlbnQpIHtcbiAgICAgICAgICAgICRidWxsZXQuYWRkQ2xhc3MocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocGFyYW1zLmR5bmFtaWNCdWxsZXRzKSB7XG4gICAgICAgICAgICBpZiAoYnVsbGV0SW5kZXggPj0gZmlyc3RJbmRleCAmJiBidWxsZXRJbmRleCA8PSBsYXN0SW5kZXgpIHtcbiAgICAgICAgICAgICAgJGJ1bGxldC5hZGRDbGFzcyhwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MgKyBcIi1tYWluXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoYnVsbGV0SW5kZXggPT09IGZpcnN0SW5kZXgpIHtcbiAgICAgICAgICAgICAgJGJ1bGxldC5wcmV2KCkuYWRkQ2xhc3MocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzICsgXCItcHJldlwiKS5wcmV2KCkuYWRkQ2xhc3MocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzICsgXCItcHJldi1wcmV2XCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoYnVsbGV0SW5kZXggPT09IGxhc3RJbmRleCkge1xuICAgICAgICAgICAgICAkYnVsbGV0Lm5leHQoKS5hZGRDbGFzcyhwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MgKyBcIi1uZXh0XCIpLm5leHQoKS5hZGRDbGFzcyhwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MgKyBcIi1uZXh0LW5leHRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciAkYnVsbGV0ID0gYnVsbGV0cy5lcShjdXJyZW50KTtcbiAgICAgICAgdmFyIGJ1bGxldEluZGV4ID0gJGJ1bGxldC5pbmRleCgpO1xuICAgICAgICAkYnVsbGV0LmFkZENsYXNzKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyk7XG5cbiAgICAgICAgaWYgKHBhcmFtcy5keW5hbWljQnVsbGV0cykge1xuICAgICAgICAgIHZhciAkZmlyc3REaXNwbGF5ZWRCdWxsZXQgPSBidWxsZXRzLmVxKGZpcnN0SW5kZXgpO1xuICAgICAgICAgIHZhciAkbGFzdERpc3BsYXllZEJ1bGxldCA9IGJ1bGxldHMuZXEobGFzdEluZGV4KTtcblxuICAgICAgICAgIGZvciAodmFyIGkgPSBmaXJzdEluZGV4OyBpIDw9IGxhc3RJbmRleDsgaSArPSAxKSB7XG4gICAgICAgICAgICBidWxsZXRzLmVxKGkpLmFkZENsYXNzKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyArIFwiLW1haW5cIik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgICAgICAgaWYgKGJ1bGxldEluZGV4ID49IGJ1bGxldHMubGVuZ3RoIC0gcGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cykge1xuICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHM7IF9pID49IDA7IF9pIC09IDEpIHtcbiAgICAgICAgICAgICAgICBidWxsZXRzLmVxKGJ1bGxldHMubGVuZ3RoIC0gX2kpLmFkZENsYXNzKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyArIFwiLW1haW5cIik7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBidWxsZXRzLmVxKGJ1bGxldHMubGVuZ3RoIC0gcGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyAtIDEpLmFkZENsYXNzKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyArIFwiLXByZXZcIik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAkZmlyc3REaXNwbGF5ZWRCdWxsZXQucHJldigpLmFkZENsYXNzKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyArIFwiLXByZXZcIikucHJldigpLmFkZENsYXNzKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyArIFwiLXByZXYtcHJldlwiKTtcbiAgICAgICAgICAgICAgJGxhc3REaXNwbGF5ZWRCdWxsZXQubmV4dCgpLmFkZENsYXNzKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyArIFwiLW5leHRcIikubmV4dCgpLmFkZENsYXNzKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyArIFwiLW5leHQtbmV4dFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJGZpcnN0RGlzcGxheWVkQnVsbGV0LnByZXYoKS5hZGRDbGFzcyhwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MgKyBcIi1wcmV2XCIpLnByZXYoKS5hZGRDbGFzcyhwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MgKyBcIi1wcmV2LXByZXZcIik7XG4gICAgICAgICAgICAkbGFzdERpc3BsYXllZEJ1bGxldC5uZXh0KCkuYWRkQ2xhc3MocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzICsgXCItbmV4dFwiKS5uZXh0KCkuYWRkQ2xhc3MocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzICsgXCItbmV4dC1uZXh0XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAocGFyYW1zLmR5bmFtaWNCdWxsZXRzKSB7XG4gICAgICAgIHZhciBkeW5hbWljQnVsbGV0c0xlbmd0aCA9IE1hdGgubWluKGJ1bGxldHMubGVuZ3RoLCBwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzICsgNCk7XG4gICAgICAgIHZhciBidWxsZXRzT2Zmc2V0ID0gKHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldFNpemUgKiBkeW5hbWljQnVsbGV0c0xlbmd0aCAtIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldFNpemUpIC8gMiAtIG1pZEluZGV4ICogc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0U2l6ZTtcbiAgICAgICAgdmFyIG9mZnNldFByb3AgPSBydGwgPyAncmlnaHQnIDogJ2xlZnQnO1xuICAgICAgICBidWxsZXRzLmNzcyhzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBvZmZzZXRQcm9wIDogJ3RvcCcsIGJ1bGxldHNPZmZzZXQgKyBcInB4XCIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2ZyYWN0aW9uJykge1xuICAgICAgJGVsLmZpbmQoXCIuXCIgKyBwYXJhbXMuY3VycmVudENsYXNzKS50ZXh0KHBhcmFtcy5mb3JtYXRGcmFjdGlvbkN1cnJlbnQoY3VycmVudCArIDEpKTtcbiAgICAgICRlbC5maW5kKFwiLlwiICsgcGFyYW1zLnRvdGFsQ2xhc3MpLnRleHQocGFyYW1zLmZvcm1hdEZyYWN0aW9uVG90YWwodG90YWwpKTtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdwcm9ncmVzc2JhcicpIHtcbiAgICAgIHZhciBwcm9ncmVzc2JhckRpcmVjdGlvbjtcblxuICAgICAgaWYgKHBhcmFtcy5wcm9ncmVzc2Jhck9wcG9zaXRlKSB7XG4gICAgICAgIHByb2dyZXNzYmFyRGlyZWN0aW9uID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ3ZlcnRpY2FsJyA6ICdob3Jpem9udGFsJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2dyZXNzYmFyRGlyZWN0aW9uID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ2hvcml6b250YWwnIDogJ3ZlcnRpY2FsJztcbiAgICAgIH1cblxuICAgICAgdmFyIHNjYWxlID0gKGN1cnJlbnQgKyAxKSAvIHRvdGFsO1xuICAgICAgdmFyIHNjYWxlWCA9IDE7XG4gICAgICB2YXIgc2NhbGVZID0gMTtcblxuICAgICAgaWYgKHByb2dyZXNzYmFyRGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgc2NhbGVYID0gc2NhbGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzY2FsZVkgPSBzY2FsZTtcbiAgICAgIH1cblxuICAgICAgJGVsLmZpbmQoXCIuXCIgKyBwYXJhbXMucHJvZ3Jlc3NiYXJGaWxsQ2xhc3MpLnRyYW5zZm9ybShcInRyYW5zbGF0ZTNkKDAsMCwwKSBzY2FsZVgoXCIgKyBzY2FsZVggKyBcIikgc2NhbGVZKFwiICsgc2NhbGVZICsgXCIpXCIpLnRyYW5zaXRpb24oc3dpcGVyLnBhcmFtcy5zcGVlZCk7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy50eXBlID09PSAnY3VzdG9tJyAmJiBwYXJhbXMucmVuZGVyQ3VzdG9tKSB7XG4gICAgICAkZWwuaHRtbChwYXJhbXMucmVuZGVyQ3VzdG9tKHN3aXBlciwgY3VycmVudCArIDEsIHRvdGFsKSk7XG4gICAgICBzd2lwZXIuZW1pdCgncGFnaW5hdGlvblJlbmRlcicsICRlbFswXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5lbWl0KCdwYWdpbmF0aW9uVXBkYXRlJywgJGVsWzBdKTtcbiAgICB9XG5cbiAgICAkZWxbc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHN3aXBlci5pc0xvY2tlZCA/ICdhZGRDbGFzcycgOiAncmVtb3ZlQ2xhc3MnXShwYXJhbXMubG9ja0NsYXNzKTtcbiAgfSxcbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgLy8gUmVuZGVyIENvbnRhaW5lclxuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb247XG4gICAgaWYgKCFwYXJhbXMuZWwgfHwgIXN3aXBlci5wYWdpbmF0aW9uLmVsIHx8ICFzd2lwZXIucGFnaW5hdGlvbi4kZWwgfHwgc3dpcGVyLnBhZ2luYXRpb24uJGVsLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIHZhciBzbGlkZXNMZW5ndGggPSBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCA/IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggOiBzd2lwZXIuc2xpZGVzLmxlbmd0aDtcbiAgICB2YXIgJGVsID0gc3dpcGVyLnBhZ2luYXRpb24uJGVsO1xuICAgIHZhciBwYWdpbmF0aW9uSFRNTCA9ICcnO1xuXG4gICAgaWYgKHBhcmFtcy50eXBlID09PSAnYnVsbGV0cycpIHtcbiAgICAgIHZhciBudW1iZXJPZkJ1bGxldHMgPSBzd2lwZXIucGFyYW1zLmxvb3AgPyBNYXRoLmNlaWwoKHNsaWRlc0xlbmd0aCAtIHN3aXBlci5sb29wZWRTbGlkZXMgKiAyKSAvIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXApIDogc3dpcGVyLnNuYXBHcmlkLmxlbmd0aDtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1iZXJPZkJ1bGxldHM7IGkgKz0gMSkge1xuICAgICAgICBpZiAocGFyYW1zLnJlbmRlckJ1bGxldCkge1xuICAgICAgICAgIHBhZ2luYXRpb25IVE1MICs9IHBhcmFtcy5yZW5kZXJCdWxsZXQuY2FsbChzd2lwZXIsIGksIHBhcmFtcy5idWxsZXRDbGFzcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGFnaW5hdGlvbkhUTUwgKz0gXCI8XCIgKyBwYXJhbXMuYnVsbGV0RWxlbWVudCArIFwiIGNsYXNzPVxcXCJcIiArIHBhcmFtcy5idWxsZXRDbGFzcyArIFwiXFxcIj48L1wiICsgcGFyYW1zLmJ1bGxldEVsZW1lbnQgKyBcIj5cIjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAkZWwuaHRtbChwYWdpbmF0aW9uSFRNTCk7XG4gICAgICBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzID0gJGVsLmZpbmQoXCIuXCIgKyBwYXJhbXMuYnVsbGV0Q2xhc3MpO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2ZyYWN0aW9uJykge1xuICAgICAgaWYgKHBhcmFtcy5yZW5kZXJGcmFjdGlvbikge1xuICAgICAgICBwYWdpbmF0aW9uSFRNTCA9IHBhcmFtcy5yZW5kZXJGcmFjdGlvbi5jYWxsKHN3aXBlciwgcGFyYW1zLmN1cnJlbnRDbGFzcywgcGFyYW1zLnRvdGFsQ2xhc3MpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFnaW5hdGlvbkhUTUwgPSBcIjxzcGFuIGNsYXNzPVxcXCJcIiArIHBhcmFtcy5jdXJyZW50Q2xhc3MgKyBcIlxcXCI+PC9zcGFuPlwiICsgJyAvICcgKyAoXCI8c3BhbiBjbGFzcz1cXFwiXCIgKyBwYXJhbXMudG90YWxDbGFzcyArIFwiXFxcIj48L3NwYW4+XCIpO1xuICAgICAgfVxuXG4gICAgICAkZWwuaHRtbChwYWdpbmF0aW9uSFRNTCk7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy50eXBlID09PSAncHJvZ3Jlc3NiYXInKSB7XG4gICAgICBpZiAocGFyYW1zLnJlbmRlclByb2dyZXNzYmFyKSB7XG4gICAgICAgIHBhZ2luYXRpb25IVE1MID0gcGFyYW1zLnJlbmRlclByb2dyZXNzYmFyLmNhbGwoc3dpcGVyLCBwYXJhbXMucHJvZ3Jlc3NiYXJGaWxsQ2xhc3MpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFnaW5hdGlvbkhUTUwgPSBcIjxzcGFuIGNsYXNzPVxcXCJcIiArIHBhcmFtcy5wcm9ncmVzc2JhckZpbGxDbGFzcyArIFwiXFxcIj48L3NwYW4+XCI7XG4gICAgICB9XG5cbiAgICAgICRlbC5odG1sKHBhZ2luYXRpb25IVE1MKTtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLnR5cGUgIT09ICdjdXN0b20nKSB7XG4gICAgICBzd2lwZXIuZW1pdCgncGFnaW5hdGlvblJlbmRlcicsIHN3aXBlci5wYWdpbmF0aW9uLiRlbFswXSk7XG4gICAgfVxuICB9LFxuICBpbml0OiBmdW5jdGlvbiBpbml0KCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb247XG4gICAgaWYgKCFwYXJhbXMuZWwpIHJldHVybjtcbiAgICB2YXIgJGVsID0gJChwYXJhbXMuZWwpO1xuICAgIGlmICgkZWwubGVuZ3RoID09PSAwKSByZXR1cm47XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy51bmlxdWVOYXZFbGVtZW50cyAmJiB0eXBlb2YgcGFyYW1zLmVsID09PSAnc3RyaW5nJyAmJiAkZWwubGVuZ3RoID4gMSkge1xuICAgICAgJGVsID0gc3dpcGVyLiRlbC5maW5kKHBhcmFtcy5lbCk7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy50eXBlID09PSAnYnVsbGV0cycgJiYgcGFyYW1zLmNsaWNrYWJsZSkge1xuICAgICAgJGVsLmFkZENsYXNzKHBhcmFtcy5jbGlja2FibGVDbGFzcyk7XG4gICAgfVxuXG4gICAgJGVsLmFkZENsYXNzKHBhcmFtcy5tb2RpZmllckNsYXNzICsgcGFyYW1zLnR5cGUpO1xuXG4gICAgaWYgKHBhcmFtcy50eXBlID09PSAnYnVsbGV0cycgJiYgcGFyYW1zLmR5bmFtaWNCdWxsZXRzKSB7XG4gICAgICAkZWwuYWRkQ2xhc3MoXCJcIiArIHBhcmFtcy5tb2RpZmllckNsYXNzICsgcGFyYW1zLnR5cGUgKyBcIi1keW5hbWljXCIpO1xuICAgICAgc3dpcGVyLnBhZ2luYXRpb24uZHluYW1pY0J1bGxldEluZGV4ID0gMDtcblxuICAgICAgaWYgKHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgPCAxKSB7XG4gICAgICAgIHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgPSAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ3Byb2dyZXNzYmFyJyAmJiBwYXJhbXMucHJvZ3Jlc3NiYXJPcHBvc2l0ZSkge1xuICAgICAgJGVsLmFkZENsYXNzKHBhcmFtcy5wcm9ncmVzc2Jhck9wcG9zaXRlQ2xhc3MpO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXMuY2xpY2thYmxlKSB7XG4gICAgICAkZWwub24oJ2NsaWNrJywgXCIuXCIgKyBwYXJhbXMuYnVsbGV0Q2xhc3MsIGZ1bmN0aW9uIG9uQ2xpY2soZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHZhciBpbmRleCA9ICQodGhpcykuaW5kZXgoKSAqIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIGluZGV4ICs9IHN3aXBlci5sb29wZWRTbGlkZXM7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKGluZGV4KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGV4dGVuZChzd2lwZXIucGFnaW5hdGlvbiwge1xuICAgICAgJGVsOiAkZWwsXG4gICAgICBlbDogJGVsWzBdXG4gICAgfSk7XG4gIH0sXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICBpZiAoIXBhcmFtcy5lbCB8fCAhc3dpcGVyLnBhZ2luYXRpb24uZWwgfHwgIXN3aXBlci5wYWdpbmF0aW9uLiRlbCB8fCBzd2lwZXIucGFnaW5hdGlvbi4kZWwubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgdmFyICRlbCA9IHN3aXBlci5wYWdpbmF0aW9uLiRlbDtcbiAgICAkZWwucmVtb3ZlQ2xhc3MocGFyYW1zLmhpZGRlbkNsYXNzKTtcbiAgICAkZWwucmVtb3ZlQ2xhc3MocGFyYW1zLm1vZGlmaWVyQ2xhc3MgKyBwYXJhbXMudHlwZSk7XG4gICAgaWYgKHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMpIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMucmVtb3ZlQ2xhc3MocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzKTtcblxuICAgIGlmIChwYXJhbXMuY2xpY2thYmxlKSB7XG4gICAgICAkZWwub2ZmKCdjbGljaycsIFwiLlwiICsgcGFyYW1zLmJ1bGxldENsYXNzKTtcbiAgICB9XG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdwYWdpbmF0aW9uJyxcbiAgcGFyYW1zOiB7XG4gICAgcGFnaW5hdGlvbjoge1xuICAgICAgZWw6IG51bGwsXG4gICAgICBidWxsZXRFbGVtZW50OiAnc3BhbicsXG4gICAgICBjbGlja2FibGU6IGZhbHNlLFxuICAgICAgaGlkZU9uQ2xpY2s6IGZhbHNlLFxuICAgICAgcmVuZGVyQnVsbGV0OiBudWxsLFxuICAgICAgcmVuZGVyUHJvZ3Jlc3NiYXI6IG51bGwsXG4gICAgICByZW5kZXJGcmFjdGlvbjogbnVsbCxcbiAgICAgIHJlbmRlckN1c3RvbTogbnVsbCxcbiAgICAgIHByb2dyZXNzYmFyT3Bwb3NpdGU6IGZhbHNlLFxuICAgICAgdHlwZTogJ2J1bGxldHMnLFxuICAgICAgLy8gJ2J1bGxldHMnIG9yICdwcm9ncmVzc2Jhcicgb3IgJ2ZyYWN0aW9uJyBvciAnY3VzdG9tJ1xuICAgICAgZHluYW1pY0J1bGxldHM6IGZhbHNlLFxuICAgICAgZHluYW1pY01haW5CdWxsZXRzOiAxLFxuICAgICAgZm9ybWF0RnJhY3Rpb25DdXJyZW50OiBmdW5jdGlvbiBmb3JtYXRGcmFjdGlvbkN1cnJlbnQobnVtYmVyKSB7XG4gICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICB9LFxuICAgICAgZm9ybWF0RnJhY3Rpb25Ub3RhbDogZnVuY3Rpb24gZm9ybWF0RnJhY3Rpb25Ub3RhbChudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgIH0sXG4gICAgICBidWxsZXRDbGFzczogJ3N3aXBlci1wYWdpbmF0aW9uLWJ1bGxldCcsXG4gICAgICBidWxsZXRBY3RpdmVDbGFzczogJ3N3aXBlci1wYWdpbmF0aW9uLWJ1bGxldC1hY3RpdmUnLFxuICAgICAgbW9kaWZpZXJDbGFzczogJ3N3aXBlci1wYWdpbmF0aW9uLScsXG4gICAgICAvLyBORVdcbiAgICAgIGN1cnJlbnRDbGFzczogJ3N3aXBlci1wYWdpbmF0aW9uLWN1cnJlbnQnLFxuICAgICAgdG90YWxDbGFzczogJ3N3aXBlci1wYWdpbmF0aW9uLXRvdGFsJyxcbiAgICAgIGhpZGRlbkNsYXNzOiAnc3dpcGVyLXBhZ2luYXRpb24taGlkZGVuJyxcbiAgICAgIHByb2dyZXNzYmFyRmlsbENsYXNzOiAnc3dpcGVyLXBhZ2luYXRpb24tcHJvZ3Jlc3NiYXItZmlsbCcsXG4gICAgICBwcm9ncmVzc2Jhck9wcG9zaXRlQ2xhc3M6ICdzd2lwZXItcGFnaW5hdGlvbi1wcm9ncmVzc2Jhci1vcHBvc2l0ZScsXG4gICAgICBjbGlja2FibGVDbGFzczogJ3N3aXBlci1wYWdpbmF0aW9uLWNsaWNrYWJsZScsXG4gICAgICAvLyBORVdcbiAgICAgIGxvY2tDbGFzczogJ3N3aXBlci1wYWdpbmF0aW9uLWxvY2snXG4gICAgfVxuICB9LFxuICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBiaW5kTW9kdWxlTWV0aG9kcyhzd2lwZXIsIHtcbiAgICAgIHBhZ2luYXRpb246IF9leHRlbmRzKHtcbiAgICAgICAgZHluYW1pY0J1bGxldEluZGV4OiAwXG4gICAgICB9LCBQYWdpbmF0aW9uKVxuICAgIH0pO1xuICB9LFxuICBvbjoge1xuICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoc3dpcGVyKSB7XG4gICAgICBzd2lwZXIucGFnaW5hdGlvbi5pbml0KCk7XG4gICAgICBzd2lwZXIucGFnaW5hdGlvbi5yZW5kZXIoKTtcbiAgICAgIHN3aXBlci5wYWdpbmF0aW9uLnVwZGF0ZSgpO1xuICAgIH0sXG4gICAgYWN0aXZlSW5kZXhDaGFuZ2U6IGZ1bmN0aW9uIGFjdGl2ZUluZGV4Q2hhbmdlKHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi51cGRhdGUoKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHN3aXBlci5zbmFwSW5kZXggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLnVwZGF0ZSgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgc25hcEluZGV4Q2hhbmdlOiBmdW5jdGlvbiBzbmFwSW5kZXhDaGFuZ2Uoc3dpcGVyKSB7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi51cGRhdGUoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNsaWRlc0xlbmd0aENoYW5nZTogZnVuY3Rpb24gc2xpZGVzTGVuZ3RoQ2hhbmdlKHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi5yZW5kZXIoKTtcbiAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24udXBkYXRlKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBzbmFwR3JpZExlbmd0aENoYW5nZTogZnVuY3Rpb24gc25hcEdyaWRMZW5ndGhDaGFuZ2Uoc3dpcGVyKSB7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi5yZW5kZXIoKTtcbiAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24udXBkYXRlKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KHN3aXBlcikge1xuICAgICAgc3dpcGVyLnBhZ2luYXRpb24uZGVzdHJveSgpO1xuICAgIH0sXG4gICAgY2xpY2s6IGZ1bmN0aW9uIGNsaWNrKHN3aXBlciwgZSkge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5lbCAmJiBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uaGlkZU9uQ2xpY2sgJiYgc3dpcGVyLnBhZ2luYXRpb24uJGVsLmxlbmd0aCA+IDAgJiYgISQoZS50YXJnZXQpLmhhc0NsYXNzKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5idWxsZXRDbGFzcykpIHtcbiAgICAgICAgdmFyIGlzSGlkZGVuID0gc3dpcGVyLnBhZ2luYXRpb24uJGVsLmhhc0NsYXNzKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5oaWRkZW5DbGFzcyk7XG5cbiAgICAgICAgaWYgKGlzSGlkZGVuID09PSB0cnVlKSB7XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ3BhZ2luYXRpb25TaG93Jyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ3BhZ2luYXRpb25IaWRlJyk7XG4gICAgICAgIH1cblxuICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi4kZWwudG9nZ2xlQ2xhc3Moc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmhpZGRlbkNsYXNzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07IiwiaW1wb3J0ICcuL21haW4uc2NzcydcbmltcG9ydCB7IERPTXN0cmluZ3MgfSBmcm9tICcuL2pzL2RvbVN0cmluZ3MnXG5pbXBvcnQgeyBpbml0QnVyZ2VyTWVudUNsaWNrTGlzdGVuZXIgfSBmcm9tICcuL2pzL2hlbHBlcnMnXG5pbXBvcnQgeyBjcmVhdGVTd2lwZXIgfSBmcm9tICcuL2pzL3N3aXBlcidcblxuXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsICgpID0+IGNyZWF0ZVN3aXBlcignLnN3aXBlci1tYWluJykpXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgKCkgPT4gY3JlYXRlU3dpcGVyKCcuc3dpcGVyLW1haW4nKSlcblxuaW5pdEJ1cmdlck1lbnVDbGlja0xpc3RlbmVyKERPTXN0cmluZ3MuYnVyZ2VyTWVudUljb24sIERPTXN0cmluZ3MuYnVyZ2VyTWVudUNvbnRhaW5lcilcblxuXG5cblxuXG5cbiJdLCJzb3VyY2VSb290IjoiIn0=